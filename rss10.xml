<?xml version="1.0"?>
<rdf:RDF
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:foaf="http://xmlns.com/foaf/0.1/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns="http://purl.org/rss/1.0/"
>
<channel rdf:about="http://crustaceans.hmmz.org/">
	<title>Planet Crustaceans</title>
	<link>http://crustaceans.hmmz.org/</link>
	<description>Planet Crustaceans - http://crustaceans.hmmz.org/</description>

	<items>
		<rdf:Seq>
			<rdf:li rdf:resource="https://medium.com/p/edde0e3c4ee5" />
			<rdf:li rdf:resource="https://medium.com/p/f1acd4696b71" />
			<rdf:li rdf:resource="https://medium.com/p/8c7e981b494" />
			<rdf:li rdf:resource="tag:sweetness.hmmz.org,2018-08-27:/2018-08-27-fork-in-the-road.html" />
			<rdf:li rdf:resource="http://www.petecorey.com/blog/2018/08/27/computing-fingering-distance-with-dr-levenshtein/" />
			<rdf:li rdf:resource="https://theta.eu.org/2018/08/27/data-retention.html" />
			<rdf:li rdf:resource="http://amontalenti.com/?p=2253" />
			<rdf:li rdf:resource="https://www.ponylang.org/blog/2018/08/last-week-in-pony---august-26-2018/" />
			<rdf:li rdf:resource="http://shape-of-code.coding-guidelines.com/?p=3867" />
			<rdf:li rdf:resource="tag:gerikson.com,2018:/books/read/Plays-With-Cars" />
			<rdf:li rdf:resource="https://blog.wallaroolabs.com/2018/08/real-time-streaming-pattern-analyzing-trends/" />
			<rdf:li rdf:resource="https://blog.zacbrown.org/2018/08/23/things-i-learned-about-rust-1-of-n" />
			<rdf:li rdf:resource="https://www.brautaset.org/articles/2018/making-team-decisions.html" />
			<rdf:li rdf:resource="tag:anadoxin.org,2018-08-21:/blog/my-systems-time-was-so-wrong-that-even-ntpd-didnt-work.html" />
			<rdf:li rdf:resource="https://sulami.github.io/Pipes in PythonPipes in Python" />
			<rdf:li rdf:resource="https://gkbrk.com/2018/08/mastodon-bot-in-common-lisp/" />
			<rdf:li rdf:resource="https://www.ponylang.org/blog/2018/08/last-week-in-pony---august-19-2018/" />
			<rdf:li rdf:resource="http://www.petecorey.com/blog/2018/08/20/coffee-tea-and-theanine/" />
			<rdf:li rdf:resource="http://shape-of-code.coding-guidelines.com/?p=3853" />
			<rdf:li rdf:resource="http://amontalenti.com/?p=2233" />
			<rdf:li rdf:resource="https://medium.com/p/2dfd40f4b6f1" />
			<rdf:li rdf:resource="https://medium.com/p/1b69c06d91d8" />
			<rdf:li rdf:resource="tag:www.wezm.net,2018-08-18:/technical/2018/08/anatomy-of-a-great-rust-blog/" />
			<rdf:li rdf:resource="https://medium.com/p/4b08ccc5eedd" />
			<rdf:li rdf:resource="http://cfenollosa.com/blog/./run-qbasic-in-your-browser.html" />
			<rdf:li rdf:resource="tag:gerikson.com,2018:/books/read/The-Command-of-the-Ocean" />
			<rdf:li rdf:resource="tag:gerikson.com,2018:/books/read/The-Corporation-Wars-Emergence" />
			<rdf:li rdf:resource="http://cfenollosa.com/blog/./my-apple-watch-killed-my-iphone.html" />
			<rdf:li rdf:resource="https://j11g.com/?p=2120" />
			<rdf:li rdf:resource="http://amontalenti.com/?p=2220" />
			<rdf:li rdf:resource="https://blog.wallaroolabs.com/2018/08/utilizing-elixir-as-a-lightweight-tool-to-store-real-time-metrics-data/" />
			<rdf:li rdf:resource="http://shape-of-code.coding-guidelines.com/?p=3841" />
			<rdf:li rdf:resource="http://benaiah.me/posts/configuring-go-apps-with-toml" />
			<rdf:li rdf:resource="https://blog.artemix.org/article/show/kickstart" />
			<rdf:li rdf:resource="https://www.junglecoder.com/blog/factorlang-review" />
			<rdf:li rdf:resource="https://medium.com/p/7eb491389b23" />
			<rdf:li rdf:resource="tag:sgoel.org,2018-08-14:/posts/nim-first-impressions/" />
			<rdf:li rdf:resource="https://itscode.red/posts/announcing-pikatrack-an-open-source-fitness-tracker/" />
			<rdf:li rdf:resource="https://www.ponylang.org/blog/2018/08/last-week-in-pony---august-12-2018/" />
			<rdf:li rdf:resource="http://www.petecorey.com/blog/2018/08/13/algorithmically-fingering-guitar-chords-with-elixir/" />
			<rdf:li rdf:resource="https://patrick.marchand.ski/tech/run-bsd.html" />
			<rdf:li rdf:resource="https://vfoley.xyz/rust-compile-speed-tips/" />
			<rdf:li rdf:resource="http://shape-of-code.coding-guidelines.com/?p=3819" />
			<rdf:li rdf:resource="https://jonwillia.ms/2018/08/10/dockertest" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-08-07-22-18-41" />
			<rdf:li rdf:resource="tag:sgoel.org,2018-08-07:/posts/switching-from-keepassxc-to-bitwarden/" />
			<rdf:li rdf:resource="https://leotindall.com/post/pdf-embedding-attacks/" />
			<rdf:li rdf:resource="https://blog.wallaroolabs.com/2018/08/dynamic-keys/" />
			<rdf:li rdf:resource="http://sevag.xyz/post/sudo/" />
			<rdf:li rdf:resource="tag:gerikson.com,2018:/photo/2018-06" />
			<rdf:li rdf:resource="tag:gerikson.com,2018:/photo/2018-07" />
			<rdf:li rdf:resource="tag:gerikson.com,2018:/books/read/Go-Like-Hell" />
			<rdf:li rdf:resource="https://www.cambus.net/the-future-of-via-x86-processors/" />
			<rdf:li rdf:resource="https://blog.ovalerio.net/?p=1557" />
			<rdf:li rdf:resource="http://www.petecorey.com/blog/2018/07/30/voice-leading-with-elixir/" />
			<rdf:li rdf:resource="http://beza1e1.tuxen.de/cost_of_agile.html" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-28-22-34-16" />
			<rdf:li rdf:resource="http://journal.dedasys.com/?p=1346" />
			<rdf:li rdf:resource="https://medium.com/p/ea43d46cdbc6" />
			<rdf:li rdf:resource="https://sulami.github.io/How this blog is madeHow this blog is made" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-25-20-00-29" />
			<rdf:li rdf:resource="https://silky.github.io/posts/2018-07-25-ethics-of-AI.html" />
			<rdf:li rdf:resource="https://asylum.madhouse-project.org/blog/2018/07/24/on-git-github-and-email/" />
			<rdf:li rdf:resource="https://gkbrk.com/2018/03/writing-a-simple-ipfs-crawler/" />
			<rdf:li rdf:resource="https://gkbrk.com/2018/02/simple-dbus-service-in-python/" />
			<rdf:li rdf:resource="https://gkbrk.com/2018/01/evolving-line-art/" />
			<rdf:li rdf:resource="https://gkbrk.com/2018/01/welcome-2018/" />
			<rdf:li rdf:resource="https://gkbrk.com/2017/10/putting-my-blog-on-ipfs/" />
			<rdf:li rdf:resource="https://gkbrk.com/2017/06/unprotected-redis/" />
			<rdf:li rdf:resource="https://gkbrk.com/2017/05/android-dialer-packets/" />
			<rdf:li rdf:resource="https://gkbrk.com/2017/04/graphs-from-my-todo-txt/" />
			<rdf:li rdf:resource="https://gkbrk.com/2018/06/fetching-activitypub-feeds/" />
			<rdf:li rdf:resource="https://gkbrk.com/2018/04/generating-vanity-infohashes-for-torrents/" />
			<rdf:li rdf:resource="https://gkbrk.com/2017/02/numerical-domains-of-china/" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-23-14-48-17" />
			<rdf:li rdf:resource="http://www.petecorey.com/blog/2018/07/23/building-a-better-receive-loop/" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-21-08-20-07" />
			<rdf:li rdf:resource="http://pzel.github.io/til/2018/07/21/sending-0000-doesnt-make-sense.html" />
			<rdf:li rdf:resource="http://kaushikghose.wordpress.com/?p=7031" />
			<rdf:li rdf:resource="https://www.geeklan.co.uk/?p=2266" />
			<rdf:li rdf:resource="https://kev.inburke.com/?p=3636" />
			<rdf:li rdf:resource="http://codeplea.com/embedding-files-in-c-programs" />
			<rdf:li rdf:resource="https://www.anishathalye.com/2018/07/19/gemini-a-modern-beamerposter-theme/" />
			<rdf:li rdf:resource="https://www.brianthicks.com/post/2018/07/18/lets-make-nice-packages/" />
			<rdf:li rdf:resource="https://j11g.com/?p=2103" />
			<rdf:li rdf:resource="http://jakob.spaceReplacing+Anki+With+org-drill" />
			<rdf:li rdf:resource="https://medium.com/p/7bb3f57d4641" />
			<rdf:li rdf:resource="https://medium.com/p/88a25e162bf6" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-12-18-24-17" />
			<rdf:li rdf:resource="http://caiustheory.com/running-rails-tests-under-circleci-2.0-with-mariadb/" />
			<rdf:li rdf:resource="tag:sweetness.hmmz.org,2018-07-10:/2018-07-10-mitogen-released.html" />
			<rdf:li rdf:resource="http://www.petecorey.com/blog/2018/07/09/golfing-for-fizzbuzz-in-clojure-and-elixir/" />
			<rdf:li rdf:resource="http://www.petecorey.com/blog/2018/07/09/ping-pong-and-unresponsive-bitcoin-nodes/" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-08-12-28-47" />
			<rdf:li rdf:resource="http://beza1e1.tuxen.de/raspberry_rfid_music_player.html" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-07-19-03-33" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-07-00-36-37" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-06-16-44-02" />
			<rdf:li rdf:resource="https://blog.asrpo.com/making_a_low_level_debugger_part_3" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-05-21-10-59" />
		</rdf:Seq>
	</items>
</channel>

<item rdf:about="https://medium.com/p/edde0e3c4ee5">
	<title>Indrek Lasn (indreklasn): From zero to hero with Vue — Input handling, Loops, Components</title>
	<link>https://medium.com/@wesharehoodies/from-zero-to-hero-with-vue-input-handling-loops-components-edde0e3c4ee5?source=rss-ce572601b7e------2</link>
	<content:encoded>&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/662/1*Kgn3iiI6VxgPefRF6vcleg.png&quot; /&gt;&lt;p&gt;Welcome back, please check the basics first before continuing as we will move on to more advanced topics.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/@wesharehoodies/from-zero-to-hero-with-vue-up-and-running-f1acd4696b71&quot;&gt;From zero to hero with Vue — Up and running&lt;/a&gt;&lt;/p&gt;&lt;p&gt;You made it far — but the our path is even further. Keep on reading and learning to become a Vue master. We learned the basics so far, let’s continue.&lt;/p&gt;&lt;h3&gt;Input handling&lt;/h3&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/603/1*14VNxet2mR_2uUToEnm5Sw.png&quot; /&gt;v-model directive&lt;p&gt;Forms play a key role in any modern application, from login screen to dashboards.&lt;/p&gt;&lt;p&gt;Let’s make our message dynamic. By making the input interactive — we can decide what our message property will be. Keep in mind, all inputs should be wrapped inside a form tag.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*hNoZ7eH6Ho9cIZTF0FtyZw.png&quot; /&gt;&lt;a href=&quot;https://stackoverflow.com/a/29011407/5073961&quot;&gt;https://stackoverflow.com/a/29011407/5073961&lt;/a&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/908/1*tgsWZvj_5OX4PTzUy01Y0A.png&quot; /&gt;Creating our first v-model&lt;p&gt;That’s all there is to simple inputs with Vue! Just create a simple input and attach a v-model directive to it and watch the magic happen.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*a2TS-tiWvu2YNcD1z6jpWg.gif&quot; /&gt;Dynamic message&lt;p&gt;Notice how all bindings to message property are updated too!&lt;/p&gt;&lt;p&gt;Super simple — love how Vue turns complicated subjects to very approachable solutions.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*-wLy73waPzc0IzsZ29yUmw.png&quot; /&gt;caveat: Vue will always prioritise the Vue instance over provided defaults&lt;p&gt;Moving on to the checkbox, let’s bind our checkbox to the boolean hasMessage property.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/868/1*hu1FaEe3tRKSOX5e5ky-BA.png&quot; /&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*xR5LnbETxBl8zYzTilj9nA.gif&quot; /&gt;Toggling our message with the freshly created checkbox&lt;p&gt;That’s all there is! There’s literally no plumbing and setup. Vue also provides a lot of flexibility.&lt;/p&gt;&lt;p&gt;Here’s a quick example of the select input;&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*HbwOAdbTs6Uoi0oAUDIuPA.png&quot; /&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*GB9rs4AeJqwDlQV4iKIh5A.png&quot; /&gt;select input example&lt;p&gt;All we did was created a new data property called selected and display the results.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*6AUbWQSc62XFyzytxYuaMw.gif&quot; /&gt;Testing the select input&lt;p&gt;Bonus tip; You can add modifiers to the v-model.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/812/1*zq5DnTVPczu4BoZ03AWUtQ.png&quot; /&gt;.trim will remove all whitespace&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*sCiOEn0G5zvw3WTHTRfirA.png&quot; /&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*GbrYyQkeUTbNfqARMT95cA.png&quot; /&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*3lG3kCbSa7OlaZyEFTmdCg.png&quot; /&gt;&lt;h3&gt;Loops&lt;/h3&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/603/1*fDpMh4QoQ9gScP0jb_devw.png&quot; /&gt;v-for directive&lt;p&gt;Loops are made right and simple with Vue. Loops are useful to iterate over bunch of data and displaying it. Good scenarios when to use loops — fetching data from the backend.&lt;/p&gt;&lt;p&gt;For now we’re going to use mock data. Add a new property called messages — notice the plural! The messages property is the array which holds all our messages.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*XP_TRw_cNcL0V0JChJ4Hwg.png&quot; /&gt;adding messages&lt;p&gt;Here’s one way to iterate over all the messages using the v-for directive;&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*OYQwsMD2PqZDRxvkvuwe-A.png&quot; /&gt;v-for directive&lt;p&gt;V-for iterates over all objects inside an array and lets us display them.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*lwLVZK_8Ct7VN1lOUgR1BQ.png&quot; /&gt;&lt;p&gt;Here we go! We successfully looped over our collection of messages.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Bonus performance tip;&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*HNrJUh54FbdHglsEyUySuA.png&quot; /&gt;Using the :key directive for loops will boost performance&lt;h3&gt;Components&lt;/h3&gt;&lt;p&gt;Components are reusable Vue instances with a name. Components let us reuse existing markup and functionality. The reason why we want to reuse code is simple — so we don’t repeat ourselves. We want our code to be DRY — Don’t repeat yourself.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*XDqVMROAP0l8bK6LCi_ibw.png&quot; /&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&lt;/a&gt;&lt;p&gt;Right so, here’s what a basic Vue component looks like;&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*uNLUKGBzAXuob8jH9jLMCQ.png&quot; /&gt;Creating a basic Vue component&lt;p&gt;Vue components are very simple to create;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;We call the Vue.component instance and give it a variable name, navbar is this example.&lt;/li&gt;&lt;li&gt;The first argument for the component is the name, the second argument is an object where you can specify the options, like data, methods, template&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The template is where we place our HTML. Pay close attention, those are no regular strings — those are template literals.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*x2NIcwtuWYBqoFrXFEH0Gg.png&quot; /&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&lt;/a&gt;&lt;p&gt;If you’re using VSC — these two extensions enable syntax highlighting and other handy tools.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-extensionpack&quot;&gt;Vue VS Code Extension Pack - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=faisalhakim47.vue-inline-template&quot;&gt;Vue Inline Template - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We have to make Vue aware of our components. Let’s include our component in the main instance, like below;&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/610/1*uPVwZnv37UrDnS7aCl_Z7g.png&quot; /&gt;&lt;p&gt;And now we can place our custom tags inside the HTML.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*BceJInwT-xh7rsYbecJb2w.png&quot; /&gt;Adding our navbar element inside the HTML&lt;p&gt;Here’s how the navbar we created looks inside the browser.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*ucNZVwxuAEknFdok_IJmdw.png&quot; /&gt;reusable Vue components&lt;p&gt;Notice the DOM is plain HTML, which means any browser that supports HTML, supports Vue components.&lt;/p&gt;&lt;p&gt;Cool! We know how to leverage Vue components now! Vue components are much more capable than just rendering markup, let’s continue our journey and see what else the Vue components can do for us.&lt;/p&gt;&lt;p&gt;If you ran into any errors, check out the source code below;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/wesharehoodies/zero-to-hero-with-vue&quot;&gt;wesharehoodies/zero-to-hero-with-vue&lt;/a&gt;&lt;/p&gt;&lt;p&gt;To be continued…&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/lasnindrek&quot;&gt;Indrek Lasn (@lasnindrek) | Twitter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://codeburst.io/supercharge-your-debugging-experience-for-node-js-3f0ddfaffbb2&quot;&gt;Supercharge your debugging experience for Node.js&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.org/typescript-javascript-with-super-powers-a333b0fcabc9&quot;&gt;TypeScript — JavaScript with superpowers&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=edde0e3c4ee5&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2018-08-29T16:12:48+00:00</dc:date>
</item>
<item rdf:about="https://medium.com/p/f1acd4696b71">
	<title>Indrek Lasn (indreklasn): From zero to hero with Vue — Up and running</title>
	<link>https://medium.com/@wesharehoodies/from-zero-to-hero-with-vue-up-and-running-f1acd4696b71?source=rss-ce572601b7e------2</link>
	<content:encoded>&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/662/1*tuISZaQQ4D6DC9qJQNB_tA.png&quot; /&gt;&lt;p&gt;Previous chapter we went over why we should give Vue a go, link below.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/@wesharehoodies/from-zero-to-hero-with-vue-why-vue-8c7e981b494&quot;&gt;From zero to hero with Vue — Why Vue?&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Alright! Let’s get our hands dirty! All we need is a text editor and a browser. I will be using Visual Studio Code paired with Google Chrome.&lt;/p&gt;&lt;h3&gt;Table of contents:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Getting started, understanding the basics, “hello world”&lt;/li&gt;&lt;li&gt;Directives&lt;/li&gt;&lt;li&gt;Methods&lt;/li&gt;&lt;li&gt;Conditional statements&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;“Hello World”&lt;/h3&gt;&lt;p&gt;Let’s begin by opening the terminal and creating a folder called zero-to-hero-vue — This is where our Vue application will live. Create a index.html and app.js inside the folder as well.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1016/1*DAlpDY8tCQFkUBUE-66XRw.png&quot; /&gt;Creating our folder and index.html&lt;p&gt;Instead of writing the basic html boilerplate, we can utilise &lt;a href=&quot;https://emmet.io/&quot;&gt;emmet&lt;/a&gt;. Emmet is built-in for VSC.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/784/1*1_oDUytKP9hm12A9JoAv9w.gif&quot; /&gt;&lt;strong&gt;!&lt;/strong&gt; + &lt;strong&gt;Tab&lt;/strong&gt; inside a .html file creates the boilerplate&lt;p&gt;&lt;a href=&quot;https://emmet.io/&quot;&gt;Emmet - the essential toolkit for web-developers&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In case you’re curious for more emmet tips and hotkeys, here’s the full cheat-sheet.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*XU0d2SvR-KbYQj1OK8ToYA.png&quot; /&gt;&lt;a href=&quot;https://docs.emmet.io/cheat-sheet/&quot;&gt;https://docs.emmet.io/cheat-sheet/&lt;/a&gt;&lt;p&gt;We’re going to start off by including the Vue library as an external script. We’re going to use a module bundler later on, for now let’s keep it simple.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*fuikEcoIYg1p3ikQoeXLBw.png&quot; /&gt;&lt;p&gt;Include this script after the body tags, make sure it’s first in order always.&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/c50d9a9fbb3a3b0e9bca2ba567848c7c/href&quot;&gt;https://medium.com/media/c50d9a9fbb3a3b0e9bca2ba567848c7c/href&lt;/a&gt;&lt;p&gt;Nifty! Make sure to link app.js with the index.html too.&lt;/p&gt;&lt;p&gt;Every Vue application starts by creating a new Vue instance with the Vue constructor. We bind the Vue instance to a root element, #app in this case.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/js-dojo/whats-the-deal-with-vue-s-virtual-dom-3ed4fc0dbb20&quot;&gt;Vue uses a virtual DOM&lt;/a&gt;. The vDOM needs to be “mounted” to a DOM element.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/604/1*NY6IZVL3uqBCgx2jTyAmug.png&quot; /&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*afgoJjXscDiBtb6SsgOpOg.png&quot; /&gt;initializing the vue app&lt;p&gt;We created a new Vue instance. We bound the Vue instance to the div with the id of app — think of this as our root element. At the bottom we included the app.js script.&lt;/p&gt;&lt;p&gt;That’s all there is! We can immediately start writing reactive code.&lt;/p&gt;&lt;p&gt;Next up is the data property. The data property is the meant for storing our application data… hey logical right? Think of as equivalent as this.props.data from React world. Inside the data property we can declare our properties we want to use in our app, let’s make one called message&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*jyRLG7A4ta4GJXUddpl5VA.png&quot; /&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/974/1*jDECc6C6cuuzLsFvNe02Gw.png&quot; /&gt;Inside the &lt;strong&gt;#app&lt;/strong&gt; div we can use Javascript expressions since this is where we initialised our Vue app.&lt;p&gt;Notice the curly brackets inside the index.html — Vue.js uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying Vue instance’s data. All Vue.js templates are valid HTML that can be parsed by spec-compliant browsers and HTML parsers.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://vuejs.org/v2/guide/syntax.html&quot;&gt;Template Syntax - Vue.js&lt;/a&gt;&lt;/p&gt;&lt;p&gt;When a Vue instance is created, it adds all the properties found in its data object to Vue’s reactivity system. When the values of those properties change, the view will “react”, updating to match the new values.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*Kdp4sQehJJBVTe6II7ch_g.png&quot; /&gt;index.html&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*BynA_1DVcsOlW0QEzGL0tg.png&quot; /&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*xcGltp6pRq17pXCTf6Iihw.png&quot; /&gt;&lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot;&gt;“The introduction to Reactive Programming you’ve been missing”&lt;/a&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*DrPXKI9ImiaRuXmswMyDHg.gif&quot; /&gt;&lt;h3&gt;Directives&lt;/h3&gt;&lt;p&gt;Vue uses attributes called directives. Directives are a simple way to keep the user interface and data in sync.&lt;/p&gt;&lt;p&gt;Directives are prefixed with v- to indicate that they are special attributes provided by Vue, and as you may have guessed, they apply special reactive behavior to the rendered DOM. Here, it is basically saying “keep this element’s title attribute up-to-date with the message property on the Vue instance.”&lt;/p&gt;&lt;p&gt;Let’s add a span with a Vue directive.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/808/1*KkCdjmOrBRhbXI-6BTEIhA.png&quot; /&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*8CL8lpHS7KFgnnggL7fBkQ.png&quot; /&gt;&lt;p&gt;The syntax for a directive is easy to understand. Vue will look for a vue inside the data property. The title attribute is from plain html, if you hover over the title attribute, a hidden text will be shown. It’s mostly used for acronyms and definitions.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*h5bsV5y5Qmcm7GhO7vWwaw.gif&quot; /&gt;Notice when hovering the text, a title will appear&lt;p&gt;&lt;em&gt;Bonus tip: &lt;/em&gt;There’s a shorthand for the v-bind syntax. We can remove the v-bind completely and be left with the :title&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/894/1*qEfHS1QgTUr1mQ6PNCaE-g.png&quot; /&gt;:title is the same as v-bind:title&lt;p&gt;If you feel confused, please let me know in the comments and I will try to explain it better. ❤&lt;/p&gt;&lt;h3&gt;Methods&lt;/h3&gt;&lt;p&gt;Every application has buttons, inputs, etc for interactivity. Letting the user interact with the app is the very core of any application.&lt;/p&gt;&lt;p&gt;Let’s create a button which logs our message to the console.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*L7vO-fGGOmLoDCUWPt6ImA.png&quot; /&gt;&lt;p&gt;Notice we created a new Vue property called methods. This is where we will place our methods.&lt;/p&gt;&lt;p&gt;The this keyword within Vue gives you easy access to all of your data and functionalities. Wether you want to access a data property, a computed property, a component prop or a function, you can all find them directly bound to the this keyword.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/978/1*LTya3IOzvvJqVM063DDJDQ.png&quot; /&gt;&lt;p&gt;We created a button with the directive v-on:click and passed in our method name as a string. Just like we do with plain Javascript.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*AP-0225EdV9oBsQslkV2gw.gif&quot; /&gt;Calling our logMessage method&lt;p&gt;Works like a charm!&lt;/p&gt;&lt;p&gt;&lt;em&gt;Bonus tip: &lt;/em&gt;Shorthand for v-on:click is @click&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/806/1*foTr3Eh1aCg4n2UN0kFjiA.png&quot; /&gt;@click is the equivalent to v-on:click&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*PngUC1W2frXO5OyF2CqGmQ.png&quot; /&gt;&lt;h3&gt;Conditional statements&lt;/h3&gt;&lt;p&gt;Conditionals and loops are the very essentials of building useful applications. All conditionals go under the logic of “what happens when?” — if, else, else if, try, catch, etc are all conditional statements.&lt;/p&gt;&lt;p&gt;Let’s create the following conditional — if we have a message, show it, if not, don’t show it.&lt;/p&gt;&lt;p&gt;To get started we’re going to create a boolean property inside our data object.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*O41KsPX3fs1wCXecNzta0g.png&quot; /&gt;We added a new property: hasMessage: true&lt;p&gt;Next up we can use a directive called v-if inside our markup.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*rjp8Eked5-06ATpRic6aiQ.png&quot; /&gt;&lt;p&gt;You got it! If we look at our browser, nothing has changed. This is because we set the showMessage property to true. In case you’re curious, v-else and v-if-else are valid conditionals too.&lt;/p&gt;&lt;p&gt;Let’s create a method which toggles the showMessage property. &lt;strong&gt;Try using what we learned earlier to do this by yourself. You can do it!&lt;/strong&gt;&lt;/p&gt;&lt;h4&gt;Ready?&lt;/h4&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*rOGRWj2CriO_JGUiuFeybA.png&quot; /&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/964/1*NAMVbuYWkbHp773_PvDmPw.png&quot; /&gt;&lt;p&gt;Adding a simple method which toggles our showMessage property and including it in our view.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*WCQjZV-y9-fw8-n_23FU2A.gif&quot; /&gt;Toggling the message&lt;p&gt;Congratulations for making it this far! You have successfully learned the very basics of Vue. This is just the beginning of a greater path.&lt;/p&gt;&lt;h4&gt;Source code for the chapter&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/wesharehoodies/zero-to-hero-with-vue/tree/getting-started-with-the-basics&quot;&gt;wesharehoodies/zero-to-hero-with-vue&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We have so much to cover, follow me to the next chapter below;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@wesharehoodies/from-zero-to-hero-with-vue-input-handling-loops-components-edde0e3c4ee5&quot;&gt;From zero to hero with Vue — Input handling, Loops, Components&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/lasnindrek&quot;&gt;Indrek Lasn (@lasnindrek) | Twitter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://codeburst.io/all-you-need-to-know-about-the-web-audio-api-3df170559378&quot;&gt;All you need to know about the Web Audio API&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://codeburst.io/supercharge-your-debugging-experience-for-node-js-3f0ddfaffbb2&quot;&gt;Supercharge your debugging experience for Node.js&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.org/the-secret-to-being-a-top-developer-is-building-things-heres-a-list-of-fun-apps-to-build-aac61ac0736c&quot;&gt;The secret to being a top developer is building things! Here’s a list of fun apps to build!&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f1acd4696b71&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2018-08-29T16:11:30+00:00</dc:date>
</item>
<item rdf:about="https://medium.com/p/8c7e981b494">
	<title>Indrek Lasn (indreklasn): From zero to hero with Vue — Why Vue?</title>
	<link>https://medium.freecodecamp.org/from-zero-to-hero-with-vue-why-vue-8c7e981b494?source=rss-ce572601b7e------2</link>
	<content:encoded>&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/662/1*hSQk5rsX-WuEDOl7Wsjt3w.png&quot; /&gt;&lt;p&gt;Vue has taken the Javascript world by a huge storm — for a good reason. Vue is a great tool to work with. I had the pleasure to work for a company who made Vue applications and I found it a blast!&lt;/p&gt;&lt;p&gt;It’s safe to say Vue has proven itself and has a bright future ahead. Why not give Vue a try? After all, being a developer is being a student for life.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*K7qtz_Nzp9U1Uuin4szbFQ.png&quot; /&gt;&lt;a href=&quot;https://vuejs.org/v2/guide/index.html&quot;&gt;https://vuejs.org/v2/guide/index.html&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://vuejs.org/v2/guide/index.html&quot;&gt;Introduction - Vue.js&lt;/a&gt;&lt;/p&gt;&lt;h4&gt;Has Vue passed React in popularity yet?&lt;/h4&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/814/1*IvXUBFGz44E-G47p-Uk9aA.png&quot; /&gt;&lt;a href=&quot;https://hasvuepassedreactyet.surge.sh/&quot;&gt;https://hasvuepassedreactyet.surge.sh/&lt;/a&gt;&lt;p&gt;As as skeptic — Vue passing React in Github stars was something I didn’t believe until I checked it out myself.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*PIydWbtOz31YWOwWpFQqZQ.png&quot; /&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*B9VCsRV1fye4pAWXzsUEtg.png&quot; /&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*ySkkpXrPArYy93XQD_z7hQ.png&quot; /&gt;Vue | React | Angular&lt;p&gt;Bonkers! Who could have predicted Vue passing React by popularity.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*psOLAxoJ3yFSZ5gi__BO6w.png&quot; /&gt;&lt;a href=&quot;https://vuejs.org/&quot;&gt;https://vuejs.org/&lt;/a&gt;&lt;h3&gt;Why Vue?&lt;/h3&gt;&lt;p&gt;Why not Angular, React, Ember, or any as good framework out there?&lt;/p&gt;&lt;p&gt;There are many reason I would choose Vue over any other framework for a fresh project. I always base my reasoning on rationale and reasoning.&lt;/p&gt;&lt;p&gt;Remember, these are tools which help us to get the job done. Pick the right tool for the right job. If you have a hammer everything looks like a nail. Recognising which tool is suitable for the task can save you a lot of time and money in the long run.&lt;/p&gt;&lt;h4&gt;Here are couple reasons to pick Vue;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Short and sweet learning curve, easy to get up&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Getting up and running with Vue is quite straight forward. You don’t need to use a module bundler like Webpack or &lt;a href=&quot;https://medium.freecodecamp.org/all-you-need-to-know-about-parcel-dbe151b70082&quot;&gt;Parcel&lt;/a&gt;. You also don’t need a module bundler for React. Removing the need for module bundlers reduces the barriers of getting started.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Strong open-source community&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Learning a framework is a huge investment and we want to make sure we’re learning the right tool at the right time.&lt;/p&gt;&lt;p&gt;Whilst React and Angular are backed by a huge company, Vue is &lt;em&gt;mostly&lt;/em&gt; backed by a very active open source community. The word &lt;em&gt;mostly&lt;/em&gt; has huge emphasis here.&lt;/p&gt;&lt;p&gt;This can be seem as a disadvantage while also serving as an advantage. You might share a similar discussion with managers or business people;&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/537/1*EJvmHWs37tHppRTZBQbdvg.png&quot; /&gt;&lt;p&gt;This is a very compelling argument on the surface, but with solid reasoning this argument can be easily flipped over.&lt;/p&gt;&lt;p&gt;A single entity deciding what to do with a widely used tool is actually more riskier than a non-traditionally corporate backed tool.&lt;/p&gt;&lt;p&gt;Let’s say company X builds and maintains tool Z. What happens if company X goes bust and decides to close doors? What happens if they decide to “re-allocate resources” and ditch the project?&lt;/p&gt;&lt;p&gt;Judging by the Patreon page, the core Vue team is well-off and the project has super long term goals.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*rOGT4rXH6T0ybpXPwjsdeA.png&quot; /&gt;&lt;a href=&quot;https://www.patreon.com/evanyou&quot;&gt;https://www.patreon.com/evanyou&lt;/a&gt;&lt;p&gt;In case you’re wondering, here’s how I would answer to the manager;&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/537/1*EjYYapldMtD025okM7gLVA.png&quot; /&gt;Talking like this can get you high earning jobs&lt;p&gt;Established companies won’t let you use tech without solid reasoning. Having good reasoning to which tools you use might save you time and make you a lot of money in the long run.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Friendly migration path for legacy projects who don’t want to commit 100% to a single page app (SPA)&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Dropping Vue in a project and slowly migrating a huge monolithic application to a single page app is a proven path.&lt;/p&gt;&lt;p&gt;I had a great conversation with a technical executive for an established SaaS startup. The startup has a product and is making revenue. The following conversation went as follows; I asked the founder the following;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Me&lt;/em&gt;: Why Vue? I’m fascinated since it’s not a traditional tech choice in this city.&lt;/p&gt;&lt;p&gt;Why not React or Angular since there are more React and Angular developers around here?&lt;/p&gt;&lt;p&gt;&lt;em&gt;Founder: &lt;/em&gt;We are a small team with no dedicated frontend expert. We want to rewrite our frontend, add new features and clean up code. &lt;strong&gt;We don’t want to commit rewriting completely yet &lt;/strong&gt;— using Vue with our monolithic application and writing new features works great for us.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Vue plays well with existing server side rendered applications like Rails, Laravel or Node.&lt;/strong&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/618/1*N7iYuWWnW5rwZfvup6ubrg.png&quot; /&gt;Vue gets along well with SSR apps&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Learning Vue is fun!&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This my favourite reason to learn Vue. Vue is fun, Vue is fresh; We’re developers, we love to have fun.&lt;/p&gt;&lt;p&gt;Vue components are like lego blocks. Each component has a encapsulated view, logic, snd styles. Piecing together the components is like putting lego together.&lt;/p&gt;&lt;p&gt;Vue and React have the best tooling by far. All of the plumbing is abstracted away so we can focus on the fun parts.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*Z8q4CgXsL8ldzob3xpdsow.png&quot; /&gt;&lt;a href=&quot;https://vuejs.org/v2/guide/comparison.html&quot;&gt;https://vuejs.org/v2/guide/comparison.html&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://vuejs.org/v2/guide/comparison.html&quot;&gt;Comparison with Other Frameworks - Vue.js&lt;/a&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*pVaLgReeJWlLUGhPee8IUQ.png&quot; /&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*SkG4kaS8GwpMmwhmtDK-JA.png&quot; /&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*mo56e4LdPRSSXDu7w8Fksw.png&quot; /&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*wrPNQtKXrHObPgIgMqsCtg.png&quot; /&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*073MqrESr1FrWz4SL8Uaqg.png&quot; /&gt;&lt;p&gt;Convinces to give Vue a try? — without further ado, let’s get started!&lt;/p&gt;&lt;p&gt;Continued in the next chapter;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@wesharehoodies/from-zero-to-hero-with-vue-up-and-running-f1acd4696b71&quot;&gt;From zero to hero with Vue — Up and running&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/lasnindrek&quot;&gt;Indrek Lasn (@lasnindrek) | Twitter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.org/the-secret-to-being-a-top-developer-is-building-things-heres-a-list-of-fun-apps-to-build-aac61ac0736c&quot;&gt;The secret to being a top developer is building things! Here’s a list of fun apps to build!&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://codeburst.io/supercharge-your-debugging-experience-for-node-js-3f0ddfaffbb2&quot;&gt;Supercharge your debugging experience for Node.js&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://codeburst.io/lets-build-a-customizable-rich-text-editor-with-slate-and-react-beefd5d441f2&quot;&gt;Let’s build a fast, slick and customizable rich text editor with Slate.js and React&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.org/typescript-javascript-with-super-powers-a333b0fcabc9&quot;&gt;TypeScript — JavaScript with superpowers&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8c7e981b494&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.freecodecamp.org/from-zero-to-hero-with-vue-why-vue-8c7e981b494&quot;&gt;From zero to hero with Vue — Why Vue?&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.freecodecamp.org&quot;&gt;freeCodeCamp&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-29T16:09:28+00:00</dc:date>
</item>
<item rdf:about="tag:sweetness.hmmz.org,2018-08-27:/2018-08-27-fork-in-the-road.html">
	<title>David Wilson (dw): A fork in the road for Mitogen</title>
	<link>https://sweetness.hmmz.org/2018-08-27-fork-in-the-road.html</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;https://mitogen.readthedocs.io/en/stable/ansible.html&quot;&gt;Mitogen for Ansible&lt;/a&gt;'s
original plan described facets of a scheme centered on features made possible
by a rigorous single cohesive distributed program model, but of those facets,
it quickly became clear that most users are really only interested in the big
one: a much faster Ansible.&lt;/p&gt;
&lt;p&gt;While I'd prefer feature work, this priority is fine: better performance
usually entails enhancements that benefit the overall scheme, and improving
people's lives in this manner is highly rewarding, so incentives remain
aligned. It is impossible not to find renewed energy when faced with comments
like this:&lt;/p&gt;
&lt;blockquote&gt;
    Enabling the mitogen plugin in ansible feels like switching from floppy to SSD&lt;br /&gt;
    &lt;a href=&quot;https://t.co/nCshkioX9h&quot;&gt;https://t.co/nCshkioX9h&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although feedback on the project has been very positive, the existing solution
is sometimes not enough. Limitations in the extension and Ansible really bite,
most often manifesting when running against many targets. In these scenarios,
it is heartbreaking to see the work fail to help those who could benefit from
it most, and that's what I'd like to talk about.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Controller-side Performance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some time ago I began refactoring Ansible's
&lt;a href=&quot;https://docs.ansible.com/ansible/2.5/user_guide/playbooks_strategies.html&quot;&gt;linear&lt;/a&gt;
strategy, aiming to get it to where controller-side enhancements might exist
without adding more spaghetti, while becoming familiar with requirements for
later features. To recap, the strategy plugin is responsible for almost every
post-parsing task, including worker management. It is in many ways the beating
heart at the core of every Ansible run.&lt;/p&gt;
&lt;p&gt;After some months and one particularly enlightening conversation that work was
resumed, eventually subsuming all of the remaining strategy support and result
processing code, forming one huge refactor of a big chunk of upstream that has
been gathering dust for almost a month.&lt;/p&gt;
&lt;p&gt;The result exists today and is truly wonderful. It integrates Mitogen into the
heart of Ansible without baking it in, introduces a carefully designed process
model with strong persistence properties, eliminating most bottlenecks endured
by the extension and vanilla Ansible, and provides an architectural basis for
the next planned iteration of scalability work, Windows compatibility, some
features mentioned, and quite a few that have been kept quiet.&lt;/p&gt;
&lt;p&gt;With the new strategy it is possible to almost perfectly saturate an 8 vCPU
machine given 100 targets, with minimal loss of speedup compared to
single-target. Regarding single target, simple loops against localhost are up
to 4x faster than the current stable extension.&lt;/p&gt;
&lt;p&gt;While there are at least 2 obvious additional enhancements possible with this
work, development reached a natural break in order to allow stablizing one
piece of the puzzle at a time. Once this is done, it is clear exactly where to
pick things up next.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deep Cuts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;162&quot; height=&quot;405&quot; src=&quot;https://sweetness.hmmz.org/images/ansible-stack.svg&quot; align=&quot;right&quot; /&gt;&lt;/p&gt;
&lt;p&gt;There's just a small hitch: this work goes deep, entailing changes that, while
so far would be possible as monkey-patches, are highly version-specific, and
unlikely to remain monkey-patchable as the branch receives real-world usage.
There must be a mechanism to ship unknown future patches to upstream code.&lt;/p&gt;
&lt;p&gt;It was hoped it could land after Ansible 2.7, benefitting from related changes
planned upstream, but they appear to have been delayed or abandoned, and so a
situation exists where improvements cannot be shipped for at least another 4-6
months, assuming the related changes finally arrived in Ansible 2.8.&lt;/p&gt;
&lt;p&gt;To the right is a rough approximation of components involved in executing a
playbook. Those modified or replaced by the stable extension are green, yellow
are replaced by the branch-in-waiting. Finally in orange are components
affected by planned features and optimizations.&lt;/p&gt;
&lt;p&gt;Although there are tens of thousands of lines of surrounding code, as should
hopefully be clear, the number of untouched major components involved in a run
has been dwindling fast. Put simply, the existing mechanism for delivering
improvements is reaching its limit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The F Word&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Any seasoned developer, especially those familiar with the size of the Ansible
code base, will hopefully understand the predicament. There is no problem
delivering improvements today, assuming an unsupported one-off code dump was
all anyone wanted, but that is never the case.&lt;/p&gt;
&lt;p&gt;The problem lies in entering an unsustainable permanent marriage with a large
project, not forgetting this outcome was an explicit non-goal from the start.
Simultaneously over the months significant trust has been garnered to deliver
these kinds of improvements, and abandoning one of the best yet would seem
foolish.&lt;/p&gt;
&lt;p&gt;Something of a many-variabled optimization process has recently come to an end,
and I've found a solution that I am comfortable with. While making a release
needs more time and may still not be definite, it seemed worth documenting at
least some of the reasoning behind it before it comes.&lt;/p&gt;
&lt;p&gt;Even though this outcome was undesirable, and although the solution in mind is
not without restraint, it is still a cloud with many silver linings. For
instance, new user configuration steps can be reduced to almost zero, core
features can be added with minimal friction, and creative limitations are
significantly uncapped.&lt;/p&gt;
&lt;p&gt;The key question was how to sustain continued work on a solution that has clear
value to a real problem that plagued upstream since conception. The answer it
turns out, is obvious: the scalability fixes due for release primarily benefit
one type of user.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What about upstream?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Beyond debating strawmen and lines of code, no actionable outcome has ever
materialized, not after carefully worded chain rattling, and not even in the
form of a bug report. If it had, it was always going to at best be a compromise
with an organization that has &lt;a href=&quot;https://www.nexedi.com/blog-Improve.the.performance.of.Ansible&quot;&gt;delivered consistently worsening performance
every major
release&lt;/a&gt; for
the past two and a half years, and it is the principal reason crowdfunding the
extension was the only viable method to deliver real improvements.&lt;/p&gt;
&lt;p&gt;The cold reality is that the upstream trend is not a good one: this problem has
existed forever and it is gradually getting worse over time. My best estimate
is that some veterans dislike the solution, perhaps some of those around since
2012 when Michael DeHaan, the project founder, first attempted a &lt;a href=&quot;https://groups.google.com/forum/#!msg/ansible-project/FRKMlsLQpNM/T0X0kQWYckIJ&quot;&gt;connection
method uncannily similar to today's
design&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In any case they have an e-mail address, an existing thread to hit Reply to,
and at least two invitations to a telephone call. A conversation requires
interest and initiative, and above all else it requires two parties.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What About The Extension?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The planned structure keeps the extension front-and-centre, so regardless of
outcome it will continue to receive the majority of feature work and
maintenance. It is definitely not going away.&lt;/p&gt;
&lt;p&gt;With a third stable release looming, it's probably high time for a quick
update. Many bugs were squashed since July, with stable work recently centered
around problems with Ansible 2.6. This involved some changes to temporary file
handling, and in the process, discovery of a huge missed optimization.&lt;/p&gt;
&lt;p&gt;v0.2.3 will need only 2 roundtrips for each
&lt;a href=&quot;https://docs.ansible.com/ansible/latest/modules/copy_module.html&quot;&gt;copy&lt;/a&gt; and
&lt;a href=&quot;https://docs.ansible.com/ansible/latest/modules/template_module.html&quot;&gt;template&lt;/a&gt;,
or in terms of a 250ms transcontinental link, 10 seconds to copy 20 files vs.
30 seconds previously, or 2 minutes compared to vanilla's best configuration.
This work is delayed somewhat as a new RPC chaining mechanism is added to
better support all similar future changes, and identical situations likely to
appear in similar tools.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Just tuning in?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2017-09-15: &lt;a target=&quot;_blank&quot; href=&quot;https://sweetness.hmmz.org/2017-09-15-mitogen-an-infrastructure-code-baseline-that.html&quot;&gt;Mitogen, an infrastructure code baseline that sucks less&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2018-03-06: &lt;a target=&quot;_blank&quot; href=&quot;https://sweetness.hmmz.org/2018-03-06-quadrupling-ansible-performance-with-mitogen.html&quot;&gt;Quadrupling Ansible performance with Mitogen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2018-03-28: &lt;a target=&quot;_blank&quot; href=&quot;https://sweetness.hmmz.org/2018-03-28-crowdfunding-mitogen-day-23.html&quot;&gt;Crowdfunding Mitogen: day 23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2018-04-20: &lt;a target=&quot;_blank&quot; href=&quot;https://sweetness.hmmz.org/2018-04-20-crowfunding-mitogen-day-46.html&quot;&gt;Crowdfunding Mitogen: day 46&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2018-05-23: &lt;a target=&quot;_blank&quot; href=&quot;https://sweetness.hmmz.org/2018-05-23-mitogen-for-ansible-status-23-may.html&quot;&gt;Mitogen for Ansible status, 23 May&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2018-07-10: &lt;a target=&quot;_blank&quot; href=&quot;https://sweetness.hmmz.org/2018-07-10-mitogen-released.html&quot;&gt;Mitogen released!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Until next time!
&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-27T01:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.petecorey.com/blog/2018/08/27/computing-fingering-distance-with-dr-levenshtein/">
	<title>Pete Corey (petecorey): Computing Fingering Distance with Dr. Levenshtein</title>
	<link>http://www.petecorey.com/blog/2018/08/27/computing-fingering-distance-with-dr-levenshtein/</link>
	<content:encoded>&lt;p&gt;Jumping off after our previous two articles on &lt;a href=&quot;http://www.petecorey.com/blog/2018/07/30/voice-leading-with-elixir/&quot;&gt;Voice Leading with Elixir&lt;/a&gt;, and &lt;a href=&quot;http://www.petecorey.com/blog/2018/08/13/algorithmically-fingering-guitar-chords-with-elixir/&quot;&gt;Algorithmically Fingering Guitar Chords with Elixir&lt;/a&gt;, we’re left with a series of chord voicings ranked according to how well they voice lead from our starting chord, and the set of all possible fingerings for each of these voicings.&lt;/p&gt;

&lt;p&gt;Given that our starting chord has a known fingering, which fingering of each of these “best” voicings is the “easiest” to play after our starting chord?&lt;/p&gt;

&lt;p&gt;This is an interesting question, and gives us the opportunity to flex our algorithmic muscles again. This time we’ll be basing our solution on a modified version of &lt;a href=&quot;https://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;the Levenshtein distance algorithm&lt;/a&gt; for finding the “edit distance” between two strings.&lt;/p&gt;

&lt;h2 id=&quot;what-is-fingering-distance&quot;&gt;What is “Fingering Distance”?&lt;/h2&gt;

&lt;p&gt;The term “fingering distance” is my way of referring to how difficult it is to transition from playing one chord on the guitar to another. For example, going from playing a Dm chord on the middle four strings to an Em chord is easy. We just have to slide the shape up two frets.&lt;/p&gt;

&lt;p&gt;However, starting on that same Dm chord and playing an Em chord on the top four strings is a more difficult transition. We need to change positions on the fretboard, and every finger in the chord needs to be moved.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The family of &lt;a href=&quot;https://en.wikipedia.org/wiki/Edit_distance&quot;&gt;“edit distance” algorithms&lt;/a&gt; tackles a similar problem. How difficult is it to transform one string into another, given a set of operations with fixed costs?&lt;/p&gt;

&lt;p&gt;The Levenshtein distance algorithm is an example of an “edit distance” algorithm with three operations: insertion, deletion, and substitution. The Levenshtein distance between &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;kitten&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;sitting&lt;/span&gt;&lt;/code&gt; is &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;/code&gt;, where the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;/code&gt; is substituted for an &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;/code&gt;, and &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;/code&gt; is substituted for &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;/code&gt;, and the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;/code&gt; is inserted at the end of the word.&lt;/p&gt;

&lt;p&gt;In the classic Levenshtein distance algorithm each of the three basic operations has a unit cost (a cost of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt;). &lt;a href=&quot;https://twitter.com/eugico/status/1029129770271993857&quot;&gt;This doesn’t always have to be the case&lt;/a&gt;. We can modify the algorithm to use our own set of operations, like “place finger”, “lift finger”, “move finger”, and “slide finger” to model how we transition from one chord to another. These operations might have a variable weight, depending on the operation and how far each finger has to move:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Placing and lifting a finger both seem similarly difficult. Let’s give both of these operations a constant unit cost.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Moving from the fifth fret, fifth string to the fifth fret, fourth string seems fairly simple, but moving from the fifth fret, fifth string to the second fret, third string would be more difficult. We’ll give the “move finger” operation a weight dependent on the distance we have to move.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sliding a finger up or down a string seems to be special sub-case of the “move finger” operation. I would argue that sliding a finger from any fret to any other fret on a string is roughly the same difficult. We’ll give the “slide finger” operation a constant unit cost.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s use this as a jumping off point for building our “fingering distance” calculator.&lt;/p&gt;

&lt;h2 id=&quot;calculating-fingering-distance&quot;&gt;Calculating Fingering Distance&lt;/h2&gt;

&lt;p&gt;Let’s start by defining a new module that will hold our new &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; function:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defmodule Chord.Distance.Fingering do
  def distance(chord, chord),
    do: 0
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously, if we pass in two identical chords, the distance between them is &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A more interesting case occurs when we’re comparing a chord with one or more notes to an empty list. The total distance between these two “chords” is our “place finger” cost applied to each of the remaining notes in our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def distance(chord, []),
  do:
    chord
    |&amp;gt; Enum.reject(&amp;amp;(&amp;amp;1 == nil))
    |&amp;gt; length
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll need to handle the inverse case as well:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def distance([], chord),
  do:
    chord
    |&amp;gt; Enum.reject(&amp;amp;(&amp;amp;1 == nil))
    |&amp;gt; length
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The real meat of the algorithm comes into play when it’s time to determine the distance between two non-empty chords:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def distance([note_a | rest_a] = chord_a, [note_b | rest_b] = chord_b),
  do:
    Enum.min([
      distance(rest_a, chord_b) + 1,
      distance(chord_a, rest_b) + 1,
      distance(rest_a, rest_b) + note_distance(note_a, note_b)
    ])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; function is recursive. At every level of recursion, we calculate the distance required to transform &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord_a&lt;/span&gt;&lt;/code&gt; into &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord_b&lt;/span&gt;&lt;/code&gt; by first:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lifting a finger from &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord_a&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Lifting a finger from &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord_b&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Moving &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;note_a&lt;/span&gt;&lt;/code&gt; to &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;note_b&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The initial choice with the lowest final cost is the choice we pick. Our decision ripples up through our stack until we’re left with the final, minimal cost of transitioning from &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord_a&lt;/span&gt;&lt;/code&gt; to &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord_b&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thank you, &lt;a href=&quot;https://en.wikipedia.org/wiki/Vladimir_Levenshtein&quot;&gt;Dr. Levenshtein&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;calculating-note-distance&quot;&gt;Calculating Note Distance&lt;/h2&gt;

&lt;p&gt;As we’ve seen, both placing and lifting a finger have constant unit costs. The real magic of our fingering distance algorithm happens in the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;note_distance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; helper function, where we calculating the cost of moving fingers between frets ands strings.&lt;/p&gt;

&lt;div class=&quot;post-footer&quot;&gt;
    &lt;div class=&quot;signup-form&quot;&gt;
        &lt;form action=&quot;http://east5th.us11.list-manage.com/subscribe/post?u=f8833fd40e2b1b28545d9f382&amp;id=c56ceba687&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; target=&quot;_blank&quot;&gt;
            &lt;p&gt;Sign up for &lt;a href=&quot;http://www.petecorey.com/newsletter&quot;&gt;Pete's mailing list&lt;/a&gt; and have fresh content delivered to you, hot off the presses every week!&lt;/p&gt;
            &lt;div class=&quot;email-wrapper&quot;&gt;
                &lt;input type=&quot;text&quot; value=&quot;&quot; name=&quot;FNAME&quot; class=&quot;&quot; id=&quot;mce-FNAME&quot; /&gt;&lt;!--
                                                                                                           --&gt;&lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; id=&quot;mce-EMAIL&quot; /&gt;&lt;!--
                                                                                                                                                                                                    --&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; /&gt;
            &lt;/div&gt;
            &lt;div&gt;&lt;input type=&quot;text&quot; name=&quot;b_f8833fd40e2b1b28545d9f382_c56ceba687&quot; tabindex=&quot;-1&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We’ll start with some trivial base cases. If the two notes we’re comparing are the same, the distance between them is &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def note_distance(note, note),
  do: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the first “note” is &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;, we’re actually being asked for the cost of placing a finger:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def note_distance(nil, _),
  do: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, if the second “note” is &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;, we’re being asked how much it costs to lift a finger:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def note_distance(_, nil),
  do: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now things are getting interesting. If we’re asked for the distance between two notes that live on the same string, we’ll report back the unit cost, as we discussed earlier:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def note_distance({_, _, string}, {_, _, string}),
  do: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, if the two notes live on different strings, we’ll treat out guitar’s fretboard like a grid, or city block, and return the &lt;a href=&quot;https://en.wikipedia.org/wiki/Taxicab_geometry&quot;&gt;“manhattan distance”&lt;/a&gt; between the two notes:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def note_distance({fret_a, _, string_a}, {fret_b, _, string_b}),
  do: abs(fret_a - fret_b) + abs(string_a - string_b)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s really all there is to it.&lt;/p&gt;

&lt;h2 id=&quot;a-few-examples&quot;&gt;A Few Examples&lt;/h2&gt;

&lt;p&gt;Going back to our previous examples, going from our Dm on the middle four string set to an Em on the same string should have a cost of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;/code&gt;. We’re just sliding each finger up two frets:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
Chord.Distance.Fingering.distance(
  [nil, {5, 1}, {7, 3}, {7, 4}, {6, 2}, nil],
  [nil, {7, 1}, {9, 3}, {9, 4}, {8, 2}, nil]
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we do get &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;The cost of transitioning from that same Dm chord to an Em on the upper four string set should be higher than &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
Chord.Distance.Fingering.distance(
  [nil, {5, 1}, {7, 3}, {7, 4}, {6, 2}, nil],
  [nil, nil, {2, 1}, {4, 3}, {5, 4}, {3, 2}]
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it is! We get a distance of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-next-best-chord&quot;&gt;The Next Best Chord&lt;/h2&gt;

&lt;p&gt;And now for the grand finale. Let’s say we want to find the set of Cmaj7 voicings that have the best voice leading between our starting G7 chord. This is old hat from our previous articles:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
[0, 4, 7, 11]
|&amp;gt; Chord.voicings(4)
|&amp;gt; Enum.map(&amp;amp;{Chord.Distance.Semitone.distance(&amp;amp;1, [nil, 10, 12, 10, 12, nil]), &amp;amp;1})
|&amp;gt; Enum.uniq()
|&amp;gt; Enum.sort()
|&amp;gt; Enum.chunk_by(&amp;amp;elem(&amp;amp;1, 0))
|&amp;gt; List.first()
|&amp;gt; Enum.map(&amp;amp;elem(&amp;amp;1, 1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But now let’s take each of those voicings and find the best fingering for each with regards to how we’re fingering our G7 chord:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.map(fn chord -&amp;gt;
  chord
  |&amp;gt; Chord.fingerings()
  |&amp;gt; Enum.uniq()
  |&amp;gt; Enum.map(
    &amp;amp;{Chord.Distance.Fingering.distance(&amp;amp;1, [nil, {10, 1}, {12, 3}, {10, 1}, {12, 4}, nil]), &amp;amp;1}
  )
  |&amp;gt; Enum.sort()
  |&amp;gt; Enum.map(&amp;amp;elem(&amp;amp;1, 1))
  |&amp;gt; List.first()
end)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we’ll take each fingered chord and render it to the console:&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/computing-fingering-distance-with-dr-levenshtein/1.png&quot; /&gt;
  &lt;p&gt;Our final chords.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Awesome!&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;If you can’t tell, I’m in love with this project. I’ve been playing with it quite a bit in my free time, and I’ve managed to coax it into generating entire progressions for me that sound and play beautifully.&lt;/p&gt;

&lt;p&gt;If you’re interested in seeing me put more work into this, and potentially develop it into a fully-functional web application, &lt;a href=&quot;https://twitter.com/petecorey&quot;&gt;let me know on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to check out the full source code, be sure to check out &lt;a href=&quot;https://github.com/pcorey/chord/&quot;&gt;the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Chord&lt;/span&gt;&lt;/code&gt; project on Github&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-27T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://theta.eu.org/2018/08/27/data-retention.html">
	<title>eta (eta): Data retention</title>
	<link>https://theta.eu.org/2018/08/27/data-retention.html</link>
	<content:encoded>&lt;p&gt;I don’t use any social media (apart from &lt;a href=&quot;https://joinmastodon.org/&quot;&gt;Mastodon&lt;/a&gt;, which I briefly flirted with for a while earlier
this year before letting the accounts I’d made fall into disuse). I have many reasons, and the arguments against social media have been
&lt;a href=&quot;https://www.theguardian.com/media/2018/jan/23/never-get-high-on-your-own-supply-why-social-media-bosses-dont-use-social-media&quot;&gt;done&lt;/a&gt;
&lt;a href=&quot;http://en.arguman.org/social-media-are-an-overall-benefit-to-society&quot;&gt;to&lt;/a&gt;
&lt;a href=&quot;http://www.bbc.com/future/story/20180104-is-social-media-bad-for-you-the-evidence-and-the-unknowns&quot;&gt;death&lt;/a&gt;,
so I won’t bother restating them here - apart from one. I think it’s important to consider the effect social media - and other technologies! -
have on the amount of data we produce, and whether or not having all of this data around is a good thing.&lt;/p&gt;

&lt;p&gt;If you do use social media, you likely produce quite a bit of data about yourself on a semi-regular basis. If you’re really eager, your profiles
may be an hourly blow-by-blow of your feelings, thoughts, and experiences; if you aren’t, your profile may be a little more relaxed and pensive.
The social media companies care about this data - after all, that’s why they’re giving you the social media service for free - but do you?
For most people, I’d wager that the utility of the data on their social media profile probably decreases as time goes on - what you thought
about your lunch today or yesterday may be interesting, especially if people are still replying to it, but you likely have zero interest
in what you had for lunch 50 days ago. Indeed, on today’s modern platforms, you’d probably have to do a fair amount of clicking through pages
of data in order to access the stuff you posted 50 years ago (again, this varies with posting frequency), so you likely don’t worry about it.
Nobody looks at that stuff, right?&lt;/p&gt;

&lt;p&gt;Well, not quite right. Search engines, for example, are notorious for crawling through every word you’ve ever posted online and making it easily
accessible. Advertising and analytics companies analyse your posts, looking for clues that you might be interested in their brand new product
in order to serve you more relevant ads. Facebook itself occasionally sends you reminders about what you did a long time ago, in the interest
of injecting ‘blasts from the past’ into your timeline to make it somewhat more interesting.&lt;/p&gt;

&lt;p&gt;The thing is, though, my original statement was partially right. No &lt;em&gt;human&lt;/em&gt; looks at that stuff - this kind of data-trawling is a pretty new
activity that people have never really bothered or managed to do. If you weren’t someone who should have a place in the history books, most
minutiae about your life would be very quickly forgotten and lost, irreversibly, in the sands of time. After all,
nobody has a memory good enough to remember what you said two years ago today,
much less any caring for what happened then. As humans, we naturally forget about things that aren’t relevant - it’s part of keeping us sane,
after all. As the learning process of &lt;a href=&quot;https://www.gwern.net/Spaced-repetition&quot;&gt;spaced repetition&lt;/a&gt; tries to combat, memory retention has a
natural &lt;a href=&quot;https://en.wikipedia.org/wiki/Forgetting_curve&quot;&gt;‘forgetting curve’&lt;/a&gt; that prioritizes information we see more frequently, or information
that is relevant to us, whilst trashing the rest.&lt;/p&gt;

&lt;p&gt;And, of course, sometimes things that might seem irrelevant to you might be stupendously relevant to someone else. If you manage to annoy someone
on the internet, they now have an unprecedented corpus of information with which to effect your downfall; there’s usually something you posted on
social media once in your life that you probably wouldn’t want to widely publicize, yet it’s now possible for angry blackmail-searchers to do just
that. This works excellently in conjunction with how hard it is to unambiguously convey tone on the internet - as
inimitable Rust contributor &lt;em&gt;brson&lt;/em&gt; exemplifies in &lt;a href=&quot;https://brson.github.io/2017/04/05/minimally-nice-maintainer&quot;&gt;The Minimally-Nice Open Source Software Maintainer&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s well understood that conveying tone on the internet is hard:&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;“Thanks.”&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;What does that period mean? It looks so gruff. Are they pissed at me?! Are they having a bad day? On the internet the simple period can appear
sarcastic, or angry. It’s so neutral that people will project whatever emotions they want on it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or you could take &lt;a href=&quot;http://theoatmeal.com/pl/minor_differences/smiley&quot;&gt;this example&lt;/a&gt; from The Oatmeal, demonstrating how simple punctuation can
vastly change meaning:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://theta.eu.org/assets/img/with_smiley.jpg&quot; alt=&quot;The Oatmeal comic&quot; /&gt;
&lt;img src=&quot;https://theta.eu.org/assets/img/without_smiley.jpg&quot; alt=&quot;The Oatmeal comic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A more fundamental reason to worry about your data is the fact that your data is &lt;em&gt;yours&lt;/em&gt;; it’s your property, so you should be able to do what
you like with it. If your social media posts were handwritten letters, how would you organize them? Would you throw them all in the bin
after a while, or would you keep the ones you liked and bin the rest? If a bunch of your letters were kept in a box in your friend Twitter’s house,
would you go and get them eventually? How long would you leave your stuff there? We don’t tend to treat digital data in this way - but sorting through
your digital life should probably occupy as much time as sorting through things in your physical life. If you’re the sort of person who bins
everything after they’re done with it, why not do that online as well? On the flipside, if you &lt;em&gt;do&lt;/em&gt; like keeping mementos of the past for your
future self, why not spend some time doing that same curation process with your digital things?&lt;/p&gt;

&lt;p&gt;I’ll leave you with some words from &lt;a href=&quot;https://alexschroeder.ch/wiki/2017-04-27_Record_Keeping&quot;&gt;this very similar blog post by Alex Schroeder&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[…] We are built to forget the information that is not relevant. Forgetting is important.&lt;/p&gt;

  &lt;p&gt;The alternative, the thing that we’re building right now, the default future if you will, is the exact opposite.
We’re building a panopticon where the rich and powerful can keep watch on us, where surveillance capitalism reaps the fruit of our data
and we can’t trust a single website. […]&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded>
	<dc:date>2018-08-26T23:00:00+00:00</dc:date>
</item>
<item rdf:about="http://amontalenti.com/?p=2253">
	<title>Andrew Montalenti (amontalenti): Expanding my mind, once more, with functional programming</title>
	<link>https://amontalenti.com/2018/08/26/sicp-expanding</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;The Structure and Interpretation of Computer Programs&lt;/em&gt; (SICP) is a classic computer science text written by Gerald Jay Sussman and Hal Abelson. It is widely known in the computer science community as the &amp;#8220;wizard book&amp;#8221;. It intends to teach the foundations of computer programming from &amp;#8220;first principles&amp;#8221;, illustrating programming language design using &lt;a href=&quot;https://en.wikipedia.org/wiki/Scheme_(programming_language)&quot;&gt;Scheme&lt;/a&gt;, a dialect of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Lisp_(programming_language)&quot;&gt;Lisp&lt;/a&gt; language.&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://amontalenti.com/wordpress/wp-content/uploads/2018/08/sicp_book.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;194&quot; class=&quot;aligncenter size-full wp-image-2257&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;In this context, from Aug 26 &amp;#8211; 31 2018, I am taking a &lt;a href=&quot;https://hackernoon.com/taking-a-think-week-end-462fa4bb401e&quot;&gt;&amp;#8220;think week&amp;#8221;&lt;/a&gt; to reflect on my relationship to computer programming.&lt;/p&gt;
&lt;p&gt;I am spending this week &lt;a href=&quot;https://dabeaz.com/sicp.html&quot;&gt;in Chicago with David Beazley&lt;/a&gt; (&lt;a href=&quot;https://twitter.com/dabeaz&quot;&gt;@dabeaz&lt;/a&gt;), where we will be spelunking through the land of this famed SICP textbook via &lt;a href=&quot;https://racket-lang.org/&quot;&gt;Racket&lt;/a&gt;, a modern functional programming environment one can use to program in &amp;#8212; and even extend &amp;#8212; Scheme and many other languages.&lt;/p&gt;
&lt;p&gt;The course will also (of course) involve some Python. This will be a fun follow-up to an earlier course I took with Beazley in 2011, &lt;a href=&quot;https://www.dabeaz.com/compiler.html&quot;&gt;&amp;#8220;Write a Compiler (in Python)&amp;#8221;&lt;/a&gt;. I can&amp;#8217;t believe I wrote the &lt;a href=&quot;https://github.com/amontalenti/compiler&quot;&gt;code for that course&lt;/a&gt; over 7 years ago.&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://amontalenti.com/wordpress/wp-content/uploads/2018/08/compilers.jpg&quot; alt=&quot;&quot; width=&quot;480&quot; height=&quot;360&quot; class=&quot;aligncenter size-full wp-image-2259&quot; /&gt;&lt;br /&gt;
&lt;small&gt;Back in 2011, I took &amp;#8220;Write a Compiler (in Python)&amp;#8221; with David Beazley. A handful of long-time professional programmers and Pythonistas, locked in a room together for 5 days, hacking away on a Python compiler for a Go-like language. It was so much fun. It proved to me that I loved programming! I&amp;#8217;m the one whose head is exploding on the left.&lt;/small&gt;
&lt;/div&gt;
&lt;h2&gt;How I&amp;#8217;m thinking about this course&lt;/h2&gt;
&lt;p&gt;I have long identified primarily as a computer programmer. I studied Computer Science at NYU, and I currently read about programming languages, paradigms, and design patterns all the time. I have read way more technical programming books than any other category or genre of book.&lt;/p&gt;
&lt;p&gt;But, I&amp;#8217;m also someone who is interested in the business of software, and leadership of software teams, in a sort of secondary way to my love of software itself. Business books &amp;#8212; and particularly books about high-growth startups and their teams &amp;#8212; make up my other big obsession. But, in the last several months, I&amp;#8217;ve seen my relationship with software change in a number of ways.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-2253&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;First, as of April 2017, I have not written any &amp;#8220;production&amp;#8221; code for &lt;a href=&quot;https://parse.ly&quot;&gt;Parse.ly&lt;/a&gt; systems. Last year, I wrote some code for an important production system (in C, no less!) right before starting the process for &lt;a href=&quot;https://blog.parse.ly/post/6282/why-we-said-no-vc-money/&quot;&gt;Parse.ly&amp;#8217;s Series B financing round&lt;/a&gt;. That round closed in August-September 2017. Once that was done, I spent the next several months running a hiring process for Parse.ly&amp;#8217;s team, as well as kicking off several projects to extend our core products and to launch a brand new one.&lt;/p&gt;
&lt;p&gt;All of these product initiatives had their major code and engineering contributions by the amazing Parse.ly product team, but I pulled myself completely out of all coding projects to focus exclusively on recruiting/hiring, mentorship, and product management.&lt;/p&gt;
&lt;p&gt;This was the right move from the standpoint of Andy Grove&amp;#8217;s concept of &lt;a href=&quot;https://amzn.to/2BPhvPM&quot;&gt;High Output Management&lt;/a&gt;, that is, I was applying the concept of &lt;a href=&quot;https://medium.com/@iantien/top-takeaways-from-andy-grove-s-high-output-management-2e0ecfb1ea63&quot;&gt;&amp;#8220;managerial leverage&amp;#8221;&lt;/a&gt;. With a team of 12 backend engineers, 5 frontend engineers, 5 support engineers, and several designers, I could do much more as a &amp;#8220;force multiplier&amp;#8221;, and even as a &amp;#8220;project clarifier&amp;#8221;, than I could do writing any single line of code.&lt;/p&gt;
&lt;p&gt;But this transition was a struggle for me, personally. After all: it was the first time in ~15 years where my work no longer included directly writing and shipping code that makes products work. In other words, I was no longer in the &lt;a href=&quot;https://amzn.to/2Nkv7np&quot;&gt;practice of programming&lt;/a&gt;. And, to reference Paul Graham, I had shifted &lt;a href=&quot;http://www.paulgraham.com/makersschedule.html&quot;&gt;from a maker&amp;#8217;s schedule to a manager&amp;#8217;s one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, how does this all relate to functional programming, SICP, and my &amp;#8220;think week&amp;#8221;?&lt;/p&gt;
&lt;h2&gt;Making coding a hobby again&lt;/h2&gt;
&lt;p&gt;Well, I&amp;#8217;m going to spend next week figuring out whether coding should continue to be my hobby.&lt;/p&gt;
&lt;p&gt;It started as my hobby, and became my profession, and it&amp;#8217;s now the technology lifeblood oozing through the company on which I spend my mental energy every day. But that company needs me much more as a technical leader and manager than it does need me as a coder.&lt;/p&gt;
&lt;p&gt;I suspect coding &lt;em&gt;should&lt;/em&gt; remain my hobby. And that I should write more (in English, and in code).&lt;/p&gt;
&lt;p&gt;I suspect, &lt;a href=&quot;http://amontalenti.com/2014/11/02/clojonic&quot;&gt;similar to my explorations with Clojure a few years ago&lt;/a&gt;, by looking at different ways of programming, it can help refresh my brain, but also help me re-establish my &amp;#8220;hobbyist&amp;#8221; relationship with programmer tasks.&lt;/p&gt;
&lt;p&gt;It may not (ever again!) be wise for me to insert myself into complex and time-sensitive production coding projects at Parse.ly, but it may still make total sense for me to treat coding as one of my important &amp;#8220;satisfying thought-work&amp;#8221; activities, alongside writing and reading, which are the other two big ones for me.&lt;/p&gt;
&lt;p&gt;If coding remains my hobby, I can establish a healthy relationship with it as a hobby. And that would be good for me and my own identity. Then I can shift my mind toward applying my coder brain toward challenges that truly change the way I think about automation and problems. Perhaps it can also change how I think about design of systems and of code.&lt;/p&gt;
&lt;p&gt;Programming should be fun. It was when I started, and I still miss it. I&amp;#8217;m hoping Beazley&amp;#8217;s course is a little kick in the butt that I can make time for it as a hobby, once more.&lt;/p&gt;
&lt;p&gt;This year, I began my professional transition to, &amp;#8220;I am primarily a recruiter and leader of technical teams that operate on the &lt;a href=&quot;https://amontalenti.com/2012/05/14/distributed-teams&quot;&gt;fully distributed model&lt;/a&gt; and that ship high-growth products with a huge business or societal impact.&amp;#8221; But I still want to be &lt;em&gt;extremely&lt;/em&gt; close to code &amp;#8212; now, and for the rest of my life. I can focus on technical leadership at Parse.ly with little guilt &amp;#8212; to know I have not thrown out my passion, and the thing that gives me my edge.&lt;/p&gt;
&lt;p&gt;About 15 years ago, the open source community introduced me to Python, and it changed my life as a programmer forever. But, about 10 years ago, a sage programmer I deeply respected handed me the book &lt;a href=&quot;https://amzn.to/2weksUQ&quot;&gt;&amp;#8220;The Anatomy of Lisp&amp;#8221;&lt;/a&gt;, and said that if I could read and understand &lt;em&gt;that&lt;/em&gt; book, then I will have truly combined my computer science education with my practical programming experience, and be forever bettered for it. I tried to crack that book open over the years, but I never had the functional programming fundamentals to make it very far. Here&amp;#8217;s to hoping that a guided path from Python to Racket to Scheme to SICP gets me one step closer to enlightenment.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-26T22:31:52+00:00</dc:date>
</item>
<item rdf:about="https://www.ponylang.org/blog/2018/08/last-week-in-pony---august-26-2018/">
	<title>Ponylang (SeanTAllen): Last Week in Pony - August 26, 2018</title>
	<link>https://www.ponylang.org/blog/2018/08/last-week-in-pony---august-26-2018/</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Last Week In Pony&lt;/em&gt; is a weekly blog post to catch you up on the latest news for the Pony programming language. To learn more about Pony check out &lt;a href=&quot;https://www.ponylang.org/blog/ponylang.org&quot;&gt;our website&lt;/a&gt;, our Twitter account &lt;a href=&quot;https://twitter.com/ponylang&quot;&gt;@ponylang&lt;/a&gt;, our &lt;a href=&quot;https://pony.groups.io/g/user&quot;&gt;users&amp;rsquo; mailing list&lt;/a&gt; or join us &lt;a href=&quot;https://webchat.freenode.net/?channels=%23ponylang&quot;&gt;on IRC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Got something you think should be featured? There&amp;rsquo;s a GitHub issue for that! Add a comment to the &lt;a href=&quot;https://github.com/ponylang/ponylang.github.io/issues?q=is%3Aissue+is%3Aopen+label%3Alast-week-in-pony&quot;&gt;open &amp;ldquo;Last Week in Pony&amp;rdquo; issue&lt;/a&gt;.
&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-26T17:46:31+00:00</dc:date>
</item>
<item rdf:about="http://shape-of-code.coding-guidelines.com/?p=3867">
	<title>Derek Jones (derek-jones): Experimental Psychology by Robert S. Woodworth</title>
	<link>http://shape-of-code.coding-guidelines.com/2018/08/26/experimental-psychology-by-robert-s-woodworth/</link>
	<content:encoded>&lt;p&gt;I have just discovered &amp;#8220;Experimental Psychology&amp;#8221; by &lt;a href=&quot;https://en.wikipedia.org/wiki/Robert_S._Woodworth&quot;&gt;Robert S. Woodworth&lt;/a&gt;; first published in 1938, I have a reprinted in Great Britain copy from 1951.  The Internet Archive has a copy of the &lt;a href=&quot;https://archive.org/details/in.ernet.dli.2015.125563&quot;&gt;1954 revised edition&lt;/a&gt;; it&amp;#8217;s a very useful pdf, but it does not have the atmospheric musty smell of an old book.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://archive.org/search.php?query=%28woodworth%29%20AND%20title%3A%28Archives%20of%20Psychology%29&quot;&gt;Archives of Psychology&lt;/a&gt; was edited by Woodworth and contain reports of what look like ground breaking studies done in the 1930s.&lt;/p&gt;
&lt;p&gt;The book is surprisingly modern, in that the topics covered are all of active interest today, in fields related to &lt;a href=&quot;https://en.wikipedia.org/wiki/Cognitive_psychology&quot;&gt;cognitive psychology&lt;/a&gt;.  There are lots of experimental results (which always biases me towards really liking a book) and the coverage is extensive.&lt;/p&gt;
&lt;p&gt;The history of cognitive psychology, as I understood it until this week, was early researchers asking questions, doing &lt;a href=&quot;https://en.wikipedia.org/wiki/Introspection&quot;&gt;introspection&lt;/a&gt; and sometimes running experiments in the late 1800s and early 1900s (e.g., &lt;a href=&quot;https://en.wikipedia.org/wiki/Wilhelm_Wundt&quot;&gt;Wundt&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Hermann_Ebbinghaus&quot;&gt;Ebbinghaus&lt;/a&gt;), &lt;a href=&quot;https://en.wikipedia.org/wiki/Behaviorism&quot;&gt;behaviorism&lt;/a&gt; dominants the field, behaviorism is &lt;a href=&quot;https://chomsky.info/1967____/&quot;&gt;eviscerated by Chomsky&lt;/a&gt; in the 1960s and cognitive psychology as we know it today takes off.&lt;/p&gt;
&lt;p&gt;Now I know that lots of interesting and relevant experiments were being done in the 1920s and 1930s.&lt;/p&gt;
&lt;p&gt;What is missing from this book?  The most obvious omission is equations; lots of data points plotted on graph paper, but no attempt to fit an equation to anything, e.g., an exponential curve to the rate of learning.&lt;/p&gt;
&lt;p&gt;A more subtle omission is the world view; digital computers had not been invented yet and Shannon&amp;#8217;s information theory was almost 20 years in the future.  Researchers tend to be heavily influenced by the tools they use and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Zeitgeist&quot;&gt;zeitgeist&lt;/a&gt;.  Computers as calculators and information processors could not be used as the basis for models of the human mind; they had not been invented yet.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-26T17:24:07+00:00</dc:date>
</item>
<item rdf:about="tag:gerikson.com,2018:/books/read/Plays-With-Cars">
	<title>Gustaf Erikson (gerikson): Plays with Cars by Doug DeMuro</title>
	<link>http://gerikson.com/blog/books/read/Plays-With-Cars.html</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCsqjHFMB_JYTaEnf_vmTNqg&quot;&gt;DeMuro&lt;/a&gt; is a prolific car reviewer on YouTube. This is a breezy read with some amusing anecdotes. I&amp;#8217;m currently in a car-interest phase so I enjoyed it.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-25T19:58:00+00:00</dc:date>
	<dc:creator>Gustaf Erikson</dc:creator>
</item>
<item rdf:about="https://blog.wallaroolabs.com/2018/08/real-time-streaming-pattern-analyzing-trends/">
	<title>Wallaroo Labs (chuckblake): Real-time Streaming Pattern: Analyzing Trends</title>
	<link>https://blog.wallaroolabs.com/2018/08/real-time-streaming-pattern-analyzing-trends/</link>
	<content:encoded>Introduction This week, we continue to look at data processing patterns used to build event triggered stream processing applications, the use cases that the patterns relate to, and how you would go about implementing within Wallaroo.
This purpose of these posts is to help you understand the data processing use cases that Wallaroo is best designed to handle and how you can go about building them right away.
I will be looking at the Wallaroo application builder, the part of your application that hooks into the Wallaroo framework, and some the business logic of the pattern.</content:encoded>
	<dc:date>2018-08-23T19:42:35+00:00</dc:date>
</item>
<item rdf:about="https://blog.zacbrown.org/2018/08/23/things-i-learned-about-rust-1-of-n">
	<title>Zac Brown (zacbrown): Things I Learned About Rust (1 of N)</title>
	<link>https://blog.zacbrown.org/2018/08/23/things-i-learned-about-rust-1-of-n</link>
	<content:encoded>&lt;p&gt;Rust has been a daily part of my life for about 8 months now. I’ve had the distinct and somewhat surprising pleasure of getting to work with it professionally for Red Canary. It’s been a whole lot of fun.&lt;/p&gt;
&lt;p&gt;Every so often, I learn something new about writing Rust. Most recently, that was over-use of &lt;code&gt;match&lt;/code&gt; statements. In particular, my code base has a number of cases where I’m dealing with the &lt;code&gt;Result&amp;lt;V, E&amp;gt;&lt;/code&gt; type. I need to decompose the &lt;code&gt;Result&amp;lt;V, E&amp;gt;&lt;/code&gt; into its constituent &lt;code&gt;Ok(v)&lt;/code&gt; and &lt;code&gt;Err(e)&lt;/code&gt; variants in order to branch logic.&lt;/p&gt;
&lt;p&gt;However, there are a number of places where I use a result type similar to: &lt;code&gt;Result&amp;lt;(), SomeError&amp;gt;&lt;/code&gt;. This results in a bunch of code that looks like:&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;poor_match_statement&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let foo: Result&amp;lt;(), SomeError&amp;gt; = something_that_returns_result();
match foo {
    Ok(_) =&amp;gt; {},
    Err(e) =&amp;gt; println!(&amp;quot;My error: {}&amp;quot;, e.description())
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Initially, I didn’t think to hard about writing that. It was short enough and the intent was clear to me. After starting to use &lt;code&gt;cargo clippy&lt;/code&gt; fastidiously on my code base, it kept pointing out ways to simplify the use of the inverse pattern above for the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let foo: Option&amp;lt;String&amp;gt; = something_that_returns_option();
match foo {
    Some(v) =&amp;gt; do_a_thing_with_string(v),
    None =&amp;gt; {}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cargo clippy&lt;/code&gt; kindly informed me that I should be using the &lt;code&gt;if let...&lt;/code&gt; syntax instead of match for brevity:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if let Some(foo) = something_that_returns_option() {
    do_a_thing_with_string(foo);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After fixing a few of the &lt;code&gt;cargo clippy&lt;/code&gt; lint issues &lt;a href=&quot;https://blog.zacbrown.org/feed.rss#poor_match_statement&quot;&gt;above&lt;/a&gt;, I realized I could do the same thing with those functions I used which returned &lt;code&gt;Result&amp;lt;(), SomeError&amp;gt;&lt;/code&gt;, just the inverse:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if let Err(e) = something_that_returns_result() {
    println!(&amp;quot;My error: {}&amp;quot;, e.description();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s clearer and simplifies the thinking in my opinion.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;small-caps&quot;&gt;PS&lt;/span&gt;: Maybe I should look at adding the inverse pattern to &lt;code&gt;cargo clippy&lt;/code&gt; as a feature addition to that lint rule.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-23T07:00:00+00:00</dc:date>
</item>
<item rdf:about="https://www.brautaset.org/articles/2018/making-team-decisions.html">
	<title>Stig Brautaset (stig): Making Team Decisions</title>
	<link>https://www.brautaset.org/articles/2018/making-team-decisions.html</link>
	<content:encoded>&lt;p&gt;
    I summarise a useful technique for making team decisions I learnt
    about at The London Lead Developer conference a couple months ago.
    &lt;/p&gt;</content:encoded>
	<dc:date>2018-08-21T17:26:00+00:00</dc:date>
	<dc:creator>Stig Brautaset</dc:creator>
</item>
<item rdf:about="tag:anadoxin.org,2018-08-21:/blog/my-systems-time-was-so-wrong-that-even-ntpd-didnt-work.html">
	<title>Grzegorz Antoniak (dark_grimoire): My system's time was so wrong, that even ntpd didn't work</title>
	<link>http://anadoxin.org/blog/my-systems-time-was-so-wrong-that-even-ntpd-didnt-work.html</link>
	<content:encoded>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Time management is always hard.&lt;/p&gt;
&lt;p&gt;I mean, it's hard for ordinary people -- the internets are full of ebooks and tips on how to organize your time, and there are lots of books about the problem. It's also hard for programmers -- you need to take into account different timezones, those …&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-21T06:00:00+00:00</dc:date>
</item>
<item rdf:about="https://sulami.github.io/Pipes in PythonPipes in Python">
	<title>Robin Schroer (sulami): Pipes in Python</title>
	<link>https://sulami.github.io/Pipes in PythonPipes in Python</link>
	<content:encoded>&lt;p&gt;I just found &lt;a href=&quot;https://hackernoon.com/adding-a-pipe-operator-to-python-19a3aa295642&quot;&gt;an article about pipes in Python&lt;/a&gt; on lobste.rs and was reminded that I was toying with the exact same thing recently. Using a lot of functional languages (mainly Haskell, Clojure, Elixir)&lt;span&gt;&lt;label for=&quot;sn-1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-1&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;… but being paid to write (mostly highly object-oriented) Python four out of five days a week. We do use some Elixir at my place, but we are still a Python shop first.&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt; and also a fair bit of bash, I am very used to streaming data through chains of functions using pipe-like constructs. Python does make this quite difficult and encourages a more imperative approach with intermediate variables.&lt;/p&gt;
&lt;p&gt;The author of the article above uses AST rewriting, which I have to admit is very clever, though hard to introspect and extend unless you are already familiar with AST manipulation in Python.&lt;/p&gt;
&lt;p&gt;My approach is slightly different, and yields a less pretty syntax, but is arguably more flexible and extensible, by using a plain function. The definition currently looks like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; pype(x, &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;fs):
    &lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    Pipe function. Takes an initial value and any number of functions/methods.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    Methods as strings. Additional args are supported for functions &amp;amp; methods&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    by suppling a step as a tuple/list with function/method as the first&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    element and the args as the rest. The pipe input is used as the last&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    argument in this case. Currently no kwargs.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;while&lt;/span&gt; fs:
        f &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; fs[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]
        args &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;isinstance&lt;/span&gt;(f, (&lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;, &lt;span class=&quot;bu&quot;&gt;tuple&lt;/span&gt;)):
            args &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(f[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:])
            f &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; f[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;isinstance&lt;/span&gt;(f, &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;):
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; f.startswith(&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;):
                x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;getattr&lt;/span&gt;(x, f[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:])(&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;args)
            &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
                x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; x[f]
        &lt;span class=&quot;cf&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;isinstance&lt;/span&gt;(f, &lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;):
            x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; x[f]
        &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
            x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; f(&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;args &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; [x])
        fs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; fs[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:]
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; x&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The docstring is a bit abstract, so I think an example is much more explanatory:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; pype &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; pype

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; add_suffix(number, s):
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; is &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; cool!'&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(
        s,
        &lt;span class=&quot;st&quot;&gt;' '&lt;/span&gt;.join(&lt;span class=&quot;st&quot;&gt;'very'&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(number))
    )

pype(
    &lt;span class=&quot;st&quot;&gt;'   abc: &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;   '&lt;/span&gt;,
    &lt;span class=&quot;st&quot;&gt;'.strip'&lt;/span&gt;,
    (&lt;span class=&quot;st&quot;&gt;'.format'&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;),
    (add_suffix, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;),
    &lt;span class=&quot;st&quot;&gt;'.upper'&lt;/span&gt;,
)

&lt;span class=&quot;co&quot;&gt;# 'ABC: 3 IS VERY VERY COOL!'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I am aware this is a very constructed example, but you get the idea. It currently does not handle keyword arguments, and you cannot specify in which place you would like the input argument to go, it always takes the last slot, which isn’t always convenient, but this way you can avoid using &lt;code&gt;lambda&lt;/code&gt;s everywhere, which are quite long in Python&lt;span&gt;&lt;label for=&quot;sn-2&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-2&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;I quite enjoy Elixir’s solution: &lt;code&gt;&amp;amp;func(1, &amp;amp;1, 3)&lt;/code&gt;, &lt;code&gt;&amp;amp;1&lt;/code&gt; being the placeholder.&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I might extend this further in the future and maybe introduce it into some code bases of mine, if it turns out to be useful.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-21T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://gkbrk.com/2018/08/mastodon-bot-in-common-lisp/">
	<title>Gokberk Yaltirakli (gkbrk): Mastodon Bot in Common Lisp</title>
	<link>https://gkbrk.com/2018/08/mastodon-bot-in-common-lisp/</link>
	<content:encoded>&lt;p&gt;If you post a programming article to Hacker News, Reddit or Lobsters; you will
notice that soon after it gets to the front page, it gets posted to Twitter
automatically.&lt;/p&gt;

&lt;p&gt;But why settle for Twitter when you can have this on Mastodon? In this article
we will write Mastodon bot that regularly checks the
&lt;a href=&quot;https://lobste.rs/&quot;&gt;Lobste.rs&lt;/a&gt; front page and posts new links to Mastodon.&lt;/p&gt;

&lt;p&gt;Since this is a Mastodon bot, let&amp;rsquo;s start by sending a post to our followers.&lt;/p&gt;

&lt;h2&gt;Sending a Mastodon post&lt;/h2&gt;

&lt;p&gt;To interact with Mastodon, we are going to use a library called &lt;em&gt;Tooter&lt;/em&gt;. To get
the API keys you need; just log in to Mastodon, go to &lt;em&gt;Settings &amp;gt; Development &amp;gt;
New Application&lt;/em&gt;. Once you create an application, the page will show all the API
keys you need.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight common_lisp&quot;&gt;&lt;code&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;defun&lt;/span&gt; &lt;span&gt;get-mastodon-client&lt;/span&gt; &lt;span&gt;()&lt;/span&gt;
  &lt;span&gt;(&lt;/span&gt;&lt;span&gt;make-instance&lt;/span&gt; &lt;span&gt;'tooter:client&lt;/span&gt;
                 &lt;span&gt;:base&lt;/span&gt; &lt;span&gt;&quot;https://botsin.space&quot;&lt;/span&gt;
                 &lt;span&gt;:name&lt;/span&gt; &lt;span&gt;&quot;lobsterbot&quot;&lt;/span&gt;
                 &lt;span&gt;:key&lt;/span&gt; &lt;span&gt;&quot;Your client key&quot;&lt;/span&gt;
                 &lt;span&gt;:secret&lt;/span&gt; &lt;span&gt;&quot;Your client secret&quot;&lt;/span&gt;
                 &lt;span&gt;:access-token&lt;/span&gt; &lt;span&gt;&quot;Your access token&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
  &lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function will create a Mastodon client whenever you call it. Now, let&amp;rsquo;s
send our first message.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight common_lisp&quot;&gt;&lt;code&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;tooter:make-status&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;get-mastodon-client&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we can send messages, the next step in our project is to fetch the RSS
feed.&lt;/p&gt;

&lt;h2&gt;Fetching the RSS feed&lt;/h2&gt;

&lt;p&gt;Fetching resources over HTTP is really straightforward with Common Lisp, the
&lt;em&gt;drakma&lt;/em&gt; library provides an easy-to-use function called &lt;em&gt;http-request&lt;/em&gt;.  In
order to get the contents of my blog, all you need to do is&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight common_lisp&quot;&gt;&lt;code&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;drakma:http-request&lt;/span&gt; &lt;span&gt;&quot;https://gkbrk.com&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So let&amp;rsquo;s write a function that takes a feed URL and returns the RSS items.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is one case we need to handle with this. When you are fetching
&lt;code&gt;text/html&lt;/code&gt;, &lt;em&gt;drakma&lt;/em&gt; handles the decoding for you; but it doesn&amp;rsquo;t do this when
we fetch &lt;code&gt;application/rss&lt;/code&gt;. Instead, it returns a byte array.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight common_lisp&quot;&gt;&lt;code&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;defvar&lt;/span&gt; &lt;span&gt;feed-path&lt;/span&gt; &lt;span&gt;&quot;https://lobste.rs/rss&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;

&lt;span&gt;(&lt;/span&gt;&lt;span&gt;defun&lt;/span&gt; &lt;span&gt;get-rss-feed&lt;/span&gt; &lt;span&gt;()&lt;/span&gt;
  &lt;span&gt;&quot;Gets rss feed of Lobste.rs&quot;&lt;/span&gt;
  &lt;span&gt;(&lt;/span&gt;&lt;span&gt;let*&lt;/span&gt; &lt;span&gt;((&lt;/span&gt;&lt;span&gt;xml-text&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;babel:octets-to-string&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;drakma:http-request&lt;/span&gt; &lt;span&gt;feed-path&lt;/span&gt;&lt;span&gt;)))&lt;/span&gt;
         &lt;span&gt;(&lt;/span&gt;&lt;span&gt;xml-tree&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;plump:parse&lt;/span&gt; &lt;span&gt;xml-text&lt;/span&gt;&lt;span&gt;)))&lt;/span&gt;
    &lt;span&gt;(&lt;/span&gt;&lt;span&gt;plump:get-elements-by-tag-name&lt;/span&gt; &lt;span&gt;xml-tree&lt;/span&gt; &lt;span&gt;&quot;item&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function fetches an RSS feed, parses the XML and returns the &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; tags
in it. In our case, these tags contain each post &lt;em&gt;Lobste.rs&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Creating structs for the links&lt;/h2&gt;

&lt;p&gt;A struct in Common Lisp is similar to a struct in C and other languages. It is
one object that stores multiple fields.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight common_lisp&quot;&gt;&lt;code&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;defstruct&lt;/span&gt; &lt;span&gt;lobsters-post&lt;/span&gt;
  &lt;span&gt;title&lt;/span&gt;
  &lt;span&gt;url&lt;/span&gt;
  &lt;span&gt;guid&lt;/span&gt;
  &lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Getting and setting fields of a struct can be done like this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight common_lisp&quot;&gt;&lt;code&gt;&lt;span&gt;; Pretend that we have a post called p&lt;/span&gt;
&lt;span&gt;(&lt;/span&gt;&lt;span&gt;setf&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;lobsters-post-title&lt;/span&gt; &lt;span&gt;p&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;&quot;An interesting article&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;; Set the title&lt;/span&gt;
&lt;span&gt;(&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;lobsters-post-title&lt;/span&gt; &lt;span&gt;p&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;                         &lt;span&gt;; Print the title&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s map the RSS tags to our struct fields.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight common_lisp&quot;&gt;&lt;code&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;defun&lt;/span&gt; &lt;span&gt;find-first-element&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt; &lt;span&gt;node&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
  &lt;span&gt;&quot;Search the XML node for the given tag name and return the text of the first one&quot;&lt;/span&gt;
  &lt;span&gt;(&lt;/span&gt;&lt;span&gt;plump:render-text&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;car&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;plump:get-elements-by-tag-name&lt;/span&gt; &lt;span&gt;node&lt;/span&gt; &lt;span&gt;tag&lt;/span&gt;&lt;span&gt;)))&lt;/span&gt;
  &lt;span&gt;)&lt;/span&gt;

&lt;span&gt;(&lt;/span&gt;&lt;span&gt;defun&lt;/span&gt; &lt;span&gt;parse-rss-item&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
  &lt;span&gt;&quot;Parse an RSS item into a lobsters-post&quot;&lt;/span&gt;
  &lt;span&gt;(&lt;/span&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;((&lt;/span&gt;&lt;span&gt;post&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;make-lobsters-post&lt;/span&gt;&lt;span&gt;)))&lt;/span&gt;
    &lt;span&gt;(&lt;/span&gt;&lt;span&gt;setf&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;lobsters-post-title&lt;/span&gt; &lt;span&gt;post&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;find-first-element&lt;/span&gt; &lt;span&gt;&quot;title&quot;&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
    &lt;span&gt;(&lt;/span&gt;&lt;span&gt;setf&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;lobsters-post-url&lt;/span&gt; &lt;span&gt;post&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;find-first-element&lt;/span&gt; &lt;span&gt;&quot;link&quot;&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
    &lt;span&gt;(&lt;/span&gt;&lt;span&gt;setf&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;lobsters-post-guid&lt;/span&gt; &lt;span&gt;post&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;find-first-element&lt;/span&gt; &lt;span&gt;&quot;guid&quot;&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
    &lt;span&gt;post&lt;/span&gt;
    &lt;span&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we can make the previous &lt;em&gt;get-rss-feed&lt;/em&gt; function return &lt;em&gt;lobsters-post&lt;/em&gt;&amp;lsquo;s
instead of raw XML nodes.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight common_lisp&quot;&gt;&lt;code&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;defun&lt;/span&gt; &lt;span&gt;get-rss-feed&lt;/span&gt; &lt;span&gt;()&lt;/span&gt;
  &lt;span&gt;&quot;Gets rss feed of Lobste.rs&quot;&lt;/span&gt;
  &lt;span&gt;(&lt;/span&gt;&lt;span&gt;let*&lt;/span&gt; &lt;span&gt;((&lt;/span&gt;&lt;span&gt;xml-text&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;babel:octets-to-string&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;drakma:http-request&lt;/span&gt; &lt;span&gt;*feed-url*&lt;/span&gt;&lt;span&gt;)))&lt;/span&gt;
         &lt;span&gt;; Tell the parser that we want XML tags instead of HTML&lt;/span&gt;
         &lt;span&gt;; This is needed because &amp;lt;link&amp;gt; is a self-closing tag in HTML&lt;/span&gt;
         &lt;span&gt;(&lt;/span&gt;&lt;span&gt;plump:*tag-dispatchers*&lt;/span&gt; &lt;span&gt;plump:*xml-tags*&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
         &lt;span&gt;(&lt;/span&gt;&lt;span&gt;xml-tree&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;plump:parse&lt;/span&gt; &lt;span&gt;xml-text&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
         &lt;span&gt;(&lt;/span&gt;&lt;span&gt;items&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;plump:get-elements-by-tag-name&lt;/span&gt; &lt;span&gt;xml-tree&lt;/span&gt; &lt;span&gt;&quot;item&quot;&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
         &lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;(&lt;/span&gt;&lt;span&gt;reverse&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;map&lt;/span&gt; &lt;span&gt;'list&lt;/span&gt; &lt;span&gt;#'&lt;/span&gt;&lt;span&gt;parse-rss-item&lt;/span&gt; &lt;span&gt;items&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
    &lt;span&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Posting the first link to Mastodon&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight common_lisp&quot;&gt;&lt;code&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;defun&lt;/span&gt; &lt;span&gt;share-post&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
  &lt;span&gt;&quot;Takes a lobsters-post and posts it on Mastodon&quot;&lt;/span&gt;
  &lt;span&gt;(&lt;/span&gt;&lt;span&gt;tooter:make-status&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;get-mastodon-client&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;format&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; &lt;span&gt;&quot;~a - ~a ~a&quot;&lt;/span&gt;
                                                    &lt;span&gt;(&lt;/span&gt;&lt;span&gt;lobsters-post-title&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
                                                    &lt;span&gt;(&lt;/span&gt;&lt;span&gt;lobsters-post-guid&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
                                                    &lt;span&gt;(&lt;/span&gt;&lt;span&gt;lobsters-post-url&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;&lt;span&gt;)))&lt;/span&gt;
  &lt;span&gt;)&lt;/span&gt;

&lt;span&gt;(&lt;/span&gt;&lt;span&gt;share-post&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;car&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;get-rss-feed&lt;/span&gt;&lt;span&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Keeping track of shared posts&lt;/h2&gt;

&lt;p&gt;We don&amp;rsquo;t want our bot to keep posting the same links. One solution to this is to
keep all the links we already posted in a file called &lt;em&gt;links.txt&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Every time we come accross a link, we will record it to our &lt;em&gt;&amp;ldquo;database&amp;rdquo;&lt;/em&gt;. This
basically appends the link follewed by a newline to the file. Not very fancy,
but certainly enough for our purposes.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight common_lisp&quot;&gt;&lt;code&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;defun&lt;/span&gt; &lt;span&gt;record-link-seen&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
  &lt;span&gt;&quot;Writes a link to the links file to keep track of it&quot;&lt;/span&gt;
  &lt;span&gt;(&lt;/span&gt;&lt;span&gt;with-open-file&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;stream&lt;/span&gt; &lt;span&gt;&quot;links.txt&quot;&lt;/span&gt;
                          &lt;span&gt;:direction&lt;/span&gt; &lt;span&gt;:output&lt;/span&gt;
                          &lt;span&gt;:if-exists&lt;/span&gt; &lt;span&gt;:append&lt;/span&gt;
                          &lt;span&gt;:if-does-not-exist&lt;/span&gt; &lt;span&gt;:create&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;(&lt;/span&gt;&lt;span&gt;format&lt;/span&gt; &lt;span&gt;stream&lt;/span&gt; &lt;span&gt;&quot;~a~%&quot;&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;lobsters-post-guid&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;&lt;span&gt;)))&lt;/span&gt;
  &lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to filter our links before posting, we will go through each line in
that file and check if our link is in there.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight common_lisp&quot;&gt;&lt;code&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;defun&lt;/span&gt; &lt;span&gt;is-link-seen&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
  &lt;span&gt;&quot;Returns if we have processed a link before&quot;&lt;/span&gt;
  &lt;span&gt;(&lt;/span&gt;&lt;span&gt;with-open-file&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;stream&lt;/span&gt; &lt;span&gt;&quot;links.txt&quot;&lt;/span&gt;
                          &lt;span&gt;:if-does-not-exist&lt;/span&gt; &lt;span&gt;:create&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;(&lt;/span&gt;&lt;span&gt;loop&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; &lt;span&gt;line&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;read-line&lt;/span&gt; &lt;span&gt;stream&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
       &lt;span&gt;while&lt;/span&gt; &lt;span&gt;line&lt;/span&gt;
       &lt;span&gt;when&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;string=&lt;/span&gt; &lt;span&gt;line&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;lobsters-post-guid&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;&lt;span&gt;))&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;t&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
  &lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;rsquo;s wrap this all up by creating a task that&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fetches the RSS feed&lt;/li&gt;
&lt;li&gt;Gets the top 10 posts&lt;/li&gt;
&lt;li&gt;Filters out the links that we shared before&lt;/li&gt;
&lt;li&gt;Posts them to Mastodon&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight common_lisp&quot;&gt;&lt;code&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;defun&lt;/span&gt; &lt;span&gt;run-mastodon-bot&lt;/span&gt; &lt;span&gt;()&lt;/span&gt;
  &lt;span&gt;(&lt;/span&gt;&lt;span&gt;let*&lt;/span&gt; &lt;span&gt;((&lt;/span&gt;&lt;span&gt;first-ten&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;subseq&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;get-rss-feed&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
         &lt;span&gt;(&lt;/span&gt;&lt;span&gt;new-links&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;remove-if&lt;/span&gt; &lt;span&gt;#'&lt;/span&gt;&lt;span&gt;is-link-seen&lt;/span&gt; &lt;span&gt;first-ten&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
         &lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;(&lt;/span&gt;&lt;span&gt;loop&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; &lt;span&gt;item&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;new-links&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;
         &lt;span&gt;(&lt;/span&gt;&lt;span&gt;share-post&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
         &lt;span&gt;(&lt;/span&gt;&lt;span&gt;record-link-seen&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
    &lt;span&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How you schedule this to run regularly is up to you. Set up a cron job, make a
timer or just run it manually all the time.&lt;/p&gt;

&lt;p&gt;You can find the full code &lt;a href=&quot;https://gist.github.com/gkbrk/771852072ed5a6715882bfac734fdd36&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-20T22:20:14+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://www.ponylang.org/blog/2018/08/last-week-in-pony---august-19-2018/">
	<title>Ponylang (SeanTAllen): Last Week in Pony - August 19, 2018</title>
	<link>https://www.ponylang.org/blog/2018/08/last-week-in-pony---august-19-2018/</link>
	<content:encoded>Last Week In Pony is a weekly blog post to catch you up on the latest news for the Pony programming language. To learn more about Pony check out our website, our Twitter account @ponylang, our users&amp;rsquo; mailing list or join us on IRC.
Got something you think should be featured? There&amp;rsquo;s a GitHub issue for that! Add a comment to the open &amp;ldquo;Last Week in Pony&amp;rdquo; issue.
News and Blog Posts  The paper &amp;ldquo;43 Years of Actors: A Taxonomy of Actor Models and Their Key Properties&amp;rdquo; looks at actor systems and proposes different ways of categorizing them.</content:encoded>
	<dc:date>2018-08-20T01:12:22+00:00</dc:date>
</item>
<item rdf:about="http://www.petecorey.com/blog/2018/08/20/coffee-tea-and-theanine/">
	<title>Pete Corey (petecorey): Coffee, Tea, and Theanine</title>
	<link>http://www.petecorey.com/blog/2018/08/20/coffee-tea-and-theanine/</link>
	<content:encoded>&lt;p&gt;I’ve always had a tumultuous relationship with caffeine. When I was younger I would drink gallons of diet soda a day (sometimes literally). As I grew older I discovered coffee and increased my caffeine consumption by orders of magnitude.&lt;/p&gt;

&lt;p&gt;It took me until I was nearly thirty years old to realize that my consumption of huge amounts of caffeine was probably related to a low-level background radiation of anxiety that I’d been experiencing nearly my entire life. In an effort to better myself, I tried cutting back on coffee and even quitting altogether. I always found it difficult to restrict myself to one or even two cups a day, and quitting was always unsuccessful for one reason or another.&lt;/p&gt;

&lt;p&gt;At that point, I decided that my current relationship with coffee was unhealthy, so I decided to try switching to tea. I quickly went whole hog into the tea world. I bought myself &lt;a href=&quot;https://en.wikipedia.org/wiki/Gaiwan&quot;&gt;a gaiwan&lt;/a&gt;, and started buying tea from amazing import companies like &lt;a href=&quot;https://what-cha.com/&quot;&gt;What-Cha&lt;/a&gt; and &lt;a href=&quot;http://white2tea.com/about/&quot;&gt;white2tea&lt;/a&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/coffee-tea-and-theanine/tea.png&quot; /&gt;
  &lt;p&gt;Tea in a gaiwan.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I loved it! What’s more, &lt;em&gt;I felt better.&lt;/em&gt; My anxiety lessened, I felt less dependent on it every morning, and I didn’t feel like I was chasing the daily “buzz” like I would with coffee.&lt;/p&gt;

&lt;p&gt;Recently I started drinking more &lt;a href=&quot;https://en.wikipedia.org/wiki/Pu%27er_tea&quot;&gt;pu-erh teas&lt;/a&gt;, which are a style of tea where the leaves are fermented before being pressed into cakes. As I started to drink pu-erh more consistently, I began to notice my anxiety levels begin to ramp up. Once again, I found myself having cup after cup, trying to catch a caffeine buzz. Something was different. I decided to look into the differences between pu-erh and other types of teas.&lt;/p&gt;

&lt;p&gt;I came across &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4787341/&quot;&gt;this 2016 study&lt;/a&gt; carried out by the Department of Pharmacognosy, University of Szeged, Hungary, who’s goal was to compare the correlations of caffeine and tea contents between a variety of tea processing techniques.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Caffeine and L-theanine are pharmacologically important constituents of tea, especially due to their effects on the central nervous system. The effects of these two compounds are opposite: While caffeine is a well-known stimulant, theanine has a relaxing effect. Tea processing may influence the caffeine and theanine content of tea leaves.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While a sampled set of white, green, oolong, black, and pu-erh teas all contained similar levels of caffeine, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Theanine&quot;&gt;L-theanine&lt;/a&gt; content in the pu-erh samples tested were &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4787341/#ui-ncbiinpagenav-heading-8&quot;&gt;“practically zero.”&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The average theanine concentration of oolong samples was 6.09 mg/g with a mean caffeine level of 19.31 mg/g (caffeine/theanine ratio 4.20). In the pu-erh tea, no theanine was detected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So maybe it’s not a reduction in caffeine that’s improving my quality of life. Maybe it’s the introduction of theanine. Either way, I’ve decided to drop the pu-erh for now and go back to drinking oolongs.&lt;/p&gt;

&lt;p&gt;It’s said that programmers “turn caffeine into code.” How’s your relationship with coffee, tea, and caffeine, and how does it affect your life and career?&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-20T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://shape-of-code.coding-guidelines.com/?p=3853">
	<title>Derek Jones (derek-jones): Impact of team size on planning, when sitting around a table</title>
	<link>http://shape-of-code.coding-guidelines.com/2018/08/19/impact-of-team-size-on-planning-when-sitting-around-a-table/</link>
	<content:encoded>&lt;p&gt;A recent &lt;a href=&quot;https://www.allankellyassociates.co.uk/archives/2238/estimation-planning-teams-and-money-some-data/&quot;&gt;blog post by Allan Kelly&lt;/a&gt; caught my attention;  on Monday Allan sent me some comments on the &lt;a href=&quot;http://www.knosof.co.uk/ESEUR&quot;&gt;draft of my book&lt;/a&gt; and I got to ask for a copy of his data (you don&amp;#8217;t need your own software engineering data before sending me comments).&lt;/p&gt;
&lt;p&gt;During an Agile training course he gives, Allan runs an exercise based on an extended version of the &lt;a href=&quot;http://www.agilebelgium.be/xpgame/&quot;&gt;XP game&lt;/a&gt;.  The basic points are: people form into teams, a task is announced, teams have to estimate how long it will take them to complete the task and then to plan the task implementation.  Allan recorded information on team size, time spent estimating and time spent planning (no information on the tasks, which were straightforward, e.g., fold a paper airplane).&lt;/p&gt;
&lt;p&gt;In a recent post I gave a brief &lt;a href=&quot;http://shape-of-code.coding-guidelines.com/2018/08/11/maximum-team-size-before-progress-begins-to-stall/&quot;&gt;analysis of team size on productivity&lt;/a&gt;.  What does this XP game data have to say about the impact of team size on performance?&lt;/p&gt;
&lt;p&gt;We don&amp;#8217;t have task information, but we do have two timing measurements for each team.  With a bit of suck-it-and-see analysis, I found that the following equation explained 50% of the variance (&lt;a href=&quot;http://www.coding-guidelines.com/code-data/XP-game.tgz&quot;&gt;code+data&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_994_1a82ab82be64c7c73af3610ba5984c3b.png&quot; alt=&quot;Planning=-4+0.8*TeamSize+5*sqrt{Estimate}&quot; title=&quot;Planning=-4+0.8*TeamSize+5*sqrt{Estimate}&quot; /&gt;&lt;/p&gt;
&lt;p&gt;where: &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_994_bd53afc9840da53b8ff974091c455956.png&quot; alt=&quot;TeamSize&quot; title=&quot;TeamSize&quot; /&gt; is the number of people on a team, &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_994_6ecfea349da2aff209e7fad8afe752c2.png&quot; alt=&quot;Estimate&quot; title=&quot;Estimate&quot; /&gt; is the time in minutes the team spent estimating and &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_994_452fc79962543ec9a7b983436a517933.png&quot; alt=&quot;Planning&quot; title=&quot;Planning&quot; /&gt; is time in minutes the team spent planning the task implementation.&lt;/p&gt;
&lt;p&gt;There was some flexibility in the numbers, depending on the method used to build the regression model.&lt;/p&gt;
&lt;p&gt;The introduction of each new team member incurs a fixed overhead.  Given that everybody is sitting together around a table, this is not surprising; or, perhaps the problem was so simply that nobody felt the need to give a personal response to everything said by everybody else; or, perhaps the exercise was run just before lunch and people were hungry.&lt;/p&gt;
&lt;p&gt;I am not aware of any connection between time spent estimating and time spent planning, but then I know almost nothing about this kind of XP game exercise.  That square-root looks interesting (an exponent of 0.4 or 0.6 was a slightly less good fit).  Thoughts and experiences anybody?&lt;/p&gt;
&lt;p&gt;&lt;ins datetime=&quot;2018-08-19T21:35:35+00:00&quot;&gt;Update:&lt;/ins&gt;  I forgot to mention that including the &lt;em&gt;date&lt;/em&gt; of the workshop in the above model increases the variance explained to 90%.  The date here is a proxy for the task being solved.  A model that uses just the &lt;em&gt;date&lt;/em&gt; explains 75% of the variance.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-19T20:17:53+00:00</dc:date>
</item>
<item rdf:about="http://amontalenti.com/?p=2233">
	<title>Andrew Montalenti (amontalenti): Flow and concentration</title>
	<link>https://amontalenti.com/2018/08/18/flow-and-concentration</link>
	<content:encoded>&lt;p&gt;From &lt;a href=&quot;http://amzn.to/2gJ3cRZ&quot;&gt;Good Business&lt;/a&gt;, by Mihaly Csikszentmihalyi, the author of &lt;a href=&quot;http://amzn.to/2gLxmCn&quot;&gt;Flow&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
  Another condition that makes work more flowlike is &lt;em&gt;the opportunity to concentrate&lt;/em&gt;. In many jobs, constant interruptions build up to a state of chronic emergency and distraction.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;He goes on:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
  Stress is not so much the product of hard work, as it is of having to switch attention to from one task to the other without having any control over the process.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://amontalenti.com/wordpress/wp-content/uploads/2018/08/flow_image.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;488&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span id=&quot;more-2233&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is why engineers glare at you during interruptions:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
  If a person who is working on a problem for hours is interrupted by a phone call, it may take another half hour afterward to get her mind back to the point where it was before the call.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;And, this is why that&amp;#8217;s not so crazy:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
  When person A comes by to discuss his problems, you have to re-organize your mind to see things from his point of view.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Finally, this is how a single incident can spiral into an &amp;#8220;interruption culture&amp;#8221;:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
  But when B, C, and D stop in one after the other with their issues, and each requires that you clear your mind of the previous set and refurnish it with the elements of new personalities, and their specific problems, that can take a toll on consciousness quite quickly. After a few hours, your brain feels like a quivering mass of jelly.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We need to be careful about this on &lt;a href=&quot;https://amontalenti.com/2012/05/14/distributed-teams&quot;&gt;fully distributed teams&lt;/a&gt;, too. That&amp;#8217;s because with tools like Slack, we are actually quickly careening back toward the interruption culture of co-located offices of the 90&amp;#8217;s and early 00&amp;#8217;s.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;A version of this post was created &lt;a href=&quot;https://medium.com/@amontalenti/flow-and-concentration-in-business-51376e475d96&quot;&gt;originally for Medium&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-18T15:52:13+00:00</dc:date>
</item>
<item rdf:about="https://medium.com/p/2dfd40f4b6f1">
	<title>Nikita Voloboev (nikivi): learn-anything.xyz that I am building is working towards that goal.</title>
	<link>https://medium.com/@nikitavoloboev/learn-anything-xyz-that-i-am-building-is-working-towards-that-goal-2dfd40f4b6f1?source=rss-2a6397e4339e------2</link>
	<content:encoded>&lt;p&gt;learn-anything.xyz that I am building is working towards that goal.&lt;/p&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2dfd40f4b6f1&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2018-08-18T10:52:07+00:00</dc:date>
</item>
<item rdf:about="https://medium.com/p/1b69c06d91d8">
	<title>Nikita Voloboev (nikivi): Oh those. Yeah I deleted those maps as that map isn’t really meant to be used.</title>
	<link>https://medium.com/@nikitavoloboev/oh-those-yeah-i-deleted-those-maps-as-that-map-isnt-really-meant-to-be-used-1b69c06d91d8?source=rss-2a6397e4339e------2</link>
	<content:encoded>&lt;p&gt;Oh those. Yeah I deleted those maps as that map isn’t really meant to be used. We are building Learn Anything website to replace it now.&lt;/p&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1b69c06d91d8&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2018-08-18T10:51:41+00:00</dc:date>
</item>
<item rdf:about="tag:www.wezm.net,2018-08-18:/technical/2018/08/anatomy-of-a-great-rust-blog/">
	<title>Wesley Moore (wezm): Anatomy of a Great Rust Blog</title>
	<link>http://www.wezm.net/technical/2018/08/anatomy-of-a-great-rust-blog/</link>
	<content:encoded>&lt;p&gt;To date I've posted 718 posts to &lt;a href=&quot;https://readrust.net/&quot;&gt;Read Rust&lt;/a&gt;. I can't profess to having read
every single one completely (although I have read a lot of them) but I have at
least skimmed them all and extracted the information required to post them to
the site. Some blogs make this easier than others. In this post I cover some
things you can do to make your blog, and the posts upon it, easier for readers
and myself alike, to read and share with as many people as possible.&lt;/p&gt;

&lt;p&gt;I'll cover four areas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tell a Story&lt;/li&gt;
&lt;li&gt;Sign Your Work&lt;/li&gt;
&lt;li&gt;Make It Easy to Read Future Posts&lt;/li&gt;
&lt;li&gt;Provide Metadata&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;&lt;img src=&quot;http://www.wezm.net/images/2018/noun_Book_1561008.svg&quot; class=&quot;heading-icon&quot; alt=&quot;&quot; /&gt; Tell a Story&lt;/h2&gt;


&lt;p&gt;A story has a beginning, middle, and end. Blog posts benefit from this
structure too. The beginning sets the scene, and provides a shared starting
point for the main content of your post. When a post just dives straight into
the details without context it can be hard to follow the topic,
the background, and the motivations behind the work.&lt;/p&gt;

&lt;p&gt;Once you've set the scene in your introduction, you can dig into the details
knowing your readers are on the same page, and more likely to follow along. This
is where the bulk of your post is written.&lt;/p&gt;

&lt;p&gt;At the end of your post wrap up with a conclusion. This may include a
summary, details of future work, or unsolved problems.&lt;/p&gt;

&lt;h2&gt;&lt;img src=&quot;http://www.wezm.net/images/2018/noun_write_1560855.svg&quot; class=&quot;heading-icon&quot; alt=&quot;&quot; /&gt; Sign Your Work&lt;/h2&gt;


&lt;p&gt;Writing a post takes time and effort. You can be proud of that and sign your
work! I'm aware that some people prefer not to use their real names online. A
pseudonym, or handle, work well too. When posting to Read Rust it's important to
me to attribute the article to the original author. When there is no
information on a post it's hard to work out how to credit the post.&lt;/p&gt;

&lt;h2&gt;&lt;img src=&quot;http://www.wezm.net/images/2018/noun_Transmitter_1560979.svg&quot; class=&quot;heading-icon&quot; alt=&quot;&quot; /&gt; Make It Easy to Read Future Posts&lt;/h2&gt;


&lt;p&gt;If you've written an interesting post that readers have enjoyed, often they
will want to read future posts that you write. You can make this easy using an
RSS feed. Pretty much all blogging software supports RSS. If you aren't already
generating a feed I highly recommended adding one.&lt;/p&gt;

&lt;p&gt;If you already have an RSS feed on your blog ensure it's easily discoverable by
linking it. Perhaps in the header, footer, sidebar, or about page. Additionally
include a &lt;code&gt;&amp;lt;link rel=&quot;alternate&quot;&amp;gt;&lt;/code&gt; tag in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your HTML to make the
feed automatically discoverable by feed readers. MDN have a great tutorial series
about RSS covering these details: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/RSS/Getting_Started&quot;&gt;Syndicating content with RSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When looking for posts for Read Rust it would be impractical for me to manually
visit the websites of every interesting blog to see if there are new posts.
RSS lets me subscribe to blogs in my feed reader of choice (&lt;a href=&quot;http://feedbin.com/&quot;&gt;Feedbin&lt;/a&gt;),
allowing me and other readers to discover, and read your new posts all in one
place.&lt;/p&gt;

&lt;h2&gt;&lt;img src=&quot;http://www.wezm.net/images/2018/noun_Tag_1560911.svg&quot; class=&quot;heading-icon&quot; alt=&quot;&quot; /&gt; Provide Metadata&lt;/h2&gt;


&lt;p&gt;There are actually two audiences for your content: humans and machines.  The
humans are the readers, the machines are computers such as &lt;a href=&quot;https://duckduckgo.com/&quot;&gt;search engine
indexers&lt;/a&gt;, &lt;a href=&quot;https://web.archive.org/&quot;&gt;web archivers&lt;/a&gt;, and the Read Rust tools! Ideally your
content should be easy for both to read.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/wezm/read-rust/blob/d41672caaa269fc7f4584e5db2154bd9b3bd3c92/src/bin/add-url.rs&quot;&gt;add-url tool in the Read Rust codebase&lt;/a&gt; looks for a number
of pieces of metadata in order to fill in the details that are included
in the entry for every post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt; in a &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Author Name&lt;/strong&gt; in a &lt;code&gt;&amp;lt;meta name=&quot;author&quot; …&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Author URL&lt;/strong&gt; in a &lt;code&gt;&amp;lt;link rel=&quot;author&quot; …&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Date Published&lt;/strong&gt; in a &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; tag, typically nested within an &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Post Summary&lt;/strong&gt; (excerpt) in a &lt;code&gt;&amp;lt;meta name=&quot;description&quot; …&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The tool looks for these in the post itself, as well as in the RSS
feed if found. Often it still turns up empty. You can help your
content be more machine readable by including this metadata in your
HTML. The example below shows all of these properties in use.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt;
  &amp;lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0&quot; /&amp;gt;
  &amp;lt;title&amp;gt;Post Title&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&quot;description&quot; content=&quot;The design and operation of the little Rust content aggregator I built.&quot;&amp;gt;
  &amp;lt;meta name=&quot;author&quot; content=&quot;Wesley Moore&quot;&amp;gt;
  &amp;lt;link rel=&quot;alternate&quot; href=&quot;http://www.wezm.net/feed/&quot; type=&quot;application/atom+xml&quot; title=&quot;WezM.net - All Articles&quot; /&amp;gt;
  &amp;lt;link rel=&quot;author&quot; href=&quot;http://www.wezm.net/&quot; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;!-- header, nav, etc. --&amp;gt;

  &amp;lt;main&amp;gt;
    &amp;lt;article&amp;gt;
      &amp;lt;h1&amp;gt;Post Title&amp;lt;/h1&amp;gt;
      &amp;lt;time datetime=&quot;2018-06-03T07:34&quot;&amp;gt;03 June 2018&amp;lt;/time&amp;gt;

      &amp;lt;!-- post content --&amp;gt;
    &amp;lt;/article&amp;gt;
  &amp;lt;/main&amp;gt;

  &amp;lt;!-- footer, etc. --&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So that's it. Four things you can do to help make your blog more readable,
attributable, and discoverable. Your readers, human and machine will thank you.&lt;/p&gt;

&lt;p&gt;With thanks to Gregor Cresnar from the Noun Project for the icons used in this post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://thenounproject.com/search/?q=book&amp;collection=46510&amp;i=1561008#&quot;&gt;Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://thenounproject.com/search/?q=tag&amp;collection=46510&amp;i=1560911#&quot;&gt;Tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://thenounproject.com/search/?q=signal&amp;collection=46510&amp;i=1560979#&quot;&gt;Transmitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://thenounproject.com/search/?q=write&amp;collection=46510&amp;i=1560855#&quot;&gt;Write&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2018-08-18T06:17:00+00:00</dc:date>
</item>
<item rdf:about="https://medium.com/p/4b08ccc5eedd">
	<title>Nikita Voloboev (nikivi): Which links? I believe I updated MindNode links in my wiki.</title>
	<link>https://medium.com/@nikitavoloboev/which-links-i-believe-i-updated-mindnode-links-in-my-wiki-4b08ccc5eedd?source=rss-2a6397e4339e------2</link>
	<content:encoded>&lt;p&gt;Which links? I believe I updated MindNode links in my wiki.&lt;/p&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4b08ccc5eedd&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2018-08-17T23:10:51+00:00</dc:date>
</item>
<item rdf:about="http://cfenollosa.com/blog/./run-qbasic-in-your-browser.html">
	<title>Carlos Fenollosa (carlesfe): Run QBasic in your browser</title>
	<link>http://feedproxy.google.com/~r/WaitingForTheJobsToFinish/~3/bxp4yHkkcnA/run-qbasic-in-your-browser.html</link>
	<content:encoded>&lt;p&gt;Steve Hanov produced an impressive implementation of QBasic in Javascript, with detailed
explanations, that also runs on the browser. The post is eight years old!&lt;/p&gt;

&lt;p&gt;If you're nostalgic for DOS Basic, you can't miss this link.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stevehanov.ca/blog/index.php?id=92&quot;&gt;qb.js: An implementation of QBASIC in Javascript&lt;/a&gt;
(&lt;a href=&quot;https://lobste.rs/s/yhnoqk/qb_js_implementation_qbasic_javascript&quot;&gt;via&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Tags: &lt;a href=&quot;http://feeds.feedburner.com/tag_programming.html&quot;&gt;programming&lt;/a&gt;, &lt;a href=&quot;http://feeds.feedburner.com/tag_retro.html&quot;&gt;retro&lt;/a&gt;&lt;/p&gt;

&lt;!-- text end --&gt;
&lt;p id=&quot;twitter&quot;&gt;&lt;a href=&quot;http://twitter.com/intent/tweet?url=http://cfenollosa.com/blog/run-qbasic-in-your-browser.html&amp;text=&lt;Type your comment here but please leave the URL so that other people can follow the comments&gt;&amp;via=cfenollosa&quot;&gt;&amp;amp;via=cfenollosa&quot;&gt;&amp;amp;via=cfenollosa&quot;&gt;Comments? Tweet&lt;/a&gt; 
&lt;a href=&quot;https://twitter.com/search?q=http://cfenollosa.com/blog/run-qbasic-in-your-browser.html&quot;&gt;&lt;span id=&quot;count-4939&quot;&gt;&lt;/span&gt;&lt;/a&gt;&amp;nbsp;&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/WaitingForTheJobsToFinish/~4/bxp4yHkkcnA&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</content:encoded>
	<dc:date>2018-08-17T07:50:47+00:00</dc:date>
</item>
<item rdf:about="tag:gerikson.com,2018:/books/read/The-Command-of-the-Ocean">
	<title>Gustaf Erikson (gerikson): The Command of the Ocean: A Naval History of Britain, 1649­-1815 by N.A.M. Rodger</title>
	<link>http://gerikson.com/blog/books/read/The-Command-of-the-Ocean.html</link>
	<content:encoded>&lt;p&gt;A readable though academically stringent book about the organization of the Royal Navy from the end of the Republic to the Napoleonic Wars.&lt;/p&gt;

&lt;p&gt;A lot about shipyard organization and political maneuvering, but hugely interesting if you&amp;#8217;re a Patrick O&amp;#8217;Brian buff like I am.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-16T14:12:00+00:00</dc:date>
	<dc:creator>Gustaf Erikson</dc:creator>
</item>
<item rdf:about="tag:gerikson.com,2018:/books/read/The-Corporation-Wars-Emergence">
	<title>Gustaf Erikson (gerikson): The Corporation Wars: Emergence by Ken MacLeod</title>
	<link>http://gerikson.com/blog/books/read/The-Corporation-Wars-Emergence.html</link>
	<content:encoded>&lt;p&gt;The conclusion of &lt;a href=&quot;http://gerikson.com/blog/books/read/The-Corporation-Wars-Dissidence.html&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;http://gerikson.com/blog/books/read/The-Corporation-Wars-Insurgence.html&quot;&gt;trilogy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lukewarm recommendation.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-16T14:10:00+00:00</dc:date>
	<dc:creator>Gustaf Erikson</dc:creator>
</item>
<item rdf:about="http://cfenollosa.com/blog/./my-apple-watch-killed-my-iphone.html">
	<title>Carlos Fenollosa (carlesfe): My Apple Watch killed my iPhone</title>
	<link>http://feedproxy.google.com/~r/WaitingForTheJobsToFinish/~3/Qo5NEjgdXho/my-apple-watch-killed-my-iphone.html</link>
	<content:encoded>&lt;p&gt;This is the incredibly weird chain of bugs and hardware issues that bricked my iPhone after the battery of my Apple Watch started to swell.&lt;/p&gt;

&lt;p&gt;A couple of months ago the battery of my 1st gen Apple Watch started to swell and the screen popped out. I googled about this issue and read that it's covered by a warranty program, so I brought the watch to the Apple Store in Barcelona. The watch got serviced in a few days, excellent customer support as usual by Apple. &lt;/p&gt;

&lt;p&gt;I got home and tried to link this new watch to my iPhone 5s. For some reason the watch refused to link unless I upgraded iOS 10 to iOS 11 on my phone. &lt;/p&gt;

&lt;p&gt;My old watch had been working perfectly with iOS 10, but apparently this refurbished one had a new software version that required iOS 11 to work.&lt;/p&gt;

&lt;p&gt;I had kept my phone at iOS 10 because my 5s is a bit slow nowadays, I don't need the new features, and in general prefer stability on my main devices. I think, it can't be that bad, and furthermore I had missed my watch so much these last days, so I decide to upgrade.&lt;/p&gt;

&lt;p&gt;Terrible decision.&lt;/p&gt;

&lt;p&gt;I tap on &quot;Upgrade&quot;. The phone downloads the upgrade, starts installing it, progress bar, reboot, progress bar, reboot... one too many times. It's stuck on a reboot look around 80% of progress. Ok, two options, I think. Hardware issue or software issue. How could it be hardware? The phone was working well up to ten minutes ago. So I decide to install clean, wiping out all my data&lt;/p&gt;

&lt;p&gt;It's now late afternoon and next day I have to work, and need the phone. You know that feeling, right? This won't end well. I do a clean install, set up Whatsapp and Google Maps, hoping to restore from an icloud backup next day while at work.&lt;/p&gt;

&lt;p&gt;The clean install lets me reach the iOS 11 setup screen. Set up wifi, tap next, and reboot. Damn. Set up wifi again, reboot. This doesn't look like a software issue. I try something... I wait five minutes on the wifi setup screen without touching anything. Surprisingly, the phone does not reboot.&lt;/p&gt;

&lt;p&gt;I set up wifi after these five minutes and the phone reboots instantly. Any electrical engineer (or probably most of you here that's read about batteries and iOS 11) knows what's happening by now. The battery is failing to supply enough voltage, and this is made apparent at peak power demand, that is, when antennas are working and CPU is at max. I resign myself to having no phone for the next day.&lt;/p&gt;

&lt;p&gt;Then, I realize I have a spare iPhone 5s battery laying around, One that I bought to replace my mother's battery (she has also an iPhone 5s) but never ended up fixing. I've changed batteries maybe a dozen times before, and work with electronics regularly. I know best practices. I ground myself, pick up the screwdrivers and suction cup, open up the iPhone carefully, remove the battery glue strips, and install the new battery.&lt;/p&gt;

&lt;p&gt;The phone boots.&lt;/p&gt;

&lt;p&gt;With the new battery I finally manage to get past the wifi screen but unfortunately the phone keeps rebooting randomly when accessing networks. Damn. My phone clearly has an electrical problem and for whatever reason iOS 11 triggered it. Later, when discussing this issue when a Genius, they confirmed that this is a motherboard problem which required an expensive repair.&lt;/p&gt;

&lt;p&gt;Back to the 5S. Since I couldn't use a phone that dies on me randomly, and it's late at night, I picked up my old 4S, popped in my SIM, quickly downloaded Whatsapp and Maps, set up my work email and a few more apps, hoping all icloud data syncs over night. Fortunately, it did.&lt;/p&gt;

&lt;p&gt;The next day I started using the 4S as my daily driver. I managed to stick with it for a month, but in the end, it was too slow for everyday usage. It was nice as an experiment, but a pain in the neck to work with.&lt;/p&gt;

&lt;p&gt;That's the end more or less. I have a new Apple Watch that killed my 5S, which ironically I couldn't use because my replacement 4S wasn't compatible with that Watch.&lt;/p&gt;

&lt;p&gt;I still don't know why iOS 11 draws more power than iOS 10, or if it was a firmware change that really killed my phone. But my bet is on battery management. Doesn't matter now. It was a disaster.&lt;/p&gt;

&lt;p&gt;As I was saying, I ended up buying an SE, which is two years old, at full retail price. Well, I got a 40€ discount by trading in the broken 5S. &lt;/p&gt;

&lt;p&gt;The &lt;em&gt;cheapest iPhone&lt;/em&gt; is not a great deal nowadays, but it still is the perfect phone for my usage/size/budget.&lt;/p&gt;

&lt;p&gt;It is not my intention to blame Apple. I fully understand what happened, and it was a chain of unfortunate events. However, I have the feeling that if I could have downgraded the 5S to iOS 10, it may have come back from the dead. &lt;/p&gt;

&lt;p&gt;Tags: &lt;a href=&quot;http://feeds.feedburner.com/tag_apple.html&quot;&gt;apple&lt;/a&gt;&lt;/p&gt;

&lt;!-- text end --&gt;
&lt;p id=&quot;twitter&quot;&gt;&lt;a href=&quot;http://twitter.com/intent/tweet?url=http://cfenollosa.com/blog/my-apple-watch-killed-my-iphone.html&amp;text=&lt;Type your comment here but please leave the URL so that other people can follow the comments&gt;&amp;via=cfenollosa&quot;&gt;&amp;amp;via=cfenollosa&quot;&gt;&amp;amp;via=cfenollosa&quot;&gt;Comments? Tweet&lt;/a&gt; 
&lt;a href=&quot;https://twitter.com/search?q=http://cfenollosa.com/blog/my-apple-watch-killed-my-iphone.html&quot;&gt;&lt;span id=&quot;count-8495&quot;&gt;&lt;/span&gt;&lt;/a&gt;&amp;nbsp;&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/WaitingForTheJobsToFinish/~4/Qo5NEjgdXho&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</content:encoded>
	<dc:date>2018-08-16T13:56:07+00:00</dc:date>
</item>
<item rdf:about="https://j11g.com/?p=2120">
	<title>Jan van den Berg (j11g): Save data from your broken Raspberry Pi SD card with GNU ddrescue</title>
	<link>https://j11g.com/index.php/2018/08/16/save-data-from-your-broken-raspberry-pi-sd-card-with-gnu-ddrescue/</link>
	<content:encoded>&lt;p&gt;This week my Pi stopped working. After hooking up a monitor I saw kernel errors related to VFS. So the file system was obviously broken. Oops.&lt;/p&gt;
&lt;p&gt;The end conclusion is that the SD card is physically &amp;#8216;broken&amp;#8217;, but I still managed to salvage my data — which is more important than the card. Here&amp;#8217;s how.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Broken file system: fsck or dd?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;What didn&amp;#8217;t work for me, but you might want to give a try first are &lt;a href=&quot;https://en.wikipedia.org/wiki/Fsck&quot;&gt;&lt;strong&gt;fsck&lt;/strong&gt;&lt;/a&gt; for file system consistency check or using &lt;a href=&quot;https://nl.wikipedia.org/wiki/Dd_(Unix)&quot;&gt;&lt;strong&gt;dd&lt;/strong&gt;&lt;/a&gt; to create a disk image.&lt;/p&gt;
&lt;p&gt;I couldn&amp;#8217;t check/repair the file system with fsck (it gave errors), not even when setting different superblocks. It might work for you, so you can give &lt;a href=&quot;https://www.cyberciti.biz/faq/recover-bad-superblock-from-corrupted-partition/&quot;&gt;this blog a try&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next, I tried to &amp;#8216;clone&amp;#8217; the bits on the file system with &lt;strong&gt;dd&lt;/strong&gt;. To get a usable image. But that didn&amp;#8217;t work either, spewing out errors. But this is where I stumbled across &lt;a href=&quot;https://www.gnu.org/software/ddrescue/&quot;&gt;&lt;strong&gt;ddrescue.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;GNU ddrescue&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;I had not heard of ddrescue before but it turned out to be a &lt;del&gt;life&lt;/del&gt; datasaver! It does what dd does, but in the process tries &amp;#8220;to rescue the good parts first in case of read errors&amp;#8221;. There are &lt;a href=&quot;https://askubuntu.com/questions/211578/whats-the-difference-between-ddrescue-gddrescue-and-dd-rescue/211579#211579&quot;&gt;two versions of this program&lt;/a&gt;, I used the GNU version.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install gddrescue&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And here is what a sigh of relief looks like, after 43 minutes:&lt;a href=&quot;https://j11g.com/wp-content/uploads/2018/08/ddrescue.jpeg&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-2121&quot; src=&quot;https://j11g.com/wp-content/uploads/2018/08/ddrescue.jpeg&quot; alt=&quot;&quot; width=&quot;3762&quot; height=&quot;661&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So the command is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ddrescue -f -n /dev/[baddrive] /root/[imagefilename].img /tmp/recovery.log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The options I used came &lt;a href=&quot;https://datarecovery.com/rd/how-to-clone-hard-disks-with-ddrescue/&quot;&gt;from this blog&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-f Force ddrescue to run even if the destination file already exists (this is required when writing to a disk). It will overwrite.&lt;/li&gt;
&lt;li&gt;-n Short for’–no-scrape’. This option prevents ddrescue from running through the scraping phase, essentially preventing the utility from spending too much time attempting to recreate heavily damaged areas of a file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After you have an image you can mount it and browse your data:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mount -o loop rescue.img /mnt/rescue&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;With this I had access to my data! So I got a new SD card copied my data over and chucked the old SD card. And remember:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;'Don't ever, ever plan a backup strategy. Plan a restore strategy.' &amp;#8212; Paul Randal&lt;/p&gt;
&lt;p&gt;&amp;mdash; Unix tool tip (@UnixToolTip) &lt;a href=&quot;https://twitter.com/UnixToolTip/status/681892647259246592?ref_src=twsrc%5Etfw&quot;&gt;December 29, 2015&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://j11g.com/index.php/2018/08/16/save-data-from-your-broken-raspberry-pi-sd-card-with-gnu-ddrescue/&quot;&gt;Save data from your broken Raspberry Pi SD card with GNU ddrescue&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://j11g.com&quot;&gt;Jan van den Berg&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-16T08:40:35+00:00</dc:date>
</item>
<item rdf:about="http://amontalenti.com/?p=2220">
	<title>Andrew Montalenti (amontalenti): Public technical talks and slides</title>
	<link>https://amontalenti.com/2018/08/15/public-technical-talks</link>
	<content:encoded>&lt;p&gt;Over the years, I&amp;#8217;ve put together a few public technical talks where the slides are accessible on this site. These are only really nice to view on desktop, and require the use of arrow keys to move around. Long-form notes are also available &amp;#8212; generated by a sweet Sphinx and reStructuredText plugin. I figured I&amp;#8217;d link to them all here so I don&amp;#8217;t lose track:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://amontalenti.com/pub/dataviz-elements&quot;&gt;Data Visualization Elements (2013)&lt;/a&gt; &lt;a href=&quot;http://amontalenti.com/pub/dataviz-elements/notes&quot;&gt;(notes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://amontalenti.com/pub/journalytics&quot;&gt;Analytics for Journalism (2013)&lt;/a&gt; &lt;a href=&quot;http://amontalenti.com/pub/journalytics/notes&quot;&gt;(notes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://amontalenti.com/pub/clojonic&quot;&gt;Clojonic: Pythonic Clojure (2014)&lt;/a&gt; &lt;a href=&quot;http://amontalenti.com/pub/clojonic/notes&quot;&gt;(notes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://amontalenti.com/pub/distributed-teams&quot;&gt;Fully Distributed &amp;amp; Asynchronous Teams (2014)&lt;/a&gt; &lt;a href=&quot;http://amontalenti.com/pub/distributed-teams/notes&quot;&gt;(notes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://amontalenti.com/pub/streams&quot;&gt;Real-time Streams &amp;amp; Logs (2014)&lt;/a&gt; &lt;a href=&quot;http://amontalenti.com/pub/streams/notes&quot;&gt;(notes)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span id=&quot;more-2220&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Using even older slide software called S5, which is also based on reStructuredText, I also have a couple of Python training materials. I&amp;#8217;ve given these materials as full-class trainings at various times, including a tutorial at PyCon on web development (the last link here).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://amontalenti.com/pub/fast-python&quot;&gt;&amp;#8220;Fast Python&amp;#8221;: One-Day Python Training (2012)&lt;/a&gt; &lt;a href=&quot;https://github.com/amontalenti/fast-python-slides/blob/master/index.rst&quot;&gt;(notes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://amontalenti.com/pub/python-training&quot;&gt;&amp;#8220;Advanced Python&amp;#8221;: Three-Day Python Training (2012)&lt;/a&gt; &lt;a href=&quot;https://github.com/Parsely/python-adv-slides/blob/master/index.rst&quot;&gt;(notes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://amontalenti.com/pub/rapid-web-slides&quot;&gt;Rapid Web Prototyping with Lightweight Tools (2013)&lt;/a&gt; &lt;a href=&quot;https://github.com/amontalenti/rapid-web-slides/blob/master/index.rst&quot;&gt;(notes)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2018-08-15T20:43:22+00:00</dc:date>
</item>
<item rdf:about="https://blog.wallaroolabs.com/2018/08/utilizing-elixir-as-a-lightweight-tool-to-store-real-time-metrics-data/">
	<title>Wallaroo Labs (chuckblake): Utilizing Elixir as a lightweight tool to store real-time metrics data</title>
	<link>https://blog.wallaroolabs.com/2018/08/utilizing-elixir-as-a-lightweight-tool-to-store-real-time-metrics-data/</link>
	<content:encoded>Visibility into performance bottlenecks was the driving force behind the design of Wallaroo&amp;rsquo;s Monitoring Hub and Metrics UI. We wanted to provide tooling for users to be able to observe their application as it performed in real-time and provide enough introspection for them to make adjustments to their applications based on what they were seeing; whether that was adding additional workers to distribute a high workload or rewriting a computation to be more efficient.</content:encoded>
	<dc:date>2018-08-15T13:00:00+00:00</dc:date>
</item>
<item rdf:about="http://shape-of-code.coding-guidelines.com/?p=3841">
	<title>Derek Jones (derek-jones): 2018 in the programming language standards’ world</title>
	<link>http://shape-of-code.coding-guidelines.com/2018/08/14/2018-in-the-programming-language-standards-world/</link>
	<content:encoded>&lt;p&gt;I am sitting in the room, at the &lt;a href=&quot;https://en.wikipedia.org/wiki/BSI_Group&quot;&gt;British Standards Institution&lt;/a&gt;, where today&amp;#8217;s meeting of &lt;a href=&quot;https://standardsdevelopment.bsigroup.com/committees/50001786&quot;&gt;IST/5&lt;/a&gt;, the committee responsible for programming languages, has just adjourned (it&amp;#8217;s close to where I have to be in a few hours).&lt;/p&gt;
&lt;p&gt;BSI have downsized us, they no longer provide a committee secretary to take minutes and provide a point of contact.  Somebody from a service pool responds (or not) to emails.  I did not blink first to our chair&amp;#8217;s request for somebody to take the minutes &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-includes/images/smilies/simple-smile.png&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;
&lt;p&gt;What interesting things came up?&lt;/p&gt;
&lt;p&gt;It transpires that &lt;a href=&quot;http://shape-of-code.coding-guidelines.com/2017/07/12/2017-in-the-programming-language-standards-world/&quot;&gt;reports of the death of Cobol standards work&lt;/a&gt; may be premature.  There are a few people working on &amp;#8216;new&amp;#8217; features, e.g., support for JSON.  This work is happening at the ISO level, rather than the national level in the US (where the real work on the Cobol standard used to be done, before being handed on to the ISO).  Is this just a couple of people pushing a few pet ideas or will it turn into something more substantial?  We will have to wait and see.&lt;/p&gt;
&lt;p&gt;The Unicode consortium (a vendor consortium) are &lt;a href=&quot;https://www.buzzfeednews.com/article/charliewarzel/inside-the-great-poop-emoji-feud&quot;&gt;continuing to propose&lt;/a&gt; new &lt;a href=&quot;https://en.wikipedia.org/wiki/Pile_of_Poo_emoji&quot;&gt;pile of poo emoji&lt;/a&gt; and &lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG20/&quot;&gt;WG20&lt;/a&gt; (an ISO committee) were doing what they can to stay sane.&lt;/p&gt;
&lt;p&gt;Work on the &lt;a href=&quot;https://isotc.iso.org/livelink/livelink/open/jtc1SC22wg17&quot;&gt;Prolog standard&lt;/a&gt;, now seems to be concentrated in Austria.  &lt;a href=&quot;https://en.wikipedia.org/wiki/Prolog&quot;&gt;Prolog&lt;/a&gt; was the language to be associated with, if you were on the 1980s AI bandwagon (and the Japanese were going to take over the world unless we did something about it, e.g., spend money); this time around, it&amp;#8217;s machine learning.  With one &lt;a href=&quot;http://www.swi-prolog.org/&quot;&gt;dominant open source implementation&lt;/a&gt; and &lt;a href=&quot;https://quintus.sics.se/&quot;&gt;one commercial vendor&lt;/a&gt; (cannot think of any others), standards work is a relic of past glories.&lt;/p&gt;
&lt;p&gt;In pre-internet times there was an incentive to kill off committees that were past their sell-by date; it cost money to send out mailings and document storage occupied shelf space.  In an electronic world there is no incentive to spend time killing off such committees, might as well wait until those involved retire or die.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG23/&quot;&gt;WG23&lt;/a&gt; (programming language vulnerabilities) reported &lt;a href=&quot;https://www.google.com/search?q=site%3Aopen-std.org%2Fjtc1%2Fsc22%2Fwg21%2F+sg12&quot;&gt;lots of interest in their work&lt;/a&gt; from people involved in the C++ standard, and for some reason the C++ committee people in the room started glancing at me.  I was a good boy, and did not mention &lt;a href=&quot;http://shape-of-code.coding-guidelines.com/2016/07/27/is-the-iso-c-standards-committee-past-its-sell-by-date/&quot;&gt;bored consultants&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It looks like &lt;a href=&quot;http://www.iso.org/iso/catalogue_detail.htm?csnumber=43781&quot;&gt;ISO/IEC 23360-1:2006&lt;/a&gt;, the ISO version of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Linux_Standard_Base&quot;&gt;Linux Base Standard&lt;/a&gt; is going to be updated to reflect LBS 5.0; something that was &lt;a href=&quot;http://shape-of-code.coding-guidelines.com/2015/08/18/2015-in-the-programming-language-standards-world/&quot;&gt;not certain few years ago&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-14T16:17:29+00:00</dc:date>
</item>
<item rdf:about="http://benaiah.me/posts/configuring-go-apps-with-toml">
	<title>Benaiah Mischenko (benaiah): Configuring Go Apps with TOML</title>
	<link>http://benaiah.me/posts/configuring-go-apps-with-toml</link>
	<content:encoded>&lt;h1&gt;Configuring Go Apps with TOML&lt;/h1&gt;
&lt;p&gt;So you’ve been writing an application in Go, and you’re getting to the
point where you have a lot of different options in your program.
You’ll likely want a configuration file, as specifying every option on
the command-line can get difficult and clunky, and launching
applications from a desktop environment makes specifying options at
launch even more difficult.&lt;/p&gt;
&lt;p&gt;This post will cover configuring Go apps using a simple, INI-like
configuration language called &lt;a href=&quot;https://github.com/toml-lang/toml&quot;&gt;TOML&lt;/a&gt;, as well as some related
difficulties and pitfalls.&lt;/p&gt;
&lt;p&gt;TOML has quite a few implementations, including several libraries for
Go. I particularly like
&lt;a href=&quot;https://github.com/burntsushi/toml&quot;&gt;BurntSushi’s TOML parser and decoder&lt;/a&gt;, as it lets
you marshal a TOML file directly into a struct. This means your
configuration can be fully typed and you can easily do custom
conversions (such as parsing a &lt;code&gt;time.Duration&lt;/code&gt;) as you read the
config, so you don’t have to do them in the rest of your application.&lt;/p&gt;
&lt;h2&gt;Configuration location&lt;/h2&gt;
&lt;p&gt;The first question you should ask when adding config files to any app
is &quot;where should they go?&quot;. For tools that aren’t designed to be run
as a service, as root, or under a custom user (in other words, most of
them), you should be putting them in the user’s home directory, so
they’re easily changed. A few notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Even if you currently have only one file, you should use a folder
and put the config file within it. That way, if and when you do need
other files there, you won’t have to clutter the user’s home
directory or deal with loading config files that could be in two
different locations (Emacs, for instance, supports both
&lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; and &lt;code&gt;~/.emacs&lt;/code&gt; for historical reasons, which
ends up causing confusing problems when both exist).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should name your configuration directory after your program.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should typically prefix your config directory with a &lt;code&gt;.&lt;/code&gt; (but
see the final note for Linux, as configuration directories within
&lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; should not be so prefixed).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On most OSs, putting your configuration files in the user’s “home”
directory is typical. I recommend the library
&lt;a href=&quot;https://github.com/mitchellh/go-homedir&quot;&gt;go-homedir&lt;/a&gt;, rather than the &lt;code&gt;User.Homedir&lt;/code&gt; available
in the stdlib from &lt;a href=&quot;https://golang.org/pkg/os/user/&quot;&gt;&lt;code&gt;os/user&lt;/code&gt;&lt;/a&gt;. This is because use of
&lt;code&gt;os/user&lt;/code&gt; uses &lt;a href=&quot;https://golang.org/cmd/cgo/&quot;&gt;cgo&lt;/a&gt;, which, while useful in many situations,
also &lt;a href=&quot;https://dave.cheney.net/2016/01/18/cgo-is-not-go&quot;&gt;causes a number of difficulties&lt;/a&gt; that can
otherwise be avoided - most notably, cross-compilation is no longer
simple, and the ease of deploying a static Go binary gets a number
of caveats.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On Linux specifically, I strongly encourage that you do &lt;em&gt;not&lt;/em&gt; put
your configuration directory directly in the user’s home directory.
Most commonly-used modern Linux distributions use the
&lt;a href=&quot;https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG Base Directory Specification&lt;/a&gt; from
&lt;a href=&quot;https://www.freedesktop.org/wiki/&quot;&gt;freedesktop.org&lt;/a&gt;, which specifies standard locations
for various directories on an end-user Linux system. (Despite this,
many applications don’t respect the standard and put their
configurations directly in &lt;code&gt;~&lt;/code&gt; anyway). By default, this is
&lt;code&gt;~/.config/&lt;/code&gt;, but it can also be set with the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt;
environment variable. Directories within this should &lt;em&gt;not&lt;/em&gt; use a
leading &lt;code&gt;.&lt;/code&gt;, as the directory is already hidden by default.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following function should get you the correct location for your
config directory on all platforms (if there’s a platform with a
specific convention for config locations which I’ve missed, I’d
appreciate you letting me know so I can update the post - my email is
at the bottom of the page).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;import (
    &quot;path/filepath&quot;
    &quot;os&quot;
    &quot;runtime&quot;

    &quot;github.com/mitchellh/go-homedir&quot;
)

var configDirName = &quot;example&quot;

func GetDefaultConfigDir() (string, error) {
    var configDirLocation string

    homeDir, err := homedir.Dir()
    if err != nil {
        return &quot;&quot;, err
    }

    switch runtime.GOOS {
    case &quot;linux&quot;:
        // Use the XDG_CONFIG_HOME variable if it is set, otherwise
        // $HOME/.config/example
        xdgConfigHome := os.Getenv(&quot;XDG_CONFIG_HOME&quot;)
        if xdgConfigHome != &quot;&quot; {
            configDirLocation = xdgConfigHome
        } else {
            configDirLocation = filepath.Join(homeDir, &quot;.config&quot;, configDirName)
        }

    default:
        // On other platforms we just use $HOME/.example
        hiddenConfigDirName := &quot;.&quot; + configDirName
        configDirLocation = filepath.Join(homeDir, hiddenConfigDirName)
    }

    return configDirLocation, nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within the config folder, you can use any filename you want for your
config - I suggest &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Loading the config file&lt;/h2&gt;
&lt;p&gt;To load a config file, you’ll first want to define the what config
values you’ll use. &lt;code&gt;burntsushi/toml&lt;/code&gt; will ignore options in the TOML
file that you don’t use, so you don’t have to worry about that causing
errors. For instance, here’s the proposed configuration for a project
I’m maintaining, &lt;a href=&quot;https://github.com/asciimoo/wuzz&quot;&gt;wuzz&lt;/a&gt; (the keybindings aren’t currently
implemented, but I’ve left them in for the sake of demonstration):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;type Config struct {
    General GeneralOptions
    Keys    map[string]map[string]string
}

type GeneralOptions struct {
    FormatJSON             bool
    Insecure               bool
    PreserveScrollPosition bool
    DefaultURLScheme       string
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s pretty simple. Note that we use a named struct for
&lt;code&gt;GeneralOptions&lt;/code&gt;, rather than making &lt;code&gt;Config.General&lt;/code&gt; an anonymous
struct. This makes nesting options simpler and aids tooling.&lt;/p&gt;
&lt;p&gt;Loading the config is quite easy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;import (
    &quot;errors&quot;
    &quot;os&quot;
    
    &quot;github.com/BurntSush/toml&quot;
)

func LoadConfig(configFile string) (*Config, error) {
    if _, err := os.Stat(configFile); os.IsNotExist(err) {
        return nil, errors.New(&quot;Config file does not exist.&quot;)
    } else if err != nil {
        return nil, err
    }
    
    var conf Config
    if _, err := toml.DecodeFile(configFile, &amp;amp;conf); err != nil {
        return nil, err
    }

    return &amp;amp;conf, nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;toml.DecodeFile&lt;/code&gt; will automatically populate &lt;code&gt;conf&lt;/code&gt; with the values
set in the TOML file. (Note that we pass &lt;code&gt;&amp;amp;conf&lt;/code&gt; to &lt;code&gt;toml.DecodeFile&lt;/code&gt;,
not &lt;code&gt;conf&lt;/code&gt; - we need to populate the struct we actually have, not a
copy). Given the above &lt;code&gt;Config&lt;/code&gt; type and the following TOML file…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[general]
defaultURLScheme = &quot;https&quot;
formatJSON = true
preserveScrollPosition = true
insecure = false

[keys]

  [keys.general]
  &quot;C-j&quot; = &quot;next-view&quot;
  &quot;C-k&quot; = &quot;previous-view&quot;
  
  [keys.response-view]
  &quot;&amp;lt;down&amp;gt;&quot; = &quot;scroll-down&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…we’ll get a &lt;code&gt;Config&lt;/code&gt; like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;Config{
    General: GeneralOptions{
        DefaultURLScheme:       &quot;https&quot;,
        FormatJSON:             true,
        PreserveScrollPosition: true,
        Insecure:               false,
    },
    Keys: map[string]map[string]string{
        &quot;general&quot;: map[string]string{
            &quot;C-j&quot;: &quot;next-view&quot;,
            &quot;C-k&quot;: &quot;previous-view&quot;,
        },
        &quot;response-view&quot;: map[string]string{
            &quot;&amp;lt;down&amp;gt;&quot;: &quot;scroll-down&quot;,
        },
    },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Automatically decoding values&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;wuzz&lt;/code&gt; actually uses another value in its config - a default HTTP
timeout. In this case, though, there’s no native TOML value that
cleanly maps to the type we want - a &lt;code&gt;time.Duration&lt;/code&gt;. Fortunately, the
TOML library we’re using supports automatically decoding TOML values
into custom Go values. To do so, we’ll need a type that wraps
&lt;code&gt;time.Duration&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;type Duration struct {
    time.Duration
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we’ll need to add an &lt;code&gt;UnmarshalText&lt;/code&gt; method, so we satisfy the
&lt;code&gt;toml.TextUnmarshaler&lt;/code&gt; interface. This will let &lt;code&gt;toml&lt;/code&gt; know that we
expect a string value which will be passed into our &lt;code&gt;UnmarshalText&lt;/code&gt;
method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;func (d *Duration) UnmarshalText(text []byte) error {
    var err error
    d.Duration, err = time.ParseDuration(string(text))
    return err
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we’ll need to add it to our &lt;code&gt;Config&lt;/code&gt; type. This will go in
&lt;code&gt;Config.General&lt;/code&gt;, so we’ll add it to &lt;code&gt;GeneralOptions&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;type GeneralOptions struct {
    Timeout                Duration
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can add it to our TOML file, and &lt;code&gt;toml.DecodeFile&lt;/code&gt; will
automatically populate our struct with a &lt;code&gt;Duration&lt;/code&gt; value!&lt;/p&gt;
&lt;p&gt;Input:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[general]
timeout = &quot;1m&quot;
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Equivalent output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;Config{
    General: GeneralOptions{
        Timeout: Duration{
            Duration: 1 * time.Minute
        },
        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Default config values&lt;/h2&gt;
&lt;p&gt;We now have configuration loading, and we’re even decoding a text
field to a custom Go type - we’re nearly finished! Next we’ll want to
specify defaults for the configuration. We want values specified in
the config to override our defaults. Fortunately, &lt;code&gt;toml&lt;/code&gt; makes really
easy to do.&lt;/p&gt;
&lt;p&gt;Remember how we passed in &lt;code&gt;&amp;amp;conf&lt;/code&gt; to &lt;code&gt;toml.DecodeFile&lt;/code&gt;? That was an
empty &lt;code&gt;Config&lt;/code&gt; struct - but we can also pass one with its values
pre-populated. &lt;code&gt;toml.DecodeFile&lt;/code&gt; will set any values that exist in the
TOML file, and ignore the rest. First we’ll create the default values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;import (
    &quot;time&quot;
)
var DefaultConfig = Config{
    General: GeneralOptions{
        DefaultURLScheme:       &quot;https&quot;,
        FormatJSON:             true,
        Insecure:               false,
        PreserveScrollPosition: true,
        Timeout: Duration{
            Duration: 1 * time.Minute,
        },
    },
    // You can omit stuff from the default config if you'd like - in
    // this case we don't specify Config.Keys
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we simply modify the &lt;code&gt;LoadConfig&lt;/code&gt; function to use
&lt;code&gt;DefaultConfig&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;func LoadConfig(configFile string) (*Config, error) {
    if _, err := os.Stat(configFile); os.IsNotExist(err) {
        return nil, errors.New(&quot;Config file does not exist.&quot;)
    } else if err != nil {
        return nil, err
    }

    conf := DefaultConfig
    if _, err := toml.DecodeFile(configFile, &amp;amp;conf); err != nil {
        return nil, err
    }

    return &amp;amp;conf, nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The important line here is &lt;code&gt;conf := DefaultConfig&lt;/code&gt; - now when &lt;code&gt;conf&lt;/code&gt;
is passed to &lt;code&gt;toml.DecodeFile&lt;/code&gt; it will populate that.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;I hope this post helped you! you should now be able to configure Go
apps using TOML with ease.&lt;/p&gt;
&lt;p&gt;If this post was helpful to you, or you have comments or corrections,
please let me know! My email address is at the bottom of the page. I’m
also looking for work at the moment, so feel free to get in touch if
you’re looking for developers.&lt;/p&gt;
&lt;h2&gt;Complete code&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;package config

import (
    &quot;errors&quot;
    &quot;path/filepath&quot;
    &quot;os&quot;
    &quot;runtime&quot;
    &quot;time&quot;

    &quot;github.com/BurntSushi/toml&quot;
    &quot;github.com/mitchellh/go-homedir&quot;
)

var configDirName = &quot;example&quot;

func GetDefaultConfigDir() (string, error) {
    var configDirLocation string

    homeDir, err := homedir.Dir()
    if err != nil {
        return &quot;&quot;, err
    }

    switch runtime.GOOS {
    case &quot;linux&quot;:
        // Use the XDG_CONFIG_HOME variable if it is set, otherwise
        // $HOME/.config/example
        xdgConfigHome := os.Getenv(&quot;XDG_CONFIG_HOME&quot;)
        if xdgConfigHome != &quot;&quot; {
            configDirLocation = xdgConfigHome
        } else {
            configDirLocation = filepath.Join(homeDir, &quot;.config&quot;, configDirName)
        }

    default:
        // On other platforms we just use $HOME/.example
        hiddenConfigDirName := &quot;.&quot; + configDirName
        configDirLocation = filepath.Join(homeDir, hiddenConfigDirName)
    }

    return configDirLocation, nil
}

type Config struct {
    General GeneralOptions
    Keys    map[string]map[string]string
}

type GeneralOptions struct {
    DefaultURLScheme       string
    FormatJSON             bool
    Insecure               bool
    PreserveScrollPosition bool
    Timeout                Duration
}

type Duration struct {
    time.Duration
}

func (d *Duration) UnmarshalText(text []byte) error {
    var err error
    d.Duration, err = time.ParseDuration(string(text))
    return err
}

var DefaultConfig = Config{
    General: GeneralOptions{
        DefaultURLScheme:       &quot;https&quot;,
        FormatJSON:             true,
        Insecure:               false,
        PreserveScrollPosition: true,
        Timeout: Duration{
            Duration: 1 * time.Minute,
        },
    },
}

func LoadConfig(configFile string) (*Config, error) {
    if _, err := os.Stat(configFile); os.IsNotExist(err) {
        return nil, errors.New(&quot;Config file does not exist.&quot;)
    } else if err != nil {
        return nil, err
    }

    conf := DefaultConfig
    if _, err := toml.DecodeFile(configFile, &amp;amp;conf); err != nil {
        return nil, err
    }

    return &amp;amp;conf, nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;If you’d like to leave a comment, please email &lt;a href=&quot;mailto:benaiah@mischenko.com&quot;&gt;benaiah@mischenko.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-14T14:17:29+00:00</dc:date>
</item>
<item rdf:about="https://blog.artemix.org/article/show/kickstart">
	<title>Artemis (Artemix): Kickstart, a fast and simple project template bootstrapper</title>
	<link>https://blog.artemix.org/article/show/kickstart</link>
	<content:encoded>&lt;p&gt;Ever had some code base that you regularly use to start a new project?&lt;/p&gt;
&lt;p&gt;Until now, you've probably lost some time refactoring everything to fill out the right project name, title etc.&lt;/p&gt;
&lt;p&gt;A few tools already exist but either you're lost in feature bloating hell or you're fighting to configure everything in most cases.&lt;/p&gt;
&lt;p&gt;The following tool is an early-developement, rust-based, template tool made to be more versatile that its closest python counter-part, &lt;a href=&quot;https://github.com/audreyr/cookiecutter&quot;&gt;cookiecutter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, it perfectly works on Windows, Linux and MacOS without any issue!&lt;/p&gt;
&lt;h2&gt;A demonstration&lt;/h2&gt;
&lt;p&gt;Let me demonstrate this tool from a user's point of view.&lt;/p&gt;
&lt;p&gt;Say I'm John. I have a need to make several workers for my job queue.&lt;/p&gt;
&lt;p&gt;All workers follow the same base structure and only a few bits of code change.
Error management is the same, etc.&lt;/p&gt;
&lt;p&gt;Without any external tool,
the easiest way I could handle that would be to put the template in a Git repository,
clone it when needed and change the few fields,
like the handler's class name, the configuration file etc.&lt;/p&gt;
&lt;p&gt;Still, I'd like to quickly bootstrap all my workers and not have to, by hand,
replace each key with the right value.&lt;/p&gt;
&lt;p&gt;At the same time, I'm too lazy to set up an entire boostrapping suite or tool,
and I'd like to be able to make some very basic project templates that'd work almost out of the box.&lt;/p&gt;
&lt;p&gt;My example of worker system uses the following file structure for worker classes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nohighlight&quot;&gt;.
├── {{name}}.java
└── template.toml&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes, this tool supports templating in file and folder names!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;{{name}}.java&lt;/code&gt; file contains the following very basic template code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;package org.artemix.worker;

class {{name}} extends WorkerBase {
        public void handle(Payload payload) {
                // Some default code
        }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;template.toml&lt;/code&gt; contains a few template-specific fields (like its name, description and configuration format version), but also variable declaration for setup prompts.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;toml&quot;&gt;name = &quot;Worker&quot;
description = &quot;Worker base template&quot;
kickstart_version = 1

[[variable]]
name=&quot;name&quot;
default=&quot;MyClass&quot;
prompt=&quot;Which class name do you want to give to your worker ?&quot;
validation=&quot;^[A-Z]\w+$&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, with the validation regex, we can attest that we'll get a valid Java class file starting with a capitalized letter.&lt;/p&gt;
&lt;p&gt;And that's it!&lt;/p&gt;
&lt;p&gt;In a few instants, we created our worker template, and we have a nice base we can later grow if we need any new more complex worker.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Now, how do you create a worker with this template?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The easiest way is by simply running the following command from inside the folder in which you want the files to be created.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ kickstart /path/to/my/template&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will parse the &lt;code&gt;template.toml&lt;/code&gt; inside the given template path and,
for each &lt;code&gt;[[variable]]&lt;/code&gt; block, will ask the prompt, validate the input,
and repeat until it's rightly entered.&lt;/p&gt;
&lt;p&gt;Once all prompts have been resolved, it'll copy and parse the files into the current directory.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But I don't want to have all my templates in local, or pass the path every time!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sure, having everything in local can be bothersome,
especially if you're starting a project from a huge project template.&lt;/p&gt;
&lt;p&gt;To answer that, in the current version, kickstart supports cloning from a git remote by either HTTP(S), SSH or even git shortcuts!&lt;/p&gt;
&lt;p&gt;In that sense, all the following commands are perfectly valid and will clone from a git remote.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nohighlight&quot;&gt;$ kickstart git@gitlab.com:MyUser/MyTemplate
$ kickstart https://git.local/test
# With git shortcuts in the configuration, see https://stackoverflow.com/a/25975967/10165294
$ kickstart gl:MyUser/MyTemplate&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;In conclusion&lt;/h2&gt;
&lt;p&gt;While still young, this tool is already, as-is, really useful and can handle a lot of situations.&lt;/p&gt;
&lt;p&gt;Since the goal of this tool is to be as lightweight and basic as possible, you can have a fair
guarantee that it won't become an over-complex, feature-bloated, tool.&lt;/p&gt;
&lt;p&gt;Not every feature has been showcased in this article, so I can only recommend you to go to the &lt;a href=&quot;https://github.com/Keats/kickstart&quot;&gt;official Github repository&lt;/a&gt;,
and take a look at the &lt;code&gt;README.md&lt;/code&gt; file, which should contains every information you'd need to learn how to use it.&lt;/p&gt;
&lt;p&gt;As I publish this article, the official &lt;code&gt;v0.1.7&lt;/code&gt; version have been released, and you can find the relesae on the &lt;a href=&quot;https://github.com/Keats/kickstart/releases&quot;&gt;releases page&lt;/a&gt;.
If you'd prefer to be on the latest version, you can simply clone the repository, and, while inside it, run &lt;code&gt;cargo builld&lt;/code&gt; and have a working version just for you.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-14T14:17:29+00:00</dc:date>
</item>
<item rdf:about="https://www.junglecoder.com/blog/factorlang-review">
	<title>Andrew Owen (yumaikas): Factor: An impressive stack-based language environment</title>
	<link>https://www.junglecoder.com/blog/factorlang-review</link>
	<content:encoded>&lt;p&gt;Recently the &lt;a href=&quot;https://factorcode.org&quot;&gt;Factor&lt;/a&gt; programming language had a new 0.98 release, after a 4 year hiatus after the 0.97 release. Finding this on lobsters, I decided to take Factor for a spin again, after years of having left it mostly alone to work on PISC. I decided I wanted to try to build a (still slightly buggy) &lt;a href=&quot;https://gist.github.com/yumaikas/6c8aebf8b0baf20431e06bd20c47dec4&quot;&gt;4-function calculator&lt;/a&gt;, as I find that a good way to gauge how easy/hard it is to use a GUI system for small things, and as a way to gauge what Factor is like in general.&lt;/p&gt;

&lt;h3&gt;The (quite frankly) awesome&lt;/h3&gt;

&lt;p&gt;Probably by &lt;em&gt;far&lt;/em&gt; the most impressive part of Factor that I&amp;rsquo;ve seen so far: Factor is the second language I&amp;rsquo;ve come across that I&amp;rsquo;d comfortably take on a deserted island without an internet connection (the other being Go with it&amp;rsquo;s godoc server). This is due to the fact that a) 95% of all Factor documentation I&amp;rsquo;ve seen is accessible from the included Help browser, and b) the Factor debugger/inspector can inspect itself in great detail. This is the cherry atop Factor: You don&amp;rsquo;t just get a REPL, you also get a &lt;em&gt;really&lt;/em&gt; useful set of debugging tools (especially the object inspector), and can dig into any of the state in the system, and using the help tools, once you understand some basics, you stand a decent chance of being able to either correct the state, or diagnose the bug.&lt;/p&gt;

&lt;p&gt;This sort of tooling is something that SmallTalk is famous for, but any time I&amp;rsquo;ve tried SmallTalk, I&amp;rsquo;ve usually bounced off of it because most SmallTalk implementations end up living in their own world, making it hard to bring some of my favorite programming tools with me, and making it hard to interact with the outside world (footnote 3). Factor, on the other hand, even though it has an image that can updated to keep state around, and has a really good debugger, still integrates well with the outside world.&lt;/p&gt;

&lt;p&gt;Really well, in fact. It&amp;rsquo;s easy to scaffold a vocabulary &lt;code&gt;USE: tools.scaffold &amp;quot;vocabulary-name&amp;quot; scaffold-vocabulary&lt;/code&gt; , and then run &lt;code&gt;USE: editors.sublime&lt;/code&gt; (or emacs, or vim, or any of about 24 other fairly popular editors), and then run &lt;code&gt;&amp;quot;vocabulary-name&amp;quot; edit&lt;/code&gt; and have it open the vocabulary in the editor in question. This allows you to open up any of the Factor source code in the editor of your choice. And when you&amp;rsquo;re ready to start using/testing the vocabulary, running &lt;code&gt;&amp;quot;vocabulary-name&amp;quot; reload&lt;/code&gt; puts you right into compile-fixing mode, where you can fix the bug in question, and then reload the vocabulary. When I was working on a 4-function calculator using the Factor listener and Sublime Text, it was a &lt;em&gt;really&lt;/em&gt; tight feedback loop.&lt;/p&gt;

&lt;p&gt;The GUI framework has a pretty nifty sorta-FRP like approach to how to handles data binding in controls, allowing you to daisy chain models (data that can be updated over time) via arrows (models with a quotation they apply to a base model when it&amp;rsquo;s data changes).&lt;/p&gt;

&lt;p&gt;Also, Factor has a mostly working dark-mode setup (there are some sections of the inspector that have poor contrast, but the listener is in a good state), if you dislike the default black-on-white color scheme (I found it difficult for some of the late night hacking I was doing). Run the following commands in the listener (assuming Factor 0.98)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;USE: tools.scaffold 
scaffold-factor-boot-rc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then edit the .factor-boot-rc to look like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;USE: ui.theme.switching 

dark-mode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then then run &lt;code&gt;run-bootstrap-init save&lt;/code&gt; in the listener, and close and re-open the listener. Viola, Factor&amp;rsquo;s dark mode!&lt;/p&gt;

&lt;h3&gt;Consequences of (relative) obscurity&lt;/h3&gt;

&lt;p&gt;That being said, there are still a few rough edges with Factor. For one, even though most things are documented, and those that are not have easily accessible source, Factor itself has almost no Google presence, which means that you have to be comfortable digging though the included help docs a bit longer to sort things out. This played out in a few practical ways when I was working on the 4-function calculator. Until the end of the project, I missed that &lt;code&gt;gadgets&lt;/code&gt; (Factor&amp;rsquo;s equivalent for controls in WinForms) were subclasses of &lt;code&gt;rectangles&lt;/code&gt;, which meant that I could set their width and height by storing to the &lt;code&gt;dim&lt;/code&gt;(ension) on a gadget:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;factor&quot;&gt;&amp;quot;Test&amp;quot; &amp;lt;label&amp;gt; { 200 300 } &amp;gt;&amp;gt;dim &amp;quot;example of a 200x300 label&amp;quot; open-window 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ended up looking around the documentation about 4 times before I made that connection. This is the sort of question that would be on stack overflow for a more popular language.&lt;/p&gt;

&lt;p&gt;For another, I seemed to be running across rendering or state glitches in the listener that could cause buttons to be mislabeled. I&amp;rsquo;m unsure what was leading to it, but it was distracting, to say the least. The other thing with Factor that became evident was the singled threaded nature of it&amp;rsquo;s runtime (as of currently). When first making a search in the help system, it would lock up, sometimes as long as 10-15 seconds, as it was indexing or loading in the various articles and such into memory. This limitation has kept me from digging into some languages (like Ocaml, though there are a bunch of other reasons, like iffy Windows support) in the past, especially when alternatives like Go and Erlang with their strong multi-threaded runtimes exist, but I think I&amp;rsquo;m willing to look past it in Factor for now, especially since I hear that there is a half decent IPC story for Factor processes.&lt;/p&gt;

&lt;p&gt;The other consequence of all this was that it took me roughly 10-15 hours of noodling around with Factor, and writing an even smaller example GUI script to be able to get the linked calculator above done. I think I could build other new things with far less stumbling around, but it was a good reminder of how slow learning something new can be.&lt;/p&gt;

&lt;p&gt;The other minor frustration I have with Factor is the fact that any file that does much work tends to accrete quite a few imports in its &lt;code&gt;USING:&lt;/code&gt; line (the calculator I wrote has 23 imports across 4 lines, even though it&amp;rsquo;s only 100 lines of code). This is mostly due to a lot of various Factor systems being split into quite a few vocabularies. I could see this being helpful with compilation&lt;/p&gt;

&lt;h3&gt;Comparisons to PISC&lt;/h3&gt;

&lt;p&gt;Factor was a big inspiration for &lt;a href=&quot;https://pisc.junglecoder.com/&quot;&gt;Position Independent Source Code&lt;/a&gt; (PISC), especially since it gave me the idea of code quotations some basic ideas for a few stack shuffling operations and some combinators (like &lt;code&gt;when&lt;/code&gt; or &lt;code&gt;bi&lt;/code&gt;). Factor and PISC have diverged a decent amount, though Factor is far and away further down the general path I&amp;rsquo;d been wanting to take PISC in terms of documentation and interactivity. Revisiting it after spending 3 years of assorted free time working with PISC demonstrated that in a lot of ways.&lt;/p&gt;

&lt;p&gt;Factor has a much higher level of introspection. When making the calculator I only had to think in Factor, rather than thinking in both PISC and Go (which is common when writing PISC). I also didn&amp;rsquo;t have to rebuild many building blocks to get where I was going, like I would in PISC, as Slava and the other maintainers have done a &lt;em&gt;lot&lt;/em&gt; of the foundational work already. Revisiting Factor after having written so much PISC did make understanding the stack a lot easier. I imagine that stack management will be most people&amp;rsquo;s struggle with Factor. I&amp;rsquo;ve found that implementing a stack language helped me there, but for some people, they may just have to do some exercises with it.&lt;/p&gt;

&lt;h3&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;I do anticipate building more side-projects in Factor, as I&amp;rsquo;ve yet to try out the web framework, and I have a couple of ideas for websites in the back of my mind. There&amp;rsquo;s a &lt;em&gt;lot&lt;/em&gt; of vocabularies that come with the base Factor download. I get the feeling that I may be adding some to it in the future, though time will tell.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-14T14:17:27+00:00</dc:date>
</item>
<item rdf:about="https://medium.com/p/7eb491389b23">
	<title>Indrek Lasn (indreklasn): Want to become a top writer? Follow this simple framework and you will succeed</title>
	<link>https://medium.com/swlh/want-to-write-about-tech-follow-this-simple-framework-and-become-a-top-writer-7eb491389b23?source=rss-ce572601b7e------2</link>
	<content:encoded>&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*cVBgcFz9Df0vQj2H&quot; /&gt;“A sticker reading “good news is coming” on an advertising column” by &lt;a href=&quot;https://unsplash.com/@jontyson?utm_source=medium&amp;utm_medium=referral&quot;&gt;Jon Tyson&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;p&gt;Let’s face it — writing is hard. Writing to a tech savvy crowd is even harder. The tech industry is one of the most competitive and lucrative fields. It’s no surprise the demand for quality articles is very high. Everyone in the tech field is bright, hungry for knowledge and success. They won’t let you waste their time even if you tried.&lt;/p&gt;&lt;p&gt;Which is exactly why I’ve put together a small framework on how to write well and succeed at it.&lt;/p&gt;&lt;p&gt;I will do my best to extract my approach to writing so you can apply the same methods.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*_wkR7c3dkmElih6tjrSuXA.png&quot; /&gt;Hi, this is me!&lt;p&gt;Without further ado, let’s jump in!&lt;/p&gt;&lt;h3&gt;Persistence is key&lt;/h3&gt;&lt;p&gt;A river cuts through rock, not because of its power, but because of its persistence. First and most important rule is to have persistence and the “never give up” mentality. When I started writing, I had close to 100 readers per month, and I was very grateful for even that. Thank you!&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*C7K-rJerBhT5I15IWZBMLQ.jpeg&quot; /&gt;300k monthly views back in ‘17 December&lt;p&gt;If you like what you’re doing, keep doing it. If you don’t like it, don’t keep doing it. It’s easy as that — if you enjoy writing, keep doing it. Be open to criticism and feedback so you can improve. Never let anyone tell you how and what to say. Keep a healthy balance.&lt;/p&gt;&lt;p&gt;Come up with a realistic number of articles you can produce per month and stick with it. You will be surprised how much you can achieve in year if you follow this quick practise.&lt;/p&gt;&lt;h3&gt;Humility loves humor&lt;/h3&gt;&lt;p&gt;You are never too important. I’m never too important. No one is too important, ever. Even the most famous kings have fallen and so will we.&lt;/p&gt;&lt;p&gt;Be humble and don’t lose the bond between readers. Always consider your readers and be open for dialog. Don’t have &lt;a href=&quot;https://blog.codinghorror.com/strong-opinions-weakly-held/&quot;&gt;strong opinions weakly held&lt;/a&gt;.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*CWylVNTeCs7SoK3u0Mgwsg.png&quot; /&gt;Comment found on the internet&lt;p&gt;Besides, who doesn’t love jokes ❤&lt;/p&gt;&lt;h3&gt;Have something interesting to say&lt;/h3&gt;&lt;p&gt;Writing is a monologue, always write about something which provides value. When following this advice — don’t take it to the extreme. Your next article doesn’t have to carry the burden of discovering the cure for cancer — although that would definitely help.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*arD09HXVX9-jcc9C1zB4BA.png&quot; /&gt;These authors have something interesting to say&lt;p&gt;Why are some articles popular and some are not? It’s possible people don’t read some articles because they’re not interesting enough, right?&lt;/p&gt;&lt;blockquote&gt;A story should entertain the writer too — &lt;em&gt;Stephen King&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;It’s a very common feeling not having anything of value to say. Especially to a big audience. Which exactly brings me to my next point since they compliment each other.&lt;/p&gt;&lt;h3&gt;Read more than you write&lt;/h3&gt;&lt;p&gt;This one is obvious, but I also need to remind myself this. Reading will help you come up with new ideas and extend on ideas. The perfect time to pick up a book or browse through the dust of bookmarks is when the mind is blank.&lt;/p&gt;&lt;p&gt;Embrace it, own it and use it to your advantage. Having a blank mind is the perfect time for accepting new ideas.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/personal-growth/12-top-rated-courses-for-writers-1af0af23334a&quot;&gt;15 Top Rated Courses For Writers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/personal-growth/29-awesome-audiobooks-a30dc13b78b5&quot;&gt;29 Awesome Audiobooks&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Be trendy and irresistible&lt;/h3&gt;&lt;p&gt;That’s right, the subject matters a lot. Let’s say we have two articles:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The first article is about a new Javascript framework which will be next React and take over the world.&lt;/li&gt;&lt;li&gt;The second article is about the terms and conditions for the microwave.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Which one would you read?&lt;/p&gt;&lt;p&gt;Keep your eyes open and try to come up with new and fresh topics. Readers are demanding and won’t even click on articles which give the slightest scent of being boring. And why would they? There’s so much good material out there.&lt;/p&gt;&lt;p&gt;Find an interesting subject, have a great title and have something interesting to say.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*qUFYcgxQ-6CSx1AM&quot; /&gt;“Modern art piece featuring a halved orange with the rind painted blue on a blue background” by &lt;a href=&quot;https://unsplash.com/@codytdavis?utm_source=medium&amp;utm_medium=referral&quot;&gt;Cody Davis&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;p&gt;If you combine all these five tips, success is sure to follow. Tomorrow already starts today, pick up that pen or keyboard and start writing!&lt;/p&gt;&lt;p&gt;Thanks for reading! ❤&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.buymeacoffee.com/gd3oDXayV&quot;&gt;Buy Indrek Lasn a Coffee - BuyMeACoffee.com&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@wesharehoodies&quot;&gt;Indrek Lasn - Medium&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/lasnindrek&quot;&gt;Indrek Lasn (@lasnindrek) | Twitter&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;a href=&quot;https://medium.com/swlh&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*YqDjlKFwScoQYQ62DWEdig.png&quot; /&gt;&lt;/a&gt;&lt;h4&gt;This story is published in &lt;a href=&quot;https://medium.com/swlh&quot;&gt;The Startup&lt;/a&gt;, Medium’s largest entrepreneurship publication followed by 358,974+ people.&lt;/h4&gt;&lt;h4&gt;Subscribe to receive &lt;a href=&quot;http://growthsupply.com/the-startup-newsletter/&quot;&gt;our top stories here&lt;/a&gt;.&lt;/h4&gt;&lt;a href=&quot;https://medium.com/swlh&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*ouK9XR4xuNWtCes-TIUNAw.png&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7eb491389b23&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/swlh/want-to-write-about-tech-follow-this-simple-framework-and-become-a-top-writer-7eb491389b23&quot;&gt;Want to become a top writer? Follow this simple framework and you will succeed&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/swlh&quot;&gt;The Startup&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-14T14:09:33+00:00</dc:date>
</item>
<item rdf:about="tag:sgoel.org,2018-08-14:/posts/nim-first-impressions/">
	<title>Siddhant Goel (siddhantgoel): Nim: First impressions</title>
	<link>https://sgoel.org/posts/nim-first-impressions/</link>
	<content:encoded>&lt;p&gt;As someone who writes software for a living, I think it's a good idea to learn a
new language/technology every once in a while. It makes you think differently
from what you've been focusing on in your normal 9-to-5.&lt;/p&gt;
&lt;p&gt;In that spirit, I started playing around with &lt;a href=&quot;https://nim-lang.org/&quot;&gt;Nim&lt;/a&gt; last weekend. Nim is a neat
little language that has been around for a bit more than 10 years, but has been
(surprisingly) under the radar, at least if you compare it to how much publicity
Go and Rust generate.&lt;/p&gt;
&lt;p&gt;The promise looks quite nice - high performance, (optional) garbage collection,
dependency-free binaries, compilation to JavaScript (!), and a clean syntax that
at times reminds me of Python.&lt;/p&gt;
&lt;p&gt;After working through the &lt;a href=&quot;https://nim-lang.org/docs/tut1.html&quot;&gt;official tutorial&lt;/a&gt; and &lt;a href=&quot;https://nim-by-example.github.io/getting_started/&quot;&gt;Nim by Example&lt;/a&gt; over the
weekend, I've come to really like the language. There are some quirks that I
wish weren't there, but I'll try to summarize my first impressions in the
following sections.&lt;/p&gt;
&lt;h3&gt;The Compiler&lt;/h3&gt;
&lt;p&gt;If you're used to writing code in an interpreted language, &quot;fighting the
compiler&quot; can be a thing.&lt;/p&gt;
&lt;p&gt;But I'm pleased to report that the Nim compiler, while pedantic like all others,
is actually quite helpful. The error messages are (for the most part) concise
and tell you exactly what you should do to turn your code into a binary.
And it's always nice to catch possible runtime errors at compile time.&lt;/p&gt;
&lt;p&gt;For example, consider the following snippet that asks the user to enter a
number.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;strutils&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;What's your number? &amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strutils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;One&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Two&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This fails to compile with the error message &lt;code&gt;not all cases are covered&lt;/code&gt;, which
means that the compiler noticed that your &lt;code&gt;case&lt;/code&gt; statement is not checking all
the possible cases and that this may cause unexpected behavior at runtime.&lt;/p&gt;
&lt;h3&gt;Simple, but not really&lt;/h3&gt;
&lt;p&gt;Nim looks small and simple on the surface, but it's a fairly advanced language.
There are features that let you do extremely funky things. You probably won't
end up using those features in daily use (well, depending on what you're using
it for), but you know that they are there.&lt;/p&gt;
&lt;p&gt;I would argue that this is nice because the language feels approachable. It
feels like you can hold the entire language in your head (even though that may
not be the case). I don't feel the urge to hide in a corner on seeing Nim code
as a beginner to the language. At the same time you know it in the back of your
head that when you need to do advanced things, you can.&lt;/p&gt;
&lt;h3&gt;Dependency-free binaries&lt;/h3&gt;
&lt;p&gt;Coming from a Python world, this is &lt;strong&gt;huge&lt;/strong&gt;. The &lt;strong&gt;simplest&lt;/strong&gt; Python
deployments can still be fairly tricky to get right. There's the whole dance of
&lt;code&gt;virtualenv&lt;/code&gt;s, installing dependencies, n-number of decisions you need to take
before even starting. And god help you if you need to install something that's
not pure Python.&lt;/p&gt;
&lt;p&gt;Nothing is simpler than compiling the project and putting &lt;strong&gt;one binary&lt;/strong&gt; on the
server and seeing things work.&lt;/p&gt;
&lt;h3&gt;Compile-time constants&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const value = doSomethingExpensive()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;value&lt;/code&gt; is set here at &lt;strong&gt;compile-time&lt;/strong&gt;. Of course, if &lt;code&gt;doSomethingExpensive&lt;/code&gt;
cannot be worked out at compile-time, the compiler will shout at you. But when
you're looking to reduce every single bit of runtime overhead, this is extremely
valuable.&lt;/p&gt;
&lt;h3&gt;Productivity&lt;/h3&gt;
&lt;p&gt;It was fascinating to observe that after spending effectively only a few hours
with the language, I felt like I was in a position to write &lt;strong&gt;working&lt;/strong&gt; code.
I've had multiple moments writing Nim code when you write something and then
look at it and then go &quot;was that it?&quot;.&lt;/p&gt;
&lt;p&gt;The last time something like this happened was when I started learning Python.
It was astonishing that a programming language could put you in a position where
you can write &lt;strong&gt;working&lt;/strong&gt; code so quickly.&lt;/p&gt;
&lt;h3&gt;Variable assignment&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var x, y = 3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This sets the value of both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to be &lt;code&gt;3&lt;/code&gt;, which seems slightly
confusing. Go does not compile something similar, complaining that there are 2
variables but 1 value.&lt;/p&gt;
&lt;p&gt;To be honest, this is not a huge deal, but I can definitely see myself debugging
bugs caused by this behavior.&lt;/p&gt;
&lt;h3&gt;Methods&lt;/h3&gt;
&lt;p&gt;From &lt;a href=&quot;https://nim-lang.org/docs/tut2.html#object-oriented-programming-methods&quot;&gt;methods&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Adding a method to a class the programmer has no control over is impossible
or needs ugly workarounds.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is mentioned under the section &quot;disadvantages&quot;. I don't think this is a
disadvantage. I would actually argue that this keeps the programmer from doing
funky things that harm readability.&lt;/p&gt;
&lt;p&gt;I once spent 2 days trying to debug an issue in a Ruby on Rails codebase where a
third-party gem was monkey-patching some functions defined in &lt;code&gt;ActiveRecord&lt;/code&gt;.
This was a classic example of modifying something you're not supposed to modify.&lt;/p&gt;
&lt;h3&gt;Module import semantics&lt;/h3&gt;
&lt;p&gt;So far this has been my biggest complaint with Nim.&lt;/p&gt;
&lt;p&gt;Consider this simple program.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strutils&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strutils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last three lines are all doing the same thing. So not only is the &lt;code&gt;split()&lt;/code&gt;
function suddenly available on strings, but is also (optionally) a part of the
local namespace. It's difficult to say if &lt;code&gt;split&lt;/code&gt; is a part of &lt;code&gt;strutils&lt;/code&gt; or a
built-in function or a function defined on &lt;code&gt;string&lt;/code&gt; types (if you didn't notice
the &lt;code&gt;import strutils&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;After writing Python code for slightly more than 10 years, I have &quot;explicit is
better than implicit&quot; plastered all over my brain. So such behavior makes me a
little uneasy.&lt;/p&gt;
&lt;p&gt;From what I understand, this is a consequence of &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Function_Call_Syntax&quot;&gt;Uniform Function Call
Syntax&lt;/a&gt;, but IMHO this feels like a step back in terms of being able to look at
a piece of code and immediately make sense out of it.&lt;/p&gt;
&lt;p&gt;But the Nim developers know this complaint. There's already a &lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8013&quot;&gt;Github issue&lt;/a&gt;,
and the &lt;a href=&quot;https://forum.nim-lang.org/t/3783&quot;&gt;forum thread&lt;/a&gt; even has a proposal that might be implemented in one of
the next releases. So I'm hopeful!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Overall, I like Nim. If it's not painfully obvious, this article barely
scratched the surface. There is so much more to the language that I haven't
written about here for the sake of keeping this article short.&lt;/p&gt;
&lt;p&gt;There are some design-things which I either don't get or don't agree with. But
on the other hand it provides many nice features without necessarily
compromising on speed or introducing complexity. My first attempt at picking up
one of the new systems-programming languages was at Rust, but it introduced so
much complexity that it was overwhelming.&lt;/p&gt;
&lt;p&gt;Nim feels approachable, and gives you the feeling that it's powerful for when
you need something more than just simple.&lt;/p&gt;
&lt;p&gt;Given that I've spent less than a week working with it and still like it so
much, I can definitely see myself writing more Nim code in the future.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-13T22:00:00+00:00</dc:date>
</item>
<item rdf:about="https://itscode.red/posts/announcing-pikatrack-an-open-source-fitness-tracker/">
	<title>Luke Picciau (user545): Announcing Pikatrack an Open Source Fitness Tracker</title>
	<link>https://itscode.red/posts/announcing-pikatrack-an-open-source-fitness-tracker/</link>
	<content:encoded>Just a short post today to show off what I have been working on for the last few weeks. I have been busy making a website for activity tracking primarily for cycling and running. The website is 100% open source and you can check it out on GitLab. Currently the project is in a very early stage and you can&amp;rsquo;t do a whole lot but I will be updating this blog with the progress.</content:encoded>
	<dc:date>2018-08-13T13:36:37+00:00</dc:date>
</item>
<item rdf:about="https://www.ponylang.org/blog/2018/08/last-week-in-pony---august-12-2018/">
	<title>Ponylang (SeanTAllen): Last Week in Pony - August 12, 2018</title>
	<link>https://www.ponylang.org/blog/2018/08/last-week-in-pony---august-12-2018/</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Last Week In Pony&lt;/em&gt; is a weekly blog post to catch you up on the latest news for the Pony programming language. To learn more about Pony check out &lt;a href=&quot;https://www.ponylang.org/blog/ponylang.org&quot;&gt;our website&lt;/a&gt;, our Twitter account &lt;a href=&quot;https://twitter.com/ponylang&quot;&gt;@ponylang&lt;/a&gt;, our &lt;a href=&quot;https://pony.groups.io/g/user&quot;&gt;users&amp;rsquo; mailing list&lt;/a&gt; or join us &lt;a href=&quot;https://webchat.freenode.net/?channels=%23ponylang&quot;&gt;on IRC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Got something you think should be featured? There&amp;rsquo;s a GitHub issue for that! Add a comment to the &lt;a href=&quot;https://github.com/ponylang/ponylang.github.io/issues?q=is%3Aissue+is%3Aopen+label%3Alast-week-in-pony&quot;&gt;open &amp;ldquo;Last Week in Pony&amp;rdquo; issue&lt;/a&gt;.
&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-13T00:46:37+00:00</dc:date>
</item>
<item rdf:about="http://www.petecorey.com/blog/2018/08/13/algorithmically-fingering-guitar-chords-with-elixir/">
	<title>Pete Corey (petecorey): Algorithmically Fingering Guitar Chords with Elixir</title>
	<link>http://www.petecorey.com/blog/2018/08/13/algorithmically-fingering-guitar-chords-with-elixir/</link>
	<content:encoded>&lt;p&gt;Last time we wrote about using Elixir to generate all possible voicings of a given guitar chord &lt;a href=&quot;http://www.petecorey.com/blog/2018/07/30/voice-leading-with-elixir/&quot;&gt;to find the voicing with the best voice leading between another chord&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While this was great, there were several issues. We were conflating the idea of “musical distance” and “physical distance” when calculating optimal voice leading, and we weren’t taking the playability of the progressions we were generating into account.&lt;/p&gt;

&lt;p&gt;To address both of these issues, we need to know not only &lt;em&gt;which&lt;/em&gt; voicings are possible for a given chord, but also &lt;em&gt;how&lt;/em&gt; each of those voicings can be played. We need to generate all possible fingerings for a given guitar chord voicing.&lt;/p&gt;

&lt;p&gt;This sounds like a fantastic excuse to flex our Elixir muscles!&lt;/p&gt;

&lt;h2 id=&quot;calculating-fingerings&quot;&gt;Calculating Fingerings&lt;/h2&gt;

&lt;p&gt;We’ll start our journey into calculating all possible fingerings for a given guitar chord by creating a new Elixir module, &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Chord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Fingering&lt;/span&gt;&lt;/code&gt;, and a new &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; function:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defmodule Chord.Fingering do
  def fingerings(chord)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our high level plan of attack for computing possible fingerings is fairly straight forward. Given that each &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt; is &lt;a href=&quot;http://www.petecorey.com/blog/2018/07/30/voice-leading-with-elixir#rendering-chords&quot;&gt;a six-element array of frets being played&lt;/a&gt;, like &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;, we want to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Attach all possible fingerings that can be played on each fret.&lt;/li&gt;
  &lt;li&gt;Choose each possible finger in turn, sieve out all subsequent impossible fingers, and recursively repeat to get all possible fingerings.&lt;/li&gt;
  &lt;li&gt;Perform any necessary cleanup.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our final &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; function makes these steps fairly explicit:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def fingerings(chord),
  do:
    chord
    |&amp;gt; attach_possible_fingers()
    |&amp;gt; choose_and_sieve()
    |&amp;gt; cleanup()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;possible-fingers-sieves&quot;&gt;Possible Fingers? Sieves?&lt;/h2&gt;

&lt;p&gt;Before we dive deeper into our solution, we should take a detour and talk about how we’re computing fingerings.&lt;/p&gt;

&lt;p&gt;Our solution takes inspiration from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&quot;&gt;“Sieve of Eratosthenes”&lt;/a&gt;, which is a clever technique for calculating prime numbers. The basic idea of a “sieve” is that a choice made &lt;em&gt;now&lt;/em&gt; can be used to filter out &lt;em&gt;future&lt;/em&gt; unwanted results.&lt;/p&gt;

&lt;p&gt;To bring it back to our situation, imagine we’re trying to play a D minor chord on the fifth fret:&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/algorithmically-fingering-guitar-chords-with-elixir/Dm.png&quot; /&gt;
  &lt;p&gt;Our D minor chord.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;If we were to start fingering this chord by placing our second finger on the low D note, we know that we couldn’t use our first finger on any of the other notes in the chord. Our first finger would have to wrap over or sneak under our second finger to reach those notes, and that’s essentially impossible:&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/algorithmically-fingering-guitar-chords-with-elixir/sieve.png&quot; /&gt;
  &lt;p&gt;We can't use our first finger anywhere!&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;So by choosing to use our second finger on the fifth string and fret, we can sieve out the possibility of using our first finger on any of the remaining notes.&lt;/p&gt;

&lt;p&gt;If we think about it, we can also sieve out the possibility of re-using our second finger. A finger can’t be re-used unless it’s forming a bar or a double-stop on an adjacent fret.&lt;/p&gt;

&lt;p&gt;Our remaining set of possible fingers for the remaining notes are fingers three and four.&lt;/p&gt;

&lt;p&gt;By recursively picking another of our possible fingers on another string and applying our sieving rules, we can come up with our entire set of possible fingers.&lt;/p&gt;

&lt;h2 id=&quot;choosing-and-sieving&quot;&gt;Choosing and Sieving&lt;/h2&gt;

&lt;p&gt;The meat of our algorithm lives in the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;choose_and_sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; function, which takes an initial &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt;, complete with “possible fingers”, and a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;/code&gt; argument that defaults to an empty list:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp choose_and_sieve(chord, fingerings \\ [])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;/code&gt; argument will be used to hold each finger choice for our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt;, as we choose them.&lt;/p&gt;

&lt;p&gt;Our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;choose_and_sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; function expects each element of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt; to be a two-element tuple, where the first element is the fret being played, and the second element is the set of possible fingers that could be chosen to play that fret.&lt;/p&gt;

&lt;p&gt;Our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;attach_possible_fingers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; helper function transforms our initial chord into that expected structure:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp attach_possible_fingers(chord),
  do: Enum.map(chord, &amp;amp;{&amp;amp;1, 1..4})
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Our implementation of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;choose_and_sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; is recursive, so we should start our implementation by defining our base case. The base case for &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;choose_and_sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; is triggered when &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt; is empty. At that point, we’ve handled every note in the chord, and need to return our fully constructed fingering:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp choose_and_sieve([], fingerings),
  do:
    fingerings
    |&amp;gt; Enum.reverse()
    |&amp;gt; List.to_tuple()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we’ll soon see, chosen fingers are appended onto &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;/code&gt; in reverse order, so we &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; our list to reorient our strings. Lastly we turn our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;/code&gt; list into a tuple so that we can safely &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; our resulting list of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;/code&gt; without losing our groupings.&lt;/p&gt;

&lt;p&gt;Once flattened, our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; function maps over this final list and converts each tuple back into an array:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp cleanup(fingerings),
  do: Enum.map(fingerings, &amp;amp;Tuple.to_list/1)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Moving on from our base case, it’s time to start thinking of other simple to handle situations.&lt;/p&gt;

&lt;p&gt;If the next element in our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt; list is an unplayed string (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;), we add it to our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;/code&gt; list and designate it to be played with no finger (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;), and recursively call &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;choose_and_sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; on our remaining &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp choose_and_sieve([{nil, _possible_fingers} | chord], fingerings),
  do: choose_and_sieve(chord, [{nil, nil} | fingerings])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, if the next element of our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt; is an open string, we’re recursively call &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chose_and_sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt;, passing in our remaining &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt;, and our set of fingers appended with the open string played with no finger (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;):&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp choose_and_sieve([{0, _possible_fingers} | chord], fingerings),
  do: choose_and_sieve(chord, [{0, nil} | fingerings])
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;In the case of actually needing to finger a note, the situation becomes more complicated. In that case, the next element of our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt; is a fret and some set of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;possible_fingers&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;post-footer&quot;&gt;
    &lt;div class=&quot;signup-form&quot;&gt;
        &lt;form action=&quot;http://east5th.us11.list-manage.com/subscribe/post?u=f8833fd40e2b1b28545d9f382&amp;id=c56ceba687&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; target=&quot;_blank&quot;&gt;
            &lt;p&gt;Sign up for &lt;a href=&quot;http://www.petecorey.com/newsletter&quot;&gt;Pete's mailing list&lt;/a&gt; and have fresh content delivered to you, hot off the presses every week!&lt;/p&gt;
            &lt;div class=&quot;email-wrapper&quot;&gt;
                &lt;input type=&quot;text&quot; value=&quot;&quot; name=&quot;FNAME&quot; class=&quot;&quot; id=&quot;mce-FNAME&quot; /&gt;&lt;!--
                                                                                                           --&gt;&lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; id=&quot;mce-EMAIL&quot; /&gt;&lt;!--
                                                                                                                                                                                                    --&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; /&gt;
            &lt;/div&gt;
            &lt;div&gt;&lt;input type=&quot;text&quot; name=&quot;b_f8833fd40e2b1b28545d9f382_c56ceba687&quot; tabindex=&quot;-1&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We’ll map over each of the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;possible_fingers&lt;/span&gt;&lt;/code&gt;, appending each &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;finger&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fret&lt;/span&gt;&lt;/code&gt; to our list of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;/code&gt;, sieving out any now-impossible &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;possible_fingerings&lt;/span&gt;&lt;/code&gt; from the remaining notes in our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt;, and then recursively calling our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;choose_and_sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; function with our newly sieved &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;new_fingerings&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp choose_and_sieve([{fret, possible_fingers} | chord], fingerings),
  do:
    possible_fingers
    |&amp;gt; Enum.map(fn finger -&amp;gt;
      new_fingerings = [{fret, finger} | fingerings]

      chord
      |&amp;gt; sieve_chord(new_fingerings)
      |&amp;gt; choose_and_sieve(new_fingerings)
    end)
    |&amp;gt; List.flatten()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;sieve_chord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; helper function maps over each of the notes in what’s left of our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt;, and updates the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;possible_fingers&lt;/span&gt;&lt;/code&gt; tuple element to sieve any fingerings that are now deemed impossible to play after placing our most recent finger:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp sieve_chord(chord, fingerings),
  do:
    chord
    |&amp;gt; Enum.map(fn {fret, possible_fingers} -&amp;gt;
      {fret, sieve_fingers(possible_fingers, fret, fingerings)}
    end)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;sieve_fingers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;/code&gt; helper function is where we make real decisions about the behavior of our fingering algorithm. The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;sieve_fingers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;/code&gt; function itself is fairly straight forward. It simply rejects and &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;possible_fingers&lt;/span&gt;&lt;/code&gt; that are considered “bad” by our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;bad_finger?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;/code&gt; helper function:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp sieve_fingers(possible_fingers, fret, fingerings),
  do: Enum.reject(possible_fingers, &amp;amp;bad_finger?(fret, &amp;amp;1, fingerings))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;bad_finger?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;/code&gt; function runs each &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;finger&lt;/span&gt;&lt;/code&gt;/&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fret&lt;/span&gt;&lt;/code&gt; combinations through four rules used by our algorithm to determine if a finger choice is “impossible”, and should be culled from our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;possible_fingers&lt;/span&gt;&lt;/code&gt; set:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp bad_finger?(fret, finger, fingerings),
  do:
    Enum.any?([
      fret_above_finger_below?(fret, finger, fingerings),
      fret_below_finger_above?(fret, finger, fingerings),
      same_finger?(fret, finger, fingerings),
      impossible_bar?(fret, finger, fingerings)
    ])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If any of those rules are violated, the finger is rejected.&lt;/p&gt;

&lt;p&gt;The first two rules check if a possible finger would need to stretch over or under an already placed finger, respectively:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp fret_above_finger_below?(fret, finger, [{new_fret, new_finger} | _]),
  do: fret &amp;gt; new_fret &amp;amp;&amp;amp; finger &amp;lt; new_finger

defp fret_below_finger_above?(fret, finger, [{new_fret, new_finger} | _]),
  do: fret &amp;lt; new_fret &amp;amp;&amp;amp; finger &amp;gt; new_finger
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The third rule verifies that no finger can be used twice, unless when performing a bar or double-stop over adjacent frets:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp same_finger?(fret, finger, [{new_fret, new_finger} | _]),
  do: finger == new_finger &amp;amp;&amp;amp; fret != new_fret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we need to prevent “impossible bars”, or bars that would mute notes played on lower frets:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp impossible_bar?(_fret, finger, fingerings = [{new_fret, _} | _]),
  do:
    fingerings
    |&amp;gt; Enum.filter(fn {fret, _finger} -&amp;gt; fret &amp;gt; new_fret end)
    |&amp;gt; Enum.map(fn {_fret, finger} -&amp;gt; finger end)
    |&amp;gt; Enum.member?(finger)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-results&quot;&gt;The Results&lt;/h2&gt;

&lt;p&gt;Now that we’ve implemented our fingering algorithm, let’s try a few examples.&lt;/p&gt;

&lt;p&gt;We’ll start by calculating the possible fingerings for the D minor chord we’ve been using as an example. Fingering suggestions are listed below each string:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
[nil, 5, 7, 7, 6, nil]
|&amp;gt; Chord.Fingering.fingerings()
|&amp;gt; Enum.map(&amp;amp;Chord.Renderer.to_string/1)
|&amp;gt; Enum.join(&quot;\n\n&quot;)
|&amp;gt; IO.puts
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/algorithmically-fingering-guitar-chords-with-elixir/Dm-voicings.png&quot; /&gt;
  &lt;p&gt;Fingerings for our D minor chord.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Awesome! The first suggested bar can be difficult to play, but with some practice doing &lt;a href=&quot;http://forums.tedgreene.com/post/how-to-do-a-a-ted-greene-double-stop-8526262&quot;&gt;Ted Greene-style double-stops&lt;/a&gt;, it’s manageable. The second and third suggestions are what I would normally reach for.&lt;/p&gt;

&lt;p&gt;Another interesting example is an open G major shape:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
[3, 2, 0, 0, 3, 3]
|&amp;gt; Chord.Fingering.fingerings()
|&amp;gt; Enum.map(&amp;amp;Chord.Renderer.to_string/1)
|&amp;gt; Enum.join(&quot;\n\n&quot;)
|&amp;gt; IO.puts
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/algorithmically-fingering-guitar-chords-with-elixir/G-voicings.png&quot; /&gt;
  &lt;p&gt;Fingerings for our G chord.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The first few fingering suggestions make sense, but as we get closer to the end of the list, some of the suggestions are increasingly difficult to play. I don’t think I’ll ever be able to play this fingering:&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/algorithmically-fingering-guitar-chords-with-elixir/G-bad-voicing.png&quot; /&gt;
  &lt;p&gt;An &quot;impossible&quot; to play fingering.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;As a human, I can explain to you why this is difficult to play, but I haven’t been able to come up with a general rule to add to our rule set that would prevent these kinds of fingerings from being suggested. At this point, I’d rather have the algorithm present &lt;em&gt;potentially impossible&lt;/em&gt; fingerings, than have it over-aggressively prune &lt;em&gt;possible&lt;/em&gt; fingerings from the result set.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next?&lt;/h2&gt;

&lt;p&gt;In my previous article on &lt;a href=&quot;http://www.petecorey.com/blog/2018/07/30/voice-leading-with-elixir/&quot;&gt;“Voice Leading with Elixir”&lt;/a&gt;, I mentioned that I was conflating the ideas of “musical distance” and “physical distance”. In terms of voice leading, all I really care about is optimizing a chord progression for musical distance. But as a guitar player, I also want to consider “physical distance”.&lt;/p&gt;

&lt;p&gt;If a set of chords all have the same “musical distance” from a given starting chord, I want to choose the chord that has the lowest “physical distance”. By “physical distance”, I mean literally fret distance, but also how difficult it is to transition from one chord to another. Do I just need to slide one finger? That’s easy! Do I need to lift and replace three fingers while sliding the fourth? That’s not so easy…&lt;/p&gt;

&lt;p&gt;We can’t calculate the “physical distance” between chords unless we know the fingerings for the chords in question. Now that we know the potential fingerings for a given chord, we can compute a (modified) &lt;a href=&quot;https://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;levenshtein distance&lt;/a&gt; between the fingerings of two chords!&lt;/p&gt;

&lt;p&gt;Why is that cool?&lt;/p&gt;

&lt;p&gt;Once that’s done, we’ll be able to take a starting chord (optionally with a starting fingering), and find the best voicing of the landing chord in terms of voice leading and ease of playability!&lt;/p&gt;

&lt;p&gt;Be sure to check out &lt;a href=&quot;https://github.com/pcorey/chord/&quot;&gt;the entire project on Github&lt;/a&gt;, and stay tuned for more.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-13T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://patrick.marchand.ski/tech/run-bsd.html">
	<title>Patrick Marchand (superpat): Run BSD</title>
	<link>https://patrick.marchand.ski/tech/run-bsd.html</link>
	<content:encoded>&lt;h1 id=&quot;https://patrick.marchand.skiRun%20BSD&quot;&gt;Run BSD&lt;/h1&gt;

&lt;p&gt;By reading this blog, you will probably notice that I'm a bit a BSD fan. &lt;/p&gt;

&lt;p&gt;Roman Zolotarev hosts a series of stories about BSD users on his &lt;a href=&quot;https://patrick.marchand.skihttps://www.bsdjobs.com/&quot;&gt;BSD job board&lt;/a&gt;. There are a lot of fascinating stories about how people got into and / or use BSD.&lt;/p&gt;

&lt;p&gt;You can find mine &lt;a href=&quot;https://patrick.marchand.skihttps://www.bsdjobs.com/people/mathuin.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-12T15:00:00+00:00</dc:date>
</item>
<item rdf:about="https://vfoley.xyz/rust-compile-speed-tips/">
	<title>Vincent (vfoley): How to alleviate the pain of Rust compile times</title>
	<link>https://vfoley.xyz/rust-compile-speed-tips/</link>
	<content:encoded>&lt;p&gt;A few days ago, I wrote about two &lt;a href=&quot;https://vfoley.xyz/rust-at-work/&quot;&gt;Rust pain points&lt;/a&gt; when using Rust at work.  One of these points were the long compile times.  In this post, I want to share a few tips that can help alleviate that pain.&lt;/p&gt;

&lt;h2 id=&quot;use-cargo-check&quot;&gt;Use &lt;code&gt;cargo check&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;We typically use the compiler for two reasons: to verify if the syntax and/or types are correct and to generate a runnable program.  When compiling a program, especially a release build, the majority of the time is spent generating LLVM bytecode and optimizing that bytecode.  If you only want to know whether your 3-line change typechecks, you don&amp;rsquo;t want to wait for the optimizer.&lt;/p&gt;

&lt;p&gt;For this reason, Cargo has a subcommand called &lt;code&gt;check&lt;/code&gt; that only invokes the front-end.  It completes faster than a debug build and much faster than a release build.&lt;/p&gt;

&lt;p&gt;As an example, here are the timing results of &lt;code&gt;cargo check&lt;/code&gt; and &lt;code&gt;cargo build&lt;/code&gt; for my personal project, ppbert.  (The benchmarks are performed by &lt;a href=&quot;https://github.com/sharkdp/hyperfine/&quot;&gt;hyperfine&lt;/a&gt;.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Benchmark #1: cargo clean &amp;amp;&amp;amp; cargo check

  Time (mean ± σ):      8.131 s ±  0.424 s    [User: 24.234 s, System: 1.245 s]

  Range (min … max):    7.529 s …  8.845 s

Benchmark #2: cargo clean &amp;amp;&amp;amp; cargo build

  Time (mean ± σ):     16.904 s ±  0.794 s    [User: 52.009 s, System: 2.240 s]

  Range (min … max):   15.728 s … 18.098 s

Benchmark #3: cargo clean &amp;amp;&amp;amp; cargo build --release

  Time (mean ± σ):     48.454 s ±  2.540 s    [User: 145.644 s, System: 3.205 s]

  Range (min … max):   46.229 s … 54.107 s

Summary

  'cargo clean &amp;amp;&amp;amp; cargo check' ran
    2.08x faster than 'cargo clean &amp;amp;&amp;amp; cargo build'
    5.96x faster than 'cargo clean &amp;amp;&amp;amp; cargo build --release'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From a clean slate, &lt;code&gt;cargo check&lt;/code&gt; is 2x faster than &lt;code&gt;cargo build&lt;/code&gt; and 6x faster than &lt;code&gt;cargo build --release&lt;/code&gt;.  During development, when you just want to check that what you wrote is correct, definitely reach for &lt;code&gt;cargo check&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;use-sccache&quot;&gt;Use &lt;code&gt;sccache&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;A co-worker introduced me to &lt;a href=&quot;https://github.com/mozilla/sccache/&quot;&gt;&lt;code&gt;sccache&lt;/code&gt;&lt;/a&gt;, a compilation caching service by Mozilla that is compatible with Rust.  It will cache the build artifacts that Cargo generates, so if you &lt;code&gt;cargo clean&lt;/code&gt; your project or go to work on a second project that shares dependencies with the first one, you won&amp;rsquo;t have to rebuild everything.&lt;/p&gt;

&lt;p&gt;You can install &lt;code&gt;sccache&lt;/code&gt; with Cargo: &lt;code&gt;cargo install sccache&lt;/code&gt;.  To activate &lt;code&gt;sccache&lt;/code&gt;, add the following line to your &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export RUSTC_WRAPPER=sccache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here are the time differences.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Benchmark #1: cargo clean &amp;amp;&amp;amp; cargo build

  Time (mean ± σ):     15.726 s ±  0.330 s    [User: 50.183 s, System: 2.210 s]

  Range (min … max):   15.148 s … 16.210 s

Benchmark #2: cargo clean &amp;amp;&amp;amp; RUSTC_WRAPPER=sccache cargo build

  Time (mean ± σ):      6.877 s ±  4.665 s    [User: 6.964 s, System: 0.916 s]

  Range (min … max):    5.135 s … 20.136 s

  Warning: The first benchmarking run for this command was
  significantly slower than the rest (20.136 s). This could be caused
  by (filesystem) caches that were not filled until after the first
  run. You should consider using the '--warmup' option to fill those
  caches before the actual benchmark. Alternatively, use the
  '--prepare' option to clear the caches before each timing run.

Summary

  'cargo clean &amp;amp;&amp;amp; RUSTC_WRAPPER=sccache cargo build' ran
    2.29x faster than 'cargo clean &amp;amp;&amp;amp; cargo build'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given the ease of installing and configuring &lt;code&gt;sccache&lt;/code&gt;, I see no reason not to use it and get that 2x speed boost.  One downside of &lt;code&gt;sccache&lt;/code&gt;: it won&amp;rsquo;t make your continuous integration builds faster.  (You could configure &lt;code&gt;sccache&lt;/code&gt; to use an S3 bucket, but I prefer to have completely clean builds from my CI.)&lt;/p&gt;

&lt;h2 id=&quot;avoid-lto&quot;&gt;Avoid LTO&lt;/h2&gt;

&lt;p&gt;LTO is the acronym for link-time optimization.  Compilers build and optimize compilation units individually.  LTO is a mechanism for taking those individually-optimized object files and finding more opportunities for optimization when they are considered as a group.  This is great if you want to have the fastest possible program, but the price you pay are higher compilation times.  In Rust, the compilation unit is the crate; if the heavy computations are all done in your crate, then maybe LTO isn&amp;rsquo;t necessary.&lt;/p&gt;

&lt;p&gt;Here is the difference in execution time of ppbert with and without LTO on a 100 MiB .bert2 file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Benchmark #1: /tmp/ppbert-without-lto -2 /tmp/100m.bert2

  Time (mean ± σ):      1.926 s ±  0.005 s    [User: 1.308 s, System: 0.618 s]

  Range (min … max):    1.921 s …  1.937 s

Benchmark #2: /tmp/ppbert-with-lto -2 /tmp/100m.bert2

  Time (mean ± σ):      1.887 s ±  0.012 s    [User: 1.273 s, System: 0.613 s]

  Range (min … max):    1.867 s …  1.905 s

Summary

  '/tmp/ppbert-with-lto -2 /tmp/100m.bert2' ran
    1.02x faster than '/tmp/ppbert-without-lto -2 /tmp/100m.bert2'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a slight difference (which is why I enable LTO), but let&amp;rsquo;s look at what LTO does to compile times (with sccache enabled):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Benchmark #1: sed -i &amp;quot;s/lto.*/lto=false/&amp;quot; Cargo.toml &amp;amp;&amp;amp; cargo clean &amp;amp;&amp;amp; cargo build --release

  Time (mean ± σ):      5.793 s ±  0.075 s    [User: 11.390 s, System: 0.767 s]

  Range (min … max):    5.693 s …  5.901 s

Benchmark #2: sed -i &amp;quot;s/lto.*/lto=true/&amp;quot; Cargo.toml &amp;amp;&amp;amp; cargo clean &amp;amp;&amp;amp; cargo build --release

  Time (mean ± σ):     18.483 s ±  0.321 s    [User: 34.288 s, System: 1.182 s]

  Range (min … max):   17.971 s … 18.893 s

Summary

  'sed -i &amp;quot;s/lto.*/lto=false/&amp;quot; Cargo.toml &amp;amp;&amp;amp; cargo clean &amp;amp;&amp;amp; cargo build --release' ran
    3.19x faster than 'sed -i &amp;quot;s/lto.*/lto=true/&amp;quot; Cargo.toml &amp;amp;&amp;amp; cargo clean &amp;amp;&amp;amp; cargo build --release'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LTO makes the compilation of ppbert 300% longer for a 2% speed gain at run-time.  If you have a project that you find too long to build, I encourage you to measure the compile times with and without LTO, and the execution speed with and without LTO.  Maybe you&amp;rsquo;ll find (like I did in a project at work) that you don&amp;rsquo;t want to enable LTO.&lt;/p&gt;

&lt;h2 id=&quot;control-your-dependencies&quot;&gt;Control your dependencies&lt;/h2&gt;

&lt;p&gt;Rust has a rich ecosystem, and every day we have access to more quality crates.  This is mostly a blessing, but more crates mean more compilation, and this has a negative effect on your compile times.  Now, don&amp;rsquo;t shun all dependencies and write everything yourself!  Rather, make sure that the crates your bring in pay for themselves.&lt;/p&gt;

&lt;p&gt;One thing that you can do to control dependencies is to examine your depdendencies and see if they have features that you can disable.  For instance, in ppbert I use &lt;a href=&quot;https://clap.rs&quot;&gt;clap&lt;/a&gt; to parse command-line arguments; by default, clap colors its output and offers suggestions when the user makes a spelling mistake.  Some people like these features, but I&amp;rsquo;m not a fan myself.  Fortuately, the authors of clap have made such features optional.  So I am able to deactivate what I don&amp;rsquo;t need, and not pay the compilation price for it.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the dependency tree of clap with default-features enabled, and without.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rg default-features Cargo.toml &amp;amp;&amp;amp; cargo tree -p clap
33:default-features=true
clap v2.31.2
├── ansi_term v0.11.0
├── atty v0.2.11
│   └── libc v0.2.42
├── bitflags v1.0.3
├── strsim v0.7.0
├── textwrap v0.9.0
│   └── unicode-width v0.1.5
├── unicode-width v0.1.5 (*)
└── vec_map v0.8.1

$ vi Cargo.toml

$ rg default-features Cargo.toml &amp;amp;&amp;amp; cargo tree -p clap
33:default-features=false
clap v2.31.2
├── bitflags v1.0.3
├── textwrap v0.9.0
│   └── unicode-width v0.1.5
└── unicode-width v0.1.5 (*)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I only need to compile 4 external crates rather than 9.  Many crates make some of their dependencies optional; make sure you only bring in what you really need.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Rust doesn&amp;rsquo;t have the fastest compiler in the world, and that creates friction when writing code.  I&amp;rsquo;m looking forward to improvements on that front more than any other Rust feature.  Fortunately, in the mean time, there are ways to make Rust compile your projects a little faster.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-11T11:10:12+00:00</dc:date>
</item>
<item rdf:about="http://shape-of-code.coding-guidelines.com/?p=3819">
	<title>Derek Jones (derek-jones): Maximum team size before progress begins to stall</title>
	<link>http://shape-of-code.coding-guidelines.com/2018/08/11/maximum-team-size-before-progress-begins-to-stall/</link>
	<content:encoded>&lt;p&gt;On multi-person projects people have to talk to each other, which reduces the amount of time available for directly working on writing software.  How many people can be added to a project before the extra communications overhead is such that the total amount of code, per unit time, produced by the team decreases?&lt;/p&gt;
&lt;p&gt;A &lt;a href=&quot;https://www.researchgate.net/publication/23871473_Staffing_implications_of_software_productivity_models&quot;&gt;rarely cited paper by Robert Tausworthe&lt;/a&gt; provides a simple, but effective analysis.&lt;/p&gt;
&lt;p&gt;&lt;ins datetime=&quot;2018-08-14T11:51:36+00:00&quot;&gt;The plot below shows team productivity rate for a given number of team sizes, based on the examples discussed below.&lt;/ins&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.coding-guidelines.com/images/prod-rate-team-size.png&quot; alt=&quot;Team productivity for given number of members&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Activities are split between communicating and producing code.&lt;/p&gt;
&lt;p&gt;If we assume the communications overhead is give by: &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_986.5_dd1abc08db2451d2256d18f1867b84a3.png&quot; alt=&quot;t_0(S^{alpha}-1)&quot; title=&quot;t_0(S^{alpha}-1)&quot; /&gt;, where &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_986.5_b5819b6624cac60dadbc37a5a1d5b271.png&quot; alt=&quot;t_0&quot; title=&quot;t_0&quot; /&gt; is the percentage of one person&amp;#8217;s time spent communicating in a two-person team, &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_994.5_0dddeed4b0f51aaad8bcaf380fcbe48f.png&quot; alt=&quot;S&quot; title=&quot;S&quot; /&gt; the number of developers and &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_994.5_d50f9308cbed63f78681eb5d428d5a8d.png&quot; alt=&quot;alpha&quot; title=&quot;alpha&quot; /&gt; a constant greater than zero (I&amp;#8217;m using Tausworthe&amp;#8217;s notation).&lt;/p&gt;
&lt;p&gt;The maximum team size, before adding people reduces total output, is given by: &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_956.5_2d35fd90ed7010ccbba24a35fcbe1795.png&quot; alt=&quot;S=({1+t_0}/{(1+alpha)t_0})^{1/{alpha}}&quot; title=&quot;S=({1+t_0}/{(1+alpha)t_0})^{1/{alpha}}&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_994_d70bc917cc8a4bf2d32eac6d20e035f1.png&quot; alt=&quot;alpha=1&quot; title=&quot;alpha=1&quot; /&gt; (i.e., everybody on the project has the same communications overhead), then &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_978_fb56a32de5ffd002b9fc1a20afc32012.png&quot; alt=&quot;S={1+t_0}/{2t_0}&quot; title=&quot;S={1+t_0}/{2t_0}&quot; /&gt;, which for small &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_986.5_b5819b6624cac60dadbc37a5a1d5b271.png&quot; alt=&quot;t_0&quot; title=&quot;t_0&quot; /&gt; is approximately &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_978_119351749e660c9a6ad4f78ee087ae08.png&quot; alt=&quot;S=1/{2t_0}&quot; title=&quot;S=1/{2t_0}&quot; /&gt;.  For example, if everybody on a team spends 10% of their time communicating with every other team member: &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_983_53228ac33bf0a8e89d936c5688d95fe7.png&quot; alt=&quot;S={1+0.1}/{2*0.1}approx 5&quot; title=&quot;S={1+0.1}/{2*0.1}approx 5&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;In this team of five, 50% of each persons time will be spent communicating.&lt;/p&gt;
&lt;p&gt;If &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_994_9e79376eca8627e5db439d0719bf41af.png&quot; alt=&quot;alpha=0.8&quot; title=&quot;alpha=0.8&quot; /&gt;, then we have &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_956.5_00622bd826c8549884e0b418068b5d43.png&quot; alt=&quot;S=({1+0.1}/{(1+0.8)*0.1})^{1/0.8}approx 10&quot; title=&quot;S=({1+0.1}/{(1+0.8)*0.1})^{1/0.8}approx 10&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;What if the percentage of time a person spends communicating with other team members has an exponential distribution?  That is, they spend most of their time communicating with a few people and very little with the rest; the (normalised) communications overhead is: &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_994_d1937a3b362d1ca10f809b7db13408e9.png&quot; alt=&quot;1-e^{-(S-1)t_1}&quot; title=&quot;1-e^{-(S-1)t_1}&quot; /&gt;, where &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_986.5_d007e05a0ddcdf6ce72b72790f24f6d7.png&quot; alt=&quot;t_1&quot; title=&quot;t_1&quot; /&gt; is a constant found by fitting data from the two-person team (before any more people are added to the team).&lt;/p&gt;
&lt;p&gt;The maximum team size is now given by: &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_979_9587e89c6e7daa27599435e8b4d69812.png&quot; alt=&quot;S=1/{t_1}&quot; title=&quot;S=1/{t_1}&quot; /&gt;, and if &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_987_8b59394b0a72e46fb1747a9d35acffe8.png&quot; alt=&quot;t_1=0.1&quot; title=&quot;t_1=0.1&quot; /&gt;, then: &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_983_e65cac11851dc592d229a296d5189a9a.png&quot; alt=&quot;S=1/{0.1}=10&quot; title=&quot;S=1/{0.1}=10&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;In this team of ten, 63% of each persons time will be spent communicating (team size can be bigger, but each member will spend more time communicating compared to the linear overhead case).&lt;/p&gt;
&lt;p&gt;Having done this analysis, what is now needed is some data on the distribution of individual communications overhead.  Is the distribution linear, square-root, exponential?  I am not aware of any such data (there is a chance I have encountered something close and not appreciated its importance).&lt;/p&gt;
&lt;p&gt;I have only every worked on relatively small teams, and am inclined towards the distribution of time spent communicating not being constant.  Was it exponential or a power-law?  I would not like to say.&lt;/p&gt;
&lt;p&gt;Could a communications time distribution be reverse engineered from email logs?  The cc&amp;#8217;ing of people who might have an interest in a topic complicates the data analysis; time spent in meetings are another complication.&lt;/p&gt;
&lt;p&gt;Pointers to data most welcome and as is any alternative analysis using data likely to have a higher signal/noise ratio.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-11T01:47:46+00:00</dc:date>
</item>
<item rdf:about="https://jonwillia.ms/2018/08/10/dockertest">
	<title>Jon Williams (wizardishungry): dockertest timeouts</title>
	<link>http://feedproxy.google.com/~r/jonwillia-ms/~3/H3LKIqaX-j4/dockertest</link>
	<content:encoded>&lt;p&gt;Added Docker &lt;a href=&quot;https://github.com/ory/dockertest/pull/133&quot;&gt;container timeouts&lt;/a&gt; to &lt;a href=&quot;https://github.com/ory/dockertest&quot;&gt;dockertest&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/jonwillia-ms/~4/H3LKIqaX-j4&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</content:encoded>
	<dc:date>2018-08-10T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-08-07-22-18-41">
	<title>Unrelenting Technology (myfreeweb): Raptor has revealed pricing for their POWER9 &quot;cloud&quot; VPS. Almost AWS levels of complicated...</title>
	<link>https://unrelenting.technology/notes/2018-08-07-22-18-41</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;Raptor has revealed &lt;a href=&quot;https://secure.integricloud.com/content/base/managevms.html?viewrates=1&quot;&gt;pricing for their POWER9 &quot;cloud&quot; VPS&lt;/a&gt;. Almost AWS levels of complicated pricing. And it's expensive. Starting with 10$ per month for just 1 core and 256mb (!) RAM…&lt;/p&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-08-07T22:18:41+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="tag:sgoel.org,2018-08-07:/posts/switching-from-keepassxc-to-bitwarden/">
	<title>Siddhant Goel (siddhantgoel): Switching from KeePassXC to Bitwarden</title>
	<link>https://sgoel.org/posts/switching-from-keepassxc-to-bitwarden/</link>
	<content:encoded>&lt;p&gt;I have been looking to replace my password management setup for a few months
now. Up until now I was using &lt;a href=&quot;https://keepassxc.org/&quot;&gt;KeePassXC&lt;/a&gt;, but I never got around to putting in
the work to make it work properly on mobile.&lt;/p&gt;
&lt;p&gt;I understand that the standard solution is to just get the file synced on your
phone using Dropbox and then install a mobile app which can read the file off of
Dropbox. But the idea that all my passwords are in one single file somewhere on
the internet (cloud, if you will) is a bit disturbing.&lt;/p&gt;
&lt;p&gt;Incidentally, this is also the reason I never got around to using &lt;a href=&quot;https://1password.com/&quot;&gt;1password&lt;/a&gt;,
&lt;a href=&quot;https://www.lastpass.com/&quot;&gt;Lastpass&lt;/a&gt;, or other cloud-hosted password managers.&lt;/p&gt;
&lt;p&gt;This is not to discount the work that the security folks at these companies are
putting in on a daily basis to make their services secure. And I know that my
passwords file is encrypted. I've just seen enough mistakes happen and I'd like
to avoid being a part of one.&lt;/p&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;p&gt;My requirements were fairly simple. I wanted something that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;is open-source&lt;/li&gt;
&lt;li&gt;allows self-hosting&lt;/li&gt;
&lt;li&gt;works on mobile&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;... in that order.&lt;/p&gt;
&lt;p&gt;Turns out that just these 3 requirements narrowed down the search to
&lt;a href=&quot;https://bitwarden.com/&quot;&gt;Bitwarden&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bitwarden&lt;/h3&gt;
&lt;p&gt;Bitwarden is &lt;a href=&quot;https://github.com/bitwarden&quot;&gt;open source&lt;/a&gt;. There's a &lt;code&gt;core&lt;/code&gt; server written in C# and then there
are multiple client apps (iOS, Android, desktop).&lt;/p&gt;
&lt;p&gt;The backend appears quite heavy weight. Being written in C# and talking to a SQL
server installation, it's not exactly what I would call &quot;deployment friendly&quot;.
Luckily, they provide a &lt;a href=&quot;https://github.com/bitwarden/core#deploy&quot;&gt;Docker image&lt;/a&gt; which you can use to self-host the whole
thing.&lt;/p&gt;
&lt;p&gt;While this works on a modern machine, I wanted to run Bitwarden on a spare
Raspberry Pi connected to my home network where the system requirements are a
bit less than what the Docker image requires.&lt;/p&gt;
&lt;p&gt;It turns out that I'm not the first person to run into this problem. &lt;a href=&quot;https://jcs.org&quot;&gt;@jcs&lt;/a&gt;
already &lt;a href=&quot;https://jcs.org/2017/11/17/bitwarden&quot;&gt;wrote&lt;/a&gt; a &lt;a href=&quot;https://github.com/jcs/rubywarden&quot;&gt;Ruby server&lt;/a&gt; which is API-compatible with the &quot;official&quot;
Bitwarden backend. This implementation is &lt;strong&gt;very&lt;/strong&gt; lightweight, and completely
doable for the Pi. So all I had to do was create a new &lt;code&gt;bitwarden&lt;/code&gt; user on the
Pi, install &lt;code&gt;rvm&lt;/code&gt;, &lt;code&gt;git clone&lt;/code&gt; the repository, and then start the server
process.&lt;/p&gt;
&lt;p&gt;The only problem left now was setting up a static IP for the Pi so that the
desktop client on my laptop and the iOS app on my phone know the
(static &amp;amp; private) IP address they should be connecting to. Luckily my modem
supported allocating the same IP to devices based on their MAC addresses so this
was also easy.&lt;/p&gt;
&lt;h3&gt;Migrating from KeePassXC&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jcs/rubywarden&quot;&gt;rubywarden&lt;/a&gt; includes a script to import existing KeePassXC database files, and
it worked without any problems. The script somehow didn't handle my KeePassXC
folders very well. So an entry called &quot;Google&quot; in the &quot;Internet&quot; folder was
imported as &quot;Internet/Google&quot;. Those slashes look pretty annoying, so I took
some time out to delete some unused passwords and organize the rest into
folders.&lt;/p&gt;
&lt;p&gt;Migration was a non-issue, I would say.&lt;/p&gt;
&lt;h3&gt;Caveats&lt;/h3&gt;
&lt;p&gt;The only caveat with this system that I can think of right now is that when
you're not at home, you won't be able to save/edit/delete passwords. You'll be
able to read just fine, but editing won't work.&lt;/p&gt;
&lt;p&gt;The reason is that your client apps are configured to talk to a private IP
address (of the Pi in this case). But so far I haven't had the need to
save/edit/delete passwords when I'm outside. And reading them works just fine.&lt;/p&gt;
&lt;p&gt;If this is important for you, then this is probably the price you pay for
keeping the passwords on a machine you can physically look at.&lt;/p&gt;
&lt;p&gt;But overall, I find this setup quite nice to work with.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-06T22:00:00+00:00</dc:date>
</item>
<item rdf:about="https://leotindall.com/post/pdf-embedding-attacks/">
	<title>Leo Tindall (LeoLambda): PDF Embedding Attacks</title>
	<link>https://leotindall.com/post/pdf-embedding-attacks/</link>
	<content:encoded>PDF, or Portable Document Format, is an incredibly complex file format, governed by many standards and semi-standards. Like HTML and CSS, it was primarily designed for document layout and presentation. Also like HTML and CSS, it has been augmented with a JavaScript engine and document API that allows programmers to turn PDF documents into applications - or vehicles for malware.
Embedding Files in PDF Documents It&amp;rsquo;s very easy to embed any kind of file in a PDF document.</content:encoded>
	<dc:date>2018-08-04T17:17:11+00:00</dc:date>
</item>
<item rdf:about="https://blog.wallaroolabs.com/2018/08/dynamic-keys/">
	<title>Wallaroo Labs (chuckblake): Dynamic Keys</title>
	<link>https://blog.wallaroolabs.com/2018/08/dynamic-keys/</link>
	<content:encoded>Wallaroo is designed to help you build stateful event processing services that scale easily and elastically. State is partitioned across workers in the system and migrates when workers join or leave the cluster. Wallaroo routes messages to the correct worker by extracting a key from the message&amp;rsquo;s content. Our initial implementation of Wallaroo was designed so that all of the keys that would be used by the system were known when defining the application.</content:encoded>
	<dc:date>2018-08-02T11:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sevag.xyz/post/sudo/">
	<title>Sevag Hanssian (sevagh): Sudoers in namespace</title>
	<link>http://sevag.xyz/post/sudo/</link>
	<content:encoded>Motivation If your sudoers file has lots of aliases, wildcards, etc., the visudo command can validate them (or format them with JSON if your copy of visudo has the -x flag). However, it won&amp;rsquo;t resolve the indirection. Here&amp;rsquo;s what I mean:
$ cat test-sudoers-file Runas_Alias DANGEROUS = root User_Alias INNOCENT = sevagh INNOCENT remotehost = (DANGEROUS) /bin/sh $ visudo -cf ./test-sudoers-file ./test-sudoers-file: parsed OK  visudo will not tell you that sevagh can run sh as root.</content:encoded>
	<dc:date>2018-08-02T00:00:00+00:00</dc:date>
</item>
<item rdf:about="tag:gerikson.com,2018:/photo/2018-06">
	<title>Gustaf Erikson (gerikson): June</title>
	<link>http://gerikson.com/blog/photo/2018-06.html</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/gerikson/27851134097/in/dateposted/&quot; title=&quot;Rosebud bokeh wash&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1750/27851134097_afd1b393a1_z.jpg&quot; width=&quot;640&quot; height=&quot;426&quot; alt=&quot;Rosebud bokeh wash&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/gerikson/42739966181/in/dateposted/&quot; title=&quot;Meet the parents - Jan &amp; Karin, Stensun Jun 2018&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1737/42739966181_2e1b4985ac_z.jpg&quot; width=&quot;640&quot; height=&quot;512&quot; alt=&quot;Meet the parents - Jan &amp; Karin, Stensun Jun 2018&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gerikson.com/blog/photo/2017-06.html&quot;&gt;Jun 2017&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2016-06.html&quot;&gt;Jun 2016&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2015-06.html&quot;&gt;Jun 2015&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2014-06.html&quot;&gt;Jun 2014&lt;/a&gt; |
Jun 2013 |
&lt;a href=&quot;http://gerikson.com/blog/photo/2012-06.html&quot;&gt;Jun 2012&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2011-06.html&quot;&gt;Jun 2011&lt;/a&gt; |
Jun 2010 |
&lt;a href=&quot;http://gerikson.com/blog/photo/Summer-night.html&quot;&gt;Jun 2009&lt;/a&gt; &lt;/p&gt;</content:encoded>
	<dc:date>2018-07-31T16:21:00+00:00</dc:date>
	<dc:creator>Gustaf Erikson</dc:creator>
</item>
<item rdf:about="tag:gerikson.com,2018:/photo/2018-07">
	<title>Gustaf Erikson (gerikson): July</title>
	<link>http://gerikson.com/blog/photo/2018-07.html</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/gerikson/43549706802/in/dateposted/&quot; title=&quot;8:40PM local&quot;&gt;&lt;img src=&quot;https://farm1.staticflickr.com/941/43549706802_ae240d318a_z.jpg&quot; width=&quot;640&quot; height=&quot;236&quot; alt=&quot;8:40PM local&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gerikson.com/blog/photo/2017-07.html&quot;&gt;Jul 2017&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2016-07.html&quot;&gt;Jul 2016&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2015-07.html&quot;&gt;Jul 2015&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2014-07.html&quot;&gt;Jul 2014&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2013-07.html&quot;&gt;Jul 2013&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2012-07.html&quot;&gt;Jul 2012&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/Sonnar-contre-jour.html&quot;&gt;Jul 2011&lt;/a&gt; |
Jul 2010 | 
&lt;a href=&quot;http://gerikson.com/blog/alt/Vacation2009pt1.html&quot;&gt;Jul 2009&lt;/a&gt; &lt;/p&gt;</content:encoded>
	<dc:date>2018-07-30T20:29:00+00:00</dc:date>
	<dc:creator>Gustaf Erikson</dc:creator>
</item>
<item rdf:about="tag:gerikson.com,2018:/books/read/Go-Like-Hell">
	<title>Gustaf Erikson (gerikson): Go Like Hell: Ford, Ferrari, and Their Battle for Speed and Glory at Le Mans by A.J. Baime</title>
	<link>http://gerikson.com/blog/books/read/Go-Like-Hell.html</link>
	<content:encoded>&lt;p&gt;An entertaining account of the 1960s rivalry between Ford and Ferrari
at Le Mans.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-30T20:26:00+00:00</dc:date>
	<dc:creator>Gustaf Erikson</dc:creator>
</item>
<item rdf:about="https://www.cambus.net/the-future-of-via-x86-processors/">
	<title>Frederic Cambus (fcambus): The future of VIA x86 processors</title>
	<link>https://www.cambus.net/the-future-of-via-x86-processors/</link>
	<content:encoded>&lt;p&gt;I've been interested in &lt;strong&gt;VIA&lt;/strong&gt; motherboards and CPUs ever since they came
up with the &lt;strong&gt;Mini-ITX&lt;/strong&gt; standard in the very early 2000s. Their approach
of bringing fanless and power efficient designs to the x86 market was
ground breaking at the time.&lt;/p&gt;

&lt;p&gt;VIA processors are designed by &lt;strong&gt;Centaur Technology&lt;/strong&gt;, and there is an
excellent documentary entitled &quot;&lt;a href=&quot;https://vimeo.com/ondemand/riseofthecentaur&quot;&gt;Rise of the Centaur&lt;/a&gt;&quot; retracing their
history, which I really enjoyed watching.&lt;/p&gt;

&lt;p&gt;It's unfortunately very difficult to find information about recent VIA x86
CPUs. The VIA QuadCore, their latest one, was &lt;a href=&quot;https://www.viatech.com/en/2011/05/via-announces-new-via-quadcore-processor/&quot;&gt;announced&lt;/a&gt; in May 2011,
and it remains an open question whether there will be newer ones or not,
as the company seems to be focusing on the ARM architecture.&lt;/p&gt;

&lt;p&gt;In fact the status of VIA's x86 licensing agreement is quite unclear. There
was an &lt;a href=&quot;https://www.ftc.gov/news-events/press-releases/2010/08/ftc-settles-charges-anticompetitive-conduct-against-intel&quot;&gt;FTC ruling against Intel&lt;/a&gt; in 2010 specifying that a five years
extension should be offered to VIA once the ongoing agreement would expire
in 2013, and that the agreement should be modified to allow VIA (among other
companies) to consider mergers or joint ventures. The later being the way
VIA apparently took, which gave birth to &lt;a href=&quot;http://en.zhaoxin.com/&quot;&gt;Zhaoxin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some information in English about &lt;strong&gt;Zhaoxin x86 CPUs&lt;/strong&gt; is available on
&lt;a href=&quot;https://en.wikichip.org/wiki/zhaoxin&quot;&gt;WikiChip&lt;/a&gt;. However, those CPUs seems to only be available within China.
For now?&lt;/p&gt;

&lt;p&gt;Given the current state of affairs on the x86 market (Intel ME, AMD Secure
Technology, Meltdown, Spectre) and upcoming vulnerabilities annoucements
lurking on the horizon, there is definitely a spot for alternative x86
processors.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-30T18:08:00+00:00</dc:date>
</item>
<item rdf:about="https://blog.ovalerio.net/?p=1557">
	<title>Gonçalo Valério (dethos): Experiment: ChainSentinel.co</title>
	<link>https://blog.ovalerio.net/archives/1557</link>
	<content:encoded>&lt;p&gt;The amount and maturity of the tools available to help developers in process of building new applications and products is often crucial to the success of any given technology, platform or ecosystem.&lt;/p&gt;
&lt;p&gt;Nowadays in this blockchain trend we are witnessing, the front runner and most mature contender is Ethereum, for sure. The quality and quantity of the tools and content (documentation, tutorials, etc) available to developers in order to build on top of it, is miles away from the competition.&lt;/p&gt;
&lt;p&gt;Recently I&amp;#8217;ve been working and experimenting with NEO blockchain (&lt;a href=&quot;https://blog.ovalerio.net/archives/tag/neo&quot;&gt;as you can see on some of my previous posts&lt;/a&gt;), a team that I took part even won an&lt;a href=&quot;https://neo.org/blog/details/3074&quot;&gt; award of merit in their most recent dApp competition&lt;/a&gt; (&lt;a href=&quot;https://github.com/blocksmithtech/neo-vitae&quot;&gt;Github repository&lt;/a&gt;). During that period we felt the pain of the lack of maturity and documentation that affected this new &amp;#8220;ecosystem&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Things got better, but there are a few things still missing, such as tools that help you integrate your applications and services with the blockchain, tools to make the developer&amp;#8217;s life easier and tools to make their dApps more useful, such as the equivalent to Ethereum&amp;#8217;s &lt;code&gt;web3.js&lt;/code&gt; and &lt;code&gt;Metamask&lt;/code&gt;extension for example.&lt;/p&gt;
&lt;p&gt;Even though you can achieve a lot with NEO&amp;#8217;s JSON RPC API and through running your own node, I still think things should be easier. So at the last Whitesmith hackathon we&amp;#8217;ve tried to address a subset of these pains.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ve put together, on that limited timeframe, a simple and rough service that delivers blockchain events as traditional Webhooks (websockets are planned) to make it easier for everybody to interact in real-time with any smart-contract.&lt;/p&gt;
&lt;p&gt;We are looking for feedback to understand if it is something more developers also need and in that case work towards improving the service. Feel free to take a look at:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://chainsentinel.co&quot;&gt;https://chainsentinel.co&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-30T17:08:25+00:00</dc:date>
</item>
<item rdf:about="http://www.petecorey.com/blog/2018/07/30/voice-leading-with-elixir/">
	<title>Pete Corey (petecorey): Voice Leading with Elixir</title>
	<link>http://www.petecorey.com/blog/2018/07/30/voice-leading-with-elixir/</link>
	<content:encoded>&lt;p&gt;I play quite a bit of guitar in my free time. Once of the things I’ve been practicing lately is improving my voice leading between chords.&lt;/p&gt;

&lt;p&gt;Voice leading refers to how the individual notes, or voices, within a chord move when you transition to another chord. You often want as little movement as possible to keep the transition from sounding jarring (unless you’re going for jarring).&lt;/p&gt;

&lt;p&gt;So for example, if I play a G7 way up the neck, I probably wouldn’t want to follow it with a Cmaj7 played towards the nut. Instead, I’d like to find another voicing of Cmaj7 that’s both physically and musically closer to our G7 chord.&lt;/p&gt;

&lt;p&gt;Knowing how to voice lead between chords usually requires a vast knowledge of the fretboard, a huge chord vocabulary, and lots of practice. But who needs all then when you have a computer and &lt;a href=&quot;https://elixir-lang.org/&quot;&gt;the Elixir programming language&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Let’s use Elixir to chug through all of the possible Cmaj7 chords and find those with the best voice leading from our G7!&lt;/p&gt;

&lt;h2 id=&quot;rendering-chords&quot;&gt;Rendering Chords&lt;/h2&gt;

&lt;p&gt;Before we start talking about recruiting our computer to help us find the best voice leading between chords, we should take a detour and talk about guitar chords and how we’ll work with them.&lt;/p&gt;

&lt;p&gt;When you break it down to the basic, a “guitar” is just six strings attached to a piece of wood. A “chord” is just a set of notes played simultaneously across any number of those strings. Different notes can be played on each string by pressing on any “fret” along the neck.&lt;/p&gt;



&lt;p&gt;Given those definitions, the simplest ways to represent a chord using Elixir data structures probably be as a six element list (or tuple).&lt;/p&gt;

&lt;p&gt;Here’s our G7 chord represented as an array:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
[nil, 10, 12, 10, 12, nil]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the thickest string to the thinnest, we’re not playing anything on the first string (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;). We’re playing a G on the next string (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;/code&gt;), a D on the next string (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;/code&gt;), an F on the next string (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;/code&gt;), a B on the next string (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;/code&gt;), and nothing on the thinnest string (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To make our lives easier, we should come up with some way of displaying these chords in a more guitarist-friendly manner. One common option for displaying guitar chords is with &lt;a href=&quot;http://www.tedgreene.com/images/lessons/students/PaulVachon/HowToReadTedGreeneChordDiagrams.pdf&quot;&gt;chord charts&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;To kick things off, let’s write a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Chord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Renderer&lt;/span&gt;&lt;/code&gt; module with a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; function that takes a chord and returns a unicode-based chart for the provided chord:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defmodule Chord.Renderer do
  def to_string(chord, chord_name) do
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing we’ll need to do is find out the “reach” of our chord. What’s the lowest fret used in the chord and the highest?&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
{min, max} =
  chord
  |&amp;gt; Enum.reject(&amp;amp;(&amp;amp;1 == nil))
  |&amp;gt; Enum.min_max()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use Elixir’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; to filter out unplayed strings and then use &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; to easily find both the lowest and highest fret used in the chord.&lt;/p&gt;

&lt;p&gt;Next we’ll iterate over every set of frets within the range of the chord and render each row using a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;row_to_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;/code&gt; helper function:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
0..max(max - min, 3)
|&amp;gt; Enum.map(&amp;amp;row_to_string(&amp;amp;1, min, chord, chord_name))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most fret charts render some minimum number of rows, even if the chord only takes up one fret of vertical space. We’ll iterate between &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt; and either &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;/code&gt;, or &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;/code&gt;, depending on which value is larger. This means we’ll always render at least four rows of frets for each diagram.&lt;/p&gt;

&lt;p&gt;We’ll also want to intersperse the horizontal fret lines below each row of fingered notes on each row of frets:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.intersperse([:bright, :black, &quot;\n   ├┼┼┼┼┤\n&quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re using &lt;a href=&quot;https://hexdocs.pm/elixir/IO.ANSI.html&quot;&gt;Elixir’s ANSI color codes&lt;/a&gt; to color our fretboard lines a dark grey color, and building our final string as &lt;a href=&quot;https://www.bignerdranch.com/blog/elixir-and-io-lists-part-1-building-output-efficiently/&quot;&gt;an IO list&lt;/a&gt;, rather than a single concatenated string.&lt;/p&gt;

&lt;p&gt;Because we’re using ANSI color codes, we need to format and convert our resulting nested list structure into a string before returning it from our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; function:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; IO.ANSI.format()
|&amp;gt; IO.chardata_to_string()
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;row_to_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;/code&gt; helper function is fairly straight forward. It simply renders a left gutter, the row of frets with any potential fingerings, and a right gutter:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp row_to_string(offset, base, chord, chord_name),
  do: [
    left_gutter(offset, base + offset),
    Enum.map(chord, &amp;amp;fret_to_string(&amp;amp;1, base + offset)),
    right_gutter(offset, chord_name)
  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;left_gutter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; helper function renders the lowest fret used in the chord on the first line of the chart:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp left_gutter(0, fret),
    do: [:bright, :yellow, String.pad_leading(&quot;#{fret}&quot;, 2, &quot; &quot;) &amp;lt;&amp;gt; &quot; &quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, we render a spacer:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp left_gutter(_, _),
  do: &quot;   &quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;right_gutter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; helper function either renders an optional &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord_name&lt;/span&gt;&lt;/code&gt; on the first line of the chord chart:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp right_gutter(0, chord_name),
  do: [:yellow, &quot; #{chord_name}&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or an empty string:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp right_gutter(_, _),
  do: &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s all there is to it!&lt;/p&gt;

&lt;p&gt;Now we can render chords by passing them into &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Chord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
Chord.Renderer.to_string([nil, 10, 12, 10, 12, nil], &quot;G7&quot;)
|&amp;gt; IO.puts
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;language-*&quot;&gt;&lt;code class=&quot;language-*&quot;&gt;10 │●│●││ G7
   ├┼┼┼┼┤
   ││││││
   ├┼┼┼┼┤
   ││●│●│
   ├┼┼┼┼┤
   ││││││
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in its fully colored glory:&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/voice-leading-with-elixir/G7.png&quot; /&gt;
  &lt;p&gt;Our G7 chord, as rendered by our new module.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;chord-distance&quot;&gt;Chord Distance&lt;/h2&gt;

&lt;p&gt;We can roughly approximate how “good” the voice leading is between two chords by counting the number of frets each finger has to move when changing chords. We can call this the “distance” between the two chords. In the simplest terms, chords with good voice leading have minimal distance between each other.&lt;/p&gt;

&lt;p&gt;If we can write a function that computes this distance between chords, we might be able to generate all possible Cmaj7 voicings, and find the voicing that leads best from our G7!&lt;/p&gt;

&lt;p&gt;Let’s say that each fret moved on a single string equals one unit of “distance”, and adding or removing a note to or from a string also counts as a single unit of distance.&lt;/p&gt;

&lt;p&gt;Using that heuristic, let’s write a new &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Chord&lt;/span&gt;&lt;/code&gt; module and a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; function that calculates the distance between two chords.&lt;/p&gt;

&lt;p&gt;If both chords are equal, there is zero distance between them:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def distance(chord, chord),
  do: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, the distance between two chords is the sum of the distance between their individual fretted notes on each string:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def distance([fret_a | rest_a], [fret_b | rest_b]),
  do: distance(fret_a, fret_b) + distance(rest_a, rest_b)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a the first chord doesn’t have a note fretted on a string, and the next chord does, we’ll add one unit of distance:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def distance(nil, fret),
  do: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And visa versa:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def distance(fret, nil),
  do: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, if both strings have fretted notes, the distance moved on that string is the number of frets between the two chords on that string:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def distance(fret_a, fret_b),
  do: abs(fret_a - fret_b)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can manually calculate the distance between our G7 chord (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;), and a few different Cmaj7 voicings we may know:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
Chord.distance([nil, 10, 12, 10, 12, nil], [nil, 3, 5, 4, 5, nil])   # 27
Chord.distance([nil, 10, 12, 10, 12, nil], [8, 10, 9, 9, nil, nil])  # 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So according to our heuristic, the second voicing of Cmaj7 has much better voice leading between our G7 than the first voicing of Cmaj7.&lt;/p&gt;

&lt;p&gt;This is great, but we’re still limited by our knowledge of the fretboard. What if we only know two voicings of a Cmaj7 chord. Is this the best we can do?&lt;/p&gt;

&lt;p&gt;Absolutely not!&lt;/p&gt;

&lt;h2 id=&quot;brute-forced-voicings&quot;&gt;Brute Forced Voicings&lt;/h2&gt;

&lt;p&gt;The last piece of this puzzle is to write a function that will generate all possible voicings of a given chord across the neck of the guitar. If we have all of the possible voicings of our Cmaj7, for example, we can easily find the voicing that has the best voice leading from our G7 chord!&lt;/p&gt;

&lt;p&gt;Let’s start by creating a new &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;voicings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; function in our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Chord&lt;/span&gt;&lt;/code&gt; module:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def voicings(notes) do
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;voicings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; function accepts an array of numbers representing the notes we want in our chord. For example, if we wanted all of the voicings of our Cmaj7 chord, we’d call &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;vocings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; with a C (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt;), an E (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;/code&gt;), a G (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;/code&gt;), and a B (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;/code&gt;). These numbers correspond to the lowest set of &lt;a href=&quot;http://www.inspiredacoustics.com/en/MIDI_note_numbers_and_center_frequencies&quot;&gt;MIDI notes&lt;/a&gt;, ranging from &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt; to &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first thing we want to do is calculate all of the possible “note sets” that will be spread across our guitar strings:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
notes
|&amp;gt; all_note_sets()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a chord has fewer notes than the number of strings we want to play, some number of those notes will have to be repeated. To illustrate, imagine we want to play our four note Cmaj7 using all six strings of the guitar. We’ll obviously have four strings playing C, E, G, and B, but what will the other two strings play?&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;all_note_sets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; helper functions calculates this list of all possible note sets using some hand-waving combinatorics, and a few unfortunate list comprehensions:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def all_note_sets(notes) do
  for length &amp;lt;- 6..length(notes) do
    for base &amp;lt;- Combination.combine(notes, min(length, length(notes))) do
      for extension &amp;lt;- Combination.combine(notes, length - length(notes)) do
        base ++ extension
      end
    end
  end
  |&amp;gt; Enum.reduce(&amp;amp;Kernel.++/2)
  |&amp;gt; Enum.reduce(&amp;amp;Kernel.++/2)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;voicings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; function needs to take each of these possible note sets and build all possible chords using that set of notes:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.map(&amp;amp;build_chords/1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;build_chords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; helper works by recursively building up all possible chords made of all possible notes in the provided note sets.&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def build_chords(note_set, chord \\ [nil, nil, nil, nil, nil, nil], chords \\ [])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It starts by looking at the first note in the provided note set and finds all occurrences of that note across all of the strings of our guitar using the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;all_notes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; helper:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
note
|&amp;gt; all_notes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, it filters out notes on strings already used in the current chord under construction:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.filter(fn {string, fret} -&amp;gt; Enum.at(chord, string) == nil end)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, it takes each note, inserts it into the current chord, and checks the “stretch” of the chord. If the chord spans more than five frets, we deem it impossible to play and filter it out (which is obviously an over-simplification, especially at higher frets). Otherwise, we recursively call &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;build_chords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;/code&gt;, passing in the newly updated current chord and the remaining set of notes in our note set:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.map(fn {string, fret} -&amp;gt;
  new_chord = List.replace_at(chord, string, fret)

  {min, max} =
    new_chord
    |&amp;gt; Enum.reject(&amp;amp;(&amp;amp;1 == nil))
    |&amp;gt; Enum.min_max(fn -&amp;gt; {0, 0} end)

  if max - min &amp;lt;= 5 do
    build_chords(rest, new_chord, chords)
  else
    chords
  end
end)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;all_notes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; helper function works by accepting the abstract value of the note we’re looking for (C is &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt;), the optional &lt;a href=&quot;http://www.inspiredacoustics.com/en/MIDI_note_numbers_and_center_frequencies&quot;&gt;MIDI notes&lt;/a&gt; of the tuning of each string, and the optional number of frets up the neck we want to look for notes:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def all_notes(target_note, strings \\ [40, 45, 50, 55, 59, 64], frets \\ 12) do
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It then constructs a two dimensional list of &lt;a href=&quot;http://www.inspiredacoustics.com/en/MIDI_note_numbers_and_center_frequencies&quot;&gt;MIDI notes&lt;/a&gt; up the neck and across the fretboard:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
fretboard =
  for fret &amp;lt;- 0..frets,
    do: Enum.map(strings, &amp;amp;(&amp;amp;1 + fret))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we’ve built up our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fretboard&lt;/span&gt;&lt;/code&gt;, we’ll filter out all of the notes that aren’t the specific note we’re looking for. We loop over every row of frets, and every string:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
fretboard
|&amp;gt; Enum.with_index()
|&amp;gt; Enum.map(fn {row, index} -&amp;gt;
  row
  |&amp;gt; Enum.with_index()
  |&amp;gt; Enum.map(fn {note, string} -&amp;gt;
    ...
  end)
end)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;/code&gt; we encounter, we check if &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt; equals our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;target_note&lt;/span&gt;&lt;/code&gt;. If it does, we replace the current note value with a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;/code&gt;/&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;/code&gt; tuple that can be used when building our guitar chord:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
if rem(note, 12) == target_note do
  {string, index}
else
  nil
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, we replace the current note with &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;post-footer&quot;&gt;
    &lt;div class=&quot;signup-form&quot;&gt;
        &lt;form action=&quot;http://east5th.us11.list-manage.com/subscribe/post?u=f8833fd40e2b1b28545d9f382&amp;id=c56ceba687&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; target=&quot;_blank&quot;&gt;
            &lt;p&gt;Sign up for &lt;a href=&quot;http://www.petecorey.com/newsletter&quot;&gt;Pete's mailing list&lt;/a&gt; and have fresh content delivered to you, hot off the presses every week!&lt;/p&gt;
            &lt;div class=&quot;email-wrapper&quot;&gt;
                &lt;input type=&quot;text&quot; value=&quot;&quot; name=&quot;FNAME&quot; class=&quot;&quot; id=&quot;mce-FNAME&quot; /&gt;&lt;!--
                                                                                                           --&gt;&lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; id=&quot;mce-EMAIL&quot; /&gt;&lt;!--
                                                                                                                                                                                                    --&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; /&gt;
            &lt;/div&gt;
            &lt;div&gt;&lt;input type=&quot;text&quot; name=&quot;b_f8833fd40e2b1b28545d9f382_c56ceba687&quot; tabindex=&quot;-1&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Next, we flatten our multidimensional fretboard representation and filter out all of the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;/code&gt; values, leaving us with just the set of notes we’re looking for, and where they can be found on the fretboard.&lt;/p&gt;

&lt;p&gt;Perfect.&lt;/p&gt;

&lt;p&gt;Let’s try it out by listing the first three voicings of a Cmaj7 chord our new &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;voicings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; helper finds:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
Chord.voicings([0, 4, 7, 11])
|&amp;gt; Enum.take(3)
|&amp;gt; Enum.map(&amp;amp;Chord.Renderer.to_string/1)
|&amp;gt; Enum.map(&amp;amp;IO.puts/1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
 0 ││││●│   0 ││││●│   1 ││││●│ 
   ├┼┼┼┼┤     ├┼┼┼┼┤     ├┼┼┼┼┤
   ││││││     ││││││     │●●│││
   ├┼┼┼┼┤     ├┼┼┼┼┤     ├┼┼┼┼┤
   ││●│││     ││●│││     ●││││●
   ├┼┼┼┼┤     ├┼┼┼┼┤     ├┼┼┼┼┤
   ●●│││●     ●●│││●     │││●││
   ├┼┼┼┼┤     ├┼┼┼┼┤
   │││●││     │││●││
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool!&lt;/p&gt;

&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all Together&lt;/h2&gt;

&lt;p&gt;Now that our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;voicings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; helper is finished, we can put all of the pieces together.&lt;/p&gt;

&lt;p&gt;Let’s start by calculating all of the possible voicings of our Cmaj7 chord:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
[0, 4, 7, 11]
|&amp;gt; Chord.voicings()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, let’s map over each voicing and build a tuple who’s first element is the distance from our G7 chord, and who’s second element is the generated voicing itself:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.map(&amp;amp;{Chord.distance(&amp;amp;1, [nil, 10, 12, 10, 12, nil]), &amp;amp;1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s sort that list. Because the distance from our G7 chord is the first element in each tuple, we’re effectively sorting by distance:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.sort()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the “best” options for Cmaj7 voicings should be at the top of our list. Let’s take the first three:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.take(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll map each voicing through our chord chart renderer:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.map(fn {distance, chord} -&amp;gt; Chord.to_string(chord, &quot;Cmaj7&quot;) end)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, let’s join each of our three charts together with newlines and print the result:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.join(&quot;\n\n&quot;)
|&amp;gt; IO.puts()
&lt;/code&gt;&lt;/pre&gt;



&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/voice-leading-with-elixir/Cmaj7+Voicings.png&quot; /&gt;
  &lt;p&gt;Our generated Cmaj7 voicings.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Each of the voicings recommended by our software sound fairly nice. Much nicer than the first voicing we were using way down the neck. The third voicing definitely has an interesting flavor, and is something I never would have reached for without the help of this software, but I’m glad to know it’s there.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts-and-future-work&quot;&gt;Final Thoughts and Future Work&lt;/h2&gt;

&lt;p&gt;I have many, many final thoughts about this project. If you can’t tell, I’m incredibly excited about this kind of thing.&lt;/p&gt;

&lt;p&gt;I’m currently working on improving the “distance” heuristic, which raises many interesting questions about what exactly voice leading is, and who it’s for. Should I optimize for the player, or the listener? Thanks to how the guitar works, chords on wildly different sections of the neck may be very close musically, but my algorithm will filter these chords out as being “too far.” In many ways, I’m conflating “voice leading” between chords with “playability” between chords. Is this what I want?&lt;/p&gt;

&lt;p&gt;I’m also working on optimizing the voice leading over entire chord progressions.  As you might guess, this is a much more expansive problem.&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/voice-leading-with-elixir/progression.png&quot; /&gt;
  &lt;p&gt;A generated chord progression.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Lastly, if you’re interested in this kind of thing, I highly recommend you check out Ted Greene’s guitar work. Ted is, in my opinion, one of the true masters of the guitar, and put some serious work into perfecting his voice leading skills.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://www.tedgreene.com/&quot;&gt;Ted Greene archive&lt;/a&gt;, the archive’s &lt;a href=&quot;http://www.youtube.com/user/TedGreeneArchives&quot;&gt;Youtube page&lt;/a&gt;, and &lt;strong&gt;definitely check out two of Ted’s books: &lt;a href=&quot;https://amzn.to/2uV6w1g&quot;&gt;Chord Chemistry&lt;/a&gt;, and &lt;a href=&quot;https://www.amazon.com/Modern-Chord-Progressions-Classical-Voicings/dp/0898986982/ref=tmm_pap_swatch_0?_encoding=UTF8&amp;qid=1532731370&amp;sr=1-1&quot;&gt;Modern Chord Progressions&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I’ve uploaded this entire project &lt;a href=&quot;https://github.com/pcorey/chord&quot;&gt;to Github&lt;/a&gt;, if you’re curious the see the source in its entirety. Check it out!&lt;/p&gt;

&lt;p&gt;Obviously, this kind of thing is just a tool, and the chord transitions and progressions generated by the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Chord&lt;/span&gt;&lt;/code&gt; module are just suggestions and starting places, not fully-fleshed out music. That being said, these tools have already given me many new ideas and shown me many interesting chords I never would have reached for without having them shown to me.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-30T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://beza1e1.tuxen.de/cost_of_agile.html">
	<title>Andreas Zwinkau (qznc): The Cost of Agile</title>
	<link>http://beza1e1.tuxen.de/cost_of_agile.html</link>
	<content:encoded>&lt;p&gt;Agile improves time to market at the cost of process efficiency&lt;/p&gt;
    &lt;p&gt;&lt;a href=&quot;http://beza1e1.tuxen.de/cost_of_agile.html&quot;&gt;Read full article!&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-29T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-28-22-34-16">
	<title>Unrelenting Technology (myfreeweb): yay, Firefox will use SHM_ANON on FreeBSD now</title>
	<link>https://unrelenting.technology/notes/2018-07-28-22-34-16</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;yay, &lt;a href=&quot;https://hg.mozilla.org/mozilla-central/rev/83bab8cf29bf&quot;&gt;Firefox will use &lt;code&gt;SHM_ANON&lt;/code&gt; on FreeBSD now&lt;/a&gt;&lt;/p&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-28T22:34:16+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="http://journal.dedasys.com/?p=1346">
	<title>David N. Welton (davidw): Fight or flight? YIMBYs and the exodus to smaller towns</title>
	<link></link>
	<content:encoded>Slate has an article about people departing larger cities for the &amp;#8220;greener pastures&amp;#8221; of small towns.  It&amp;#8217;s something that has had me thinking a lot lately. The damage that excessive housing regulation (restrictive zoning, parking minimums, etc&amp;#8230;) in our most productive places can be quantified in the billions of dollars.  Foregone jobs, more expensive university [&amp;#8230;]</content:encoded>
	<dc:date>2018-07-27T23:59:43+00:00</dc:date>
</item>
<item rdf:about="https://medium.com/p/ea43d46cdbc6">
	<title>Alex Wilson (mrwilson): Teams from Scratch —Part 1: Psychological Safety</title>
	<link>https://medium.com/@probablyfine/teams-from-scratch-part-1-psychological-safety-ea43d46cdbc6?source=rss-e2a8548b9f4f------2</link>
	<content:encoded>&lt;p&gt;December 2017 — I had the privilege and opportunity of transitioning from Senior Developer at &lt;a href=&quot;https://medium.com/unruly-engineering&quot;&gt;Unruly&lt;/a&gt; to a Team Lead of a newly-created team.&lt;/p&gt;&lt;p&gt;The new team was created to tackle a recurring issue at Unruly — our teams relied on multiple shared services for observability, alerting, and configuration management.&lt;/p&gt;&lt;p&gt;These services, while functional and only rarely prone to error, did not receive the same level of attention as our core products and therefore were only maintained, not advanced. &lt;strong&gt;When everyone is responsible, no-one is.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Taking the name &lt;em&gt;SHIFT&lt;/em&gt; (a shortening of &lt;strong&gt;Sh&lt;/strong&gt;ared &lt;strong&gt;I&lt;/strong&gt;n&lt;strong&gt;f&lt;/strong&gt;rastructure &lt;strong&gt;T&lt;/strong&gt;eam), we had an opportunity to start a team from scratch, without needing to cookie-cutter process from the core product teams … although we could, if we wanted.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*qlCtU74fvVrJ6Yb7bgSlCg.jpeg&quot; /&gt;A snapshot from one of our team wipe-boards.&lt;p&gt;In this multi-part series, I’ll be recounting my experiences of the different facets of our team culture and process, deliberate &lt;strong&gt;and &lt;/strong&gt;emergent behaviors, and how it has shaped our team’s direction.&lt;/p&gt;&lt;p&gt;This part is about what we do to create an environment with &lt;strong&gt;Psychological Safety&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;I’ve been at Unruly for approaching six years, and with that comes six years of understanding from a &lt;strong&gt;lot&lt;/strong&gt; of mistakes—however, a lot of that knowledge is specialized, and the team as a whole come from front-end/back-end development backgrounds, not infrastructure.&lt;/p&gt;&lt;p&gt;Thus, it was important for us to build a culture where asking questions and admitting gaps in knowledge was okay.&lt;/p&gt;&lt;h4&gt;What is psychological safety?&lt;/h4&gt;&lt;p&gt;For us, &lt;a href=&quot;https://en.wikipedia.org/wiki/Psychological_safety&quot;&gt;psychological safety&lt;/a&gt; was that &lt;em&gt;every member of the team felt safe taking risks: asking “silly” questions, putting forward their views and arguments, making mistakes.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;A team of individuals that feel empowered to experiment, safe to make mistakes, and able to deal with conflict in a constructive and non-violent way will grow and learn incredibly quickly.&lt;/p&gt;&lt;p&gt;On a personal level, I wanted the team to feel happy working with each-other to tackle problems, and made it a top priority to embed this into our working practices and values.&lt;/p&gt;&lt;h4&gt;How did we build it into our team culture?&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Team Lead setting example&lt;/strong&gt; — I have been deliberately bringing my whole self to work, to encourage openness and set a positive example.&lt;br /&gt;I received a course of therapy earlier this year, to deal with some mental health issues, and I was very open about this with the team.&lt;br /&gt;This is not to say that everyone should be open about everything, but should feel safe speaking about themselves if they need to, in public or in private.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Regular feedback sessions&lt;/strong&gt; — We have sessions to give each-other both positive and constructive feedback. Some of the “rules” are that no team member &lt;em&gt;has&lt;/em&gt; to give or receive feedback, and that the feedback should be specific (not “You &lt;strong&gt;always&lt;/strong&gt; do X”) and &lt;a href=&quot;https://www.communicationandconflict.com/i-statements.html&quot;&gt;I-statements&lt;/a&gt; (not “&lt;strong&gt;You&lt;/strong&gt; always do X”).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Asking for clarification or more detail is fine&lt;/strong&gt;—There will be different methods by which team members learn best even in a small team like ours. Some of the team are very visual learners, and learn best from diagrams, and some prefer analogies and metaphor.&lt;br /&gt;We’ve tried to embed the idea that it’s okay for one member of the pair or mob to stop and ask for explanation in another form that helps them learn best.&lt;br /&gt;This empathy helps tailor our explanations in the moment, and encourages cognizance of each-other’s needs&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Blameless post-incident retrospectives &lt;/strong&gt;— The flip-side of being able to make mistakes safely is that when mistakes happen, we don’t point fingers and apportion blame.&lt;br /&gt;If something in our process enabled an outage to be manually triggered, that’s a problem with the process, not the person.&lt;br /&gt;We found &lt;a href=&quot;http://retrospectivewiki.org/index.php?title=The_Prime_Directive&quot;&gt;Norm Kerth’s Prime Directive&lt;/a&gt; a good starting point: “&lt;em&gt;Regardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.”&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Not everything works for everyone&lt;/strong&gt; — the tools above are fine and good, but they also make assumptions that everyone works the same way, or deals with questions/conflict equally. We encourage empathy and awareness of each-others’ needs where it’s &lt;em&gt;reasonable to expect &lt;/em&gt;(e.g. social cues may not be as obvious to some people as others).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are many more things we do, as part of our conscious everyday practice and process, but these are the first concrete first steps.&lt;/p&gt;&lt;p&gt;We found that these processes and cultural axioms created an environment that supported different kinds of positive emergent behavior that we &lt;em&gt;did not expect&lt;/em&gt;, and I’ll discuss in more detail in the next post, about our team’s sense of &lt;strong&gt;Belonging&lt;/strong&gt;.&lt;/p&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ea43d46cdbc6&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2018-07-26T09:19:07+00:00</dc:date>
</item>
<item rdf:about="https://sulami.github.io/How this blog is madeHow this blog is made">
	<title>Robin Schroer (sulami): How this blog is made</title>
	<link>https://sulami.github.io/How this blog is madeHow this blog is made</link>
	<content:encoded>&lt;p&gt;While this blog has always been powered by a static-page generator, a while ago I switched from using &lt;a href=&quot;https://blog.getpelican.com/&quot;&gt;Pelican&lt;/a&gt;, a Python-based generator, to &lt;a href=&quot;https://jaspervdj.be/hakyll/&quot;&gt;Hakyll&lt;/a&gt;, a Haskell-based one. There was no real practical reason for this, and objectively the switch has been a huge waste of time, though I have learned a lot about Haskell and am very happy with how this blog currently works.&lt;/p&gt;
&lt;p&gt;The basic setup is quite simple, I am using &lt;a href=&quot;https://docs.haskellstack.org/en/stable/README/&quot;&gt;Stack&lt;/a&gt; to manage build dependencies and sandboxing for Haskell&lt;span&gt;&lt;label for=&quot;sn-1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-1&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This is actually one of my basic requirements for new languages that I pick up. It is 2018, you can ship your language with a package manager that sandboxes by default. One of my biggest problems with Python is virtualenv.&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;. For reasons that become clear later in this post, I also need a LaTeX installation, which currently is not managed in any way, but I do not require anything out of the ordinary, so usually it is just a matter of install ing the distribution for my operating system.&lt;/p&gt;
&lt;h2 id=&quot;hakyll-hacks&quot;&gt;Hakyll Hacks&lt;/h2&gt;
&lt;p&gt;To achieve a nice, human-readable URL scheme I am not only generating a slug from the original file name, which usually matches the title, but to get rid of the ugly &lt;code&gt;.html&lt;/code&gt; postfix I actually render all pages and posts to &lt;code&gt;index.html&lt;/code&gt; files in directories with the corresponding name, resulting in URLs with trailing slashes. Credit for this goes to &lt;a href=&quot;https://www.rohanjain.in/hakyll-clean-urls/&quot;&gt;Rohan Jain&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course this blog also has an Atom feed&lt;span&gt;&lt;label for=&quot;sn-2&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-2&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Atom vs. RSS has been &lt;a href=&quot;https://nullprogram.com/blog/2013/09/23/&quot;&gt;debated for a while&lt;/a&gt;, in the end my use case is super simple anyway, so I am just using Atom until I find an actually valid reason to get into comparing the two formats.&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;, so you can follow my posts in your favourite newsreader, or use Firefox live bookmarks for example. I ran into one particular problem with this though, as one of my recent posts included an ampersand (&amp;amp;) in the title. The rendered feed file (no matter the format) would be invalid due to this. So I had to implement &lt;a href=&quot;https://en.wikipedia.org/wiki/Percent-encoding&quot;&gt;URL encoding&lt;/a&gt; for titles myself (this is already done for the body by Hakyll). Thanks to the way Hakyll embraces the Haskell philosphy, this was just a matter of mapping the encoding function over the post titles for the feed output.&lt;/p&gt;
&lt;h2 id=&quot;symetric-html-pdf-output&quot;&gt;Symetric HTML &amp;amp; PDF output&lt;/h2&gt;
&lt;p&gt;A long while ago I had the idea of making my CV available online in the browser, like many front end developers do to showcase their skills. At the same time I still need a PDF version that can be printed neatly. Being a developer, I of course cannot fathom the idea of having two sets of CVs, so I thought why not generate both versions from the same source (of truth), using one single build process. So that is what I am currently finalising.&lt;/p&gt;
&lt;p&gt;The HTML version for the website is just a static page in the blog, simple enough. Hakyll gives me very fine-grained control over the actual build process, so I can leverage custom Markdown tags to control layout if I need to. The PDF version of my CV has always been generated using &lt;a href=&quot;https://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt;, because it generates beautifully rendered output in a reproducible fashion. Because I am using &lt;a href=&quot;http://pandoc.org/&quot;&gt;Pandoc&lt;/a&gt; to generate HTML from the Markdown source, I am also using it to generate the LaTeX source code from the same source, and then just pass it into a LaTeX template. Then I just run &lt;code&gt;xetex&lt;/code&gt; in a subprocess to render the final PDF.&lt;/p&gt;
&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;
&lt;p&gt;This blog is currently hosted in two locations, &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; which I have been using for many years, and &lt;a href=&quot;https://docs.gitlab.com/ee/user/project/pages/&quot;&gt;GitLab pages&lt;/a&gt;, which I only added recently. While the build and deployment process for these two platforms is slightly different, they mostly work off the same codebase, with the only difference being a &lt;a href=&quot;https://github.com/sulami/sulami.github.io/blob/develop/Makefile&quot;&gt;makefile for Github&lt;/a&gt; being replaced by the &lt;a href=&quot;https://gitlab.com/sulami/sulami.gitlab.io/blob/develop/.gitlab-ci.yml&quot;&gt;GitLab-specific build file&lt;/a&gt;. The Github version I generate locally with my locally compiled Hakyll, and then push the the right branch using the makefile. This makefile also allows me to run a local server to preview the rendered output before committing. The GitLab repository is setup to mirror the one on GitHub and rebuild via GitLab CI on every change, so it is compiling the Hakyll application in a Docker container and the generating the output.&lt;/p&gt;
&lt;p&gt;These two build processes have different pros and cons. The GitHub version is available slightly faster, as my local render only takes a couple of seconds and after pushing I just have to wait for Github’s cache to refresh, which usually takes only a couple of minutes, while the GitLab version has to run the CI job which takes a couple of minutes. On the upside the GitLab version does not require me to have a locally installed version of Haskell, Stack or anything else, as long as I can push to the repository, allowing me to explore workflows which happen end-to-end on iOS. I have been investigating this exact workflow, using a combination of &lt;a href=&quot;https://itunes.apple.com/us/app/ia-writer/id775737172&quot;&gt;iA Writer&lt;/a&gt;, &lt;a href=&quot;https://itunes.apple.com/us/app/workflow/id915249334&quot;&gt;Workflow&lt;/a&gt; and &lt;a href=&quot;https://itunes.apple.com/us/app/working-copy/id896694807&quot;&gt;Working Copy&lt;/a&gt; to write, transform and push the posts, leaving the build process to GitLab CI.&lt;/p&gt;
&lt;p&gt;If you are interested in details, have a look at the source on either &lt;a href=&quot;https://github.com/sulami/sulami.github.io&quot;&gt;Github&lt;/a&gt; or &lt;a href=&quot;https://gitlab.com/sulami/sulami.gitlab.io&quot;&gt;GitLab&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-26T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-25-20-00-29">
	<title>Unrelenting Technology (myfreeweb): An SPI flash chip module arrived in the mail today. I ordered that for...</title>
	<link>https://unrelenting.technology/notes/2018-07-25-20-00-29</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;An SPI flash chip module arrived in the mail today. I ordered that for replicating &lt;a href=&quot;https://linux-sunxi.org/File:Xunlong_Orange_Pi_PC_with_improvised_SPI_flash_shield.jpg&quot;&gt;this&lt;/a&gt; basically. To (network) boot the Orange Pi PC without microSD.&lt;/p&gt;
&lt;p&gt;Naturally, instead of booting Linux to flash or (?) trying flash from U-Boot itself, time was spent on &lt;a href=&quot;https://github.com/flashrom/flashrom/pull/53&quot;&gt;making flashrom work on FreeBSD&lt;/a&gt; :)&lt;/p&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-25T20:00:29+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="https://silky.github.io/posts/2018-07-25-ethics-of-AI.html">
	<title>Noon van der Silk (silky): The Ethics of AI - An Empathy-Based Approach?</title>
	<link>https://silky.github.io/posts/2018-07-25-ethics-of-AI.html</link>
	<content:encoded>&lt;div class=&quot;info&quot;&gt;
    Posted on July 25, 2018
    
        by Noon van der Silk
    
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;There’s lots of talk about the Ethics of AI at the moment. As with any research, there’s too much for any one person to read. Here’s a bunch of papers that I’ve collected haphazardly in the early part of this year:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1711.03846&quot;&gt;“Dave…I can assure you…that it’s going to be all right…” – A definition, case for, and survey of algorithmic assurances in human-autonomy trust relationships&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1709.06692&quot;&gt;A Voting-Based System for Ethical Decision Making&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1511.06578&quot;&gt;Actually, It’s About Ethics in Computational Social Science: A Multi-party Risk-Benefit Framework for Online Community Research&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1711.07373&quot;&gt;Attentive Explanations: Justifying Decisions and Pointing to the Evidence (Extended Abstract)&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1502.05838&quot;&gt;Automated Reasoning for Robot Ethics&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1702.00137&quot;&gt;Blue Sky Ideas in Artificial Intelligence Education from the EAAI 2017 New and Future AI Educator Program&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1710.06881&quot;&gt;Children and the Data Cycle: Rights and Ethics in a Big Data World&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1606.06565&quot;&gt;Concrete Problems in AI Safety&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1711.07076&quot;&gt;Does mitigating ML’s impact disparity require treatment disparity?&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1706.03021&quot;&gt;Ethical Artificial Intelligence - An Open Question&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1701.07769&quot;&gt;Ethical Considerations in Artificial Intelligence Courses&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1707.05259&quot;&gt;Ethics of autonomous information systems towards an artificial thinking&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1504.05603&quot;&gt;Formalizing Preference Utilitarianism in Physical World Models&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1703.06354&quot;&gt;Goal Conflict in Designing an Autonomous Artificial System&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1610.03229&quot;&gt;In The Wild Residual Data Research and Privacy&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1709.05929&quot;&gt;Institutionally Distributed Deep Learning Networks&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1711.05791&quot;&gt;Maintaining The Humanity of Our Models&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1607.08289&quot;&gt;Mammalian Value Systems&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1710.06882&quot;&gt;Mapping for accessibility: A case study of ethics in data science for social good&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1711.07111&quot;&gt;Modeling Epistemological Principles for Bias Mitigation in AI Systems: An Illustration in Hiring Decisions&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1711.06664&quot;&gt;Predict Responsibly: Increasing Fairness by Learning To Defer&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1609.03266&quot;&gt;Recovering the History of Informed Consent for Data Science and Internet Industry Research Ethics&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1706.02513&quot;&gt;Responsible Autonomy&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1701.02388&quot;&gt;Stoic Ethics for Artificial Agents&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1606.02583&quot;&gt;The Dark Side of Ethical Robots&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1711.00561&quot;&gt;This robot stinks! Differences between perceived mistreatment of robot and computer partners&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1703.04741&quot;&gt;Towards Moral Autonomous Systems&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1711.05905&quot;&gt;Using experimental game theory to transit human values to ethical AI&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;One thing I wanted to think about is, speaking as someone working in this field and interested in making changes in my day-to-day life, what kind of tools or ideas would be useful for me? What should I do?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Alongside this thought, another thought I had is that somehow the big lists of rules feel very impersonal and disconnected from my experiences. I also feel a little bit unsatisfied about opt-in rules. Here’s a few from the around the place, that I’ve seen:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://futureoflife.org/ai-principles/&quot;&gt;Future of Life&lt;/a&gt; (June 2018, relevant items)
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
5 - Race Avoidance: Teams developing AI systems should actively cooperate to avoid corner-cutting on safety standards.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
6 - Safety: AI systems should be safe and secure throughout their operational lifetime, and verifably so where applicable and feasible
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
7 - Failure Transparency: If an AI system causes harm, it should be possible to ascertain why.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
8 - Judical Transparency: Any involvement by an autonomous system in judicial decision-making should provide a satisfactory explanation auditable by a competent human authority.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
9 - Responsibility: Designers and building of advanced AI systems are stakeholders in the moral implications of their use, misuse, and actions, with a responsibility and opportunity to shape those implications.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
10 - Value Alignment: Highly autonomous AI systems should be designed so that their goals and behviours
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
11 - Human Values: AI Systems should be designed and operated so as to be compatible with ideals of human dignift, rights, freedoms, and cultural diversity.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
12 - Personal Privacy: People should have the right to access, manage and control the data they generate, given AI systems’ power to analyze and utilize that data.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
13 - Liberty and Privacy: The application of AI to personal data must not unreasonably curtail people’s real or perceived liberty.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
14 - Shared Benefit: AI technologies should benefit and empower as many people as possible.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
15 - Shared Prosperity: The economic prosperity created by AI should be shared broadly, to benefit all of humanity.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
16 - Human Control: Humans should choose how and whether to delegate decisions to AI systems, to accomplish human chose objectives.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
17 - Non-subversion: The power conferred by control of highly advanced AI systems should respect and improve, rather an subvert, the social and civic processes on which the health of society depends.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
18 - AI Arms Race: An arms race in lethal autonomous weapons should be avoided.
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://www.aiforhumanity.fr/en/&quot;&gt;AI For Humanity&lt;/a&gt; (June 2018)
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
01 - Develop an aggressive data policy
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
02 - Targeting four strategic sectors
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
03 - Boosting the potential of French research
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
04 - Planning for the impact of AI on labour
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
05 - Making AI more environmentally friendly
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
06 - Opening up the black boxes of AI
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
07 - Ensuring that AI supports inclusivity and diversity
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;http://humansforai.com/&quot;&gt;Humans for AI&lt;/a&gt; (June 2018)
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
Broaden the pipeline of minorities currently in tech careers, seeking to move to careers in AI by being the go to destination for all things AI because we believe that diversity of thought and opinion ultimately builds better products.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
Open and inclusive community of people interested in AI by facilitating interactions with experts, practitioners and thought leaders in the field.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
Leverage AI to release a set of free products built by this community to further our mission of bringing diversity to AI.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
Demystify AI by providing a basic understanding of the concepts, thinking and events in AI for novices and non-technical people interested in how AI will impact their lives and their jobs.
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://arxiv.org/pdf/1606.06565.pdf&quot;&gt;Concrete Problems in AI Safety&lt;/a&gt; (2016)
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
Avoid Negative Side Effects
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
Avoid Reward Hacking
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
Scalable Oversight
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
Safe Exploration
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
Robustness to Distributional Shift
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;I have a few problems with these rules:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
It’s easy to imagine situations in which they are counter-productive,
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
I don’t feel a lot of ownership of them, as I wasn’t involved in their construction,
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
No-one is enforcing them on me,
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
They’re often highly impractical or contain colloquial/regional/policital concerns (“Boost French Research …”),
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
They’re also very overwhelming and demanding, how can I ensure that we do &lt;em&gt;all&lt;/em&gt; of them?
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
Even if I &lt;em&gt;say&lt;/em&gt; I’m doing these things, how does any non-technical person know? How can I prove it?
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The positive aspects of them are:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
It’s sometimes easy to think about how to apply them to day-to-day work,
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
They help me think of things that I might not care about day-to-day (i.e. the environmental concerns?),
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
It might help to lobby governments/organisations to get funding to make progress on certain aspects?
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
It provides a framework that might be useful for discussing with colleagues/other people
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;So, what should any given engineer working in this area do? One thought I’ve had recently is a simple one: Let’s just aim at building empathy for the people that will be affected by our software.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is reasonably actionable, say, with local groups by organising meetings between technical people and the people that may be affected. I.e. in the medical-AI setting, let’s organise regular catch-ups between the engineers, the doctors, nursing staff, and hospital adminstration types, along with perhaps patient representatives.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;In the setting, of, say, law software, again we just set up regular events for the two groups to chat through issues, work together on small projects, and build a mutual understanding of difficulties.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;I think this approach is a bit nicer than, say, creating a new set of rules that make sense for us locally, and then forcing people to follow them. One idea I like about the empathy-based/collaborative approach (or “human-centered design”; another term for this kind thing), is that it allos people to &lt;em&gt;adapt to local circumstances&lt;/em&gt;, which I think is really crucial in allowing any one person to feel like they have some control over the application of any rules they come up with, and thus getting them to actually take an interest in enforcing them in their organisation.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;So, my new rule of thumb for this ethics-related AI stuff will be: Can I meet with some of the people that will be affected? What are their thoughts? What problems are they working through and what are they interested in?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;As always, I’m interested in your thoughts on the matter!&lt;/p&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2018-07-25T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://asylum.madhouse-project.org/blog/2018/07/24/on-git-github-and-email/">
	<title>Gergely Nagy (algernon): GitHub vs mailing lists, from another perspective</title>
	<link>https://asylum.madhouse-project.org/blog/2018/07/24/on-git-github-and-email/</link>
	<content:encoded>&lt;p&gt;The other day, I made the mistake of getting involved in a kind of flamewar, that revolved around GitHub versus an email-driven workflow. As can be safely inferred, I do not subscribe to the email-driven workflow idea. There seem to be fundamental disagreements, and I think it's worth a shot to show my side of things.&lt;/p&gt;&lt;p&gt;In this first part, I will reflect on an article titled &quot;&lt;a href=&quot;https://begriffs.com/posts/2018-06-05-mailing-list-vs-github.html&quot;&gt;Mailing lists vs Github&lt;/a&gt;&quot;, which should have been titled &quot;Mailing lists vs the GitHub web UI&quot;, but I digress. Lets cut to the chase!&lt;/p&gt;&lt;h2&gt;Critique&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;Code changes are proposed by making another Github-hosted project (a “fork”), modifying a remote branch, and using the GUI to open a pull request from your branch to the original.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;That is a bit of a simplification, and completely ignores the fact that GitHub has an API. So does GitLab and most other similar offerings. You can work with GitHub, use all of its features, without ever having to open a browser. Ok, maybe once, to create an OAuth token.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Email sub-threads allow specialized discussion about different aspects or sections of the code. A linear Github-style discussion would mix those conversations.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I'm not a fan of deep threads. If something has many sub-threads, or the thread goes too deep, for me that indicates that there's a deeper problem. That the patch may need to be split up, or discussed, or even re-designed first. A certain level of discussion is useful, but once it splits up into longer sub-threads, it becomes way too easy to loose sight of the whole picture.&lt;/p&gt;&lt;p&gt;GitHub's flat discussion discourages this, and I find that to be beneficial most of the time. There are times when I don't, but that happens rarely enough that I can live with it.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;On Github, comments continually change. They become “outdated” and disappear when attached to a line that has been changed. Same for the commits, which vanish after a force-push to the pull request branch. In an email thread, by contrast, the original messages and proposed changes remain for comparison with later messages and patches.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;On mailing lists, when you &quot;force push&quot;, and start a new thread (or subthread at best) with the new version of a patchset, the history is similarly hard to use. You can link the new patchset to the older discussion, but comparsion has to be done manually. Same applies to GitHub. I don't see much of a difference here.&lt;/p&gt;&lt;p&gt;If you send updated patches, that's the same as pushing new commits on GitHub, which appear clearly, and still keep older comments available. Some may get marked outdated, but I consider that a good thing. I don't want to see typically irrelevant, already-addressed comments by default. I can still look at them if I want to, mind you.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Furthermore, patches from multiple authors can’t mix in a Github pull request.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Except, you can, and there are a number of ways to accomplish that. You can &lt;a href=&quot;https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/&quot;&gt;allow maintainers of the upstream repo&lt;/a&gt; to edit your pull request. You can also give permission to other to collaborate with you on a repo, and push to your branches. The latter does give a bit wider access than one might wish, but it is an option. Furthermore, others can open pull request against the branch you used to open yours from. When you merge those, their commits will be added to the pull-request you opened.&lt;/p&gt;&lt;p&gt;This last one fits the GitHub pull-request model best, and when you are comfortable with working with GitHub, it is not any more complex to work this way than with e-mail. Instead of applying patchsets, you merge PRs. Both are supported by integrations, the difference in complexity is none.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The pull requester must turn those comments into commits on the branch if he or she wants to incorporate the suggested changes.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Or the commenter can send a pull-request against the branch the PR in question was opened from. You can have a discussion there, to discuss the changes (much like a subthread on the mailing list). You can even link the two together, and navigate between the two.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Another nice effect is that other people can carry the patch to the finish line if the original author stops caring or being involved.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;On GitHub, if the original proposer goes MIA, anyone can take the pull request, update it, and push it forward. Just like on a mailing list. The difference is that this'll start a new pull request, which is not unreasonable: a lot of time can pass between the original request, and someone else taking up the mantle. In that case, it can be a good idea to start a new thread, instead of resurrecting an ancient one.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Patch Format&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;This is indeed a case where an e-mail based workflow is more flexible. Yet, does it matter? In either case, you can just apply the patch, and create diffs in whatever format, and as much context as you wish. You'll see not just the parts, but the whole thing in context. You can do this with GitHub, you can do this with email. I've been doing it ever since I started working with patches, and it is mighty convenient.&lt;/p&gt;&lt;p&gt;Use the tools you have, if you need and want to. You are not limited to the GitHub UI. Nor are you limited to your MUA, either. There are tools outside of those, tools you can integrate with. Use them.&lt;/p&gt;&lt;p&gt;Don't treat patches as discrete items. Apply them, and have a look at the whole. That gives you all the context you need, in whatever format you desire. I found this to be a very powerful workflow, one that is also easier to work with than patches, because the tree is easier to navigate this way. You can use tools that understand the code, to jump to definitions (that's a lot harder when you view a diff). You can apply code formatting, use refactoring tools to better understand the code - and then undo it all if so desired. You can edit and change code as you review, and work with the code the same way you normally do, using all the help your IDE can give you.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Patch/Discussion mix&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You can link issues and pull requests on GitHub. IDEs with good integration allow easy navigation too, akin to navigating an e-mail thread. There are projects out there that separate bug report and development lists, which suffer from the same issue as GitHub's issue/pull request split.&lt;/p&gt;&lt;p&gt;This is not an inherent advantage of mailing lists. It's an advantage of not separating the two.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;While web apps deliver a centrally-controlled user interface, native applications allow each person to customize their own experience.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;GitHub has an API. There are plenty of IDE integrations. You can customize your user-experience just as much as with an email-driven workflow. You are not limited to the GitHub UI.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Open protocols like SMTP encourage a proliferation of clients.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;There are all kinds of GitHub clients, each with their own added functionalities, each with their own set of features. Just like email clients, you have a wide selection to choose from.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Mail clients provide ways to mark a message important, or set it back as unread.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You can build something like that on top of the GitHub API. I believe that is what &lt;a href=&quot;https://octobox.io/&quot;&gt;Octobox&lt;/a&gt; have been doing.&lt;/p&gt;&lt;p&gt;Again, you are not limited to the GitHub UI.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Some people script their mail client so that they can apply patches with a keyboard shortcut, others go minimalist, and still others even use webmail. Each person is different, and so is their software, but the nature of the mailing list allows them all to work together.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Nothing is stopping anyone from doing the same with GitHub. For example, I use Emacs and Magit to work with GitHub, never leaving my IDE. Others I collaborate with use the GitHub UI. Others use vim and other tools I have no clue about. Some others use Visual Code Studio or Atom. Or GitHub Desktop. Or in some cases, e-mail. We all work on the same projects.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Another area of control is the ability to search and interact with a mailing list while offline.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You can do that with GitHub too. With limitations, and a bit of preparation, but similar limits apply to working with a mailing list while offline, too.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Github requires connectivity to review issues and pull requests.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;No. You can &lt;a href=&quot;https://help.github.com/articles/checking-out-pull-requests-locally/&quot;&gt;fetch the pull requests&lt;/a&gt; you want to review before going offline.&lt;/p&gt;&lt;p&gt;You can also use the API to cache issues, and schedule updates.&lt;/p&gt;&lt;p&gt;A lot of people don't sync their mail locally either, so will have to do some preparations when going offline too. Those who do, can also set up automatic PR syncing too.&lt;/p&gt;&lt;p&gt;Again, you are not limited to what the GitHub UI offers. You can use additional tools, the same way you do when using an email-driven workflow. You aren't limited to what you MUA has to offer.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;With a native email client you can review all emails and attachments offline. You can even send replies to messages offline and the client will queue them until internet access becomes available.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;This assumes that one synced e-mail locally. Many people use IMAP or similar protocols, and typically don't sync for offline use. Doing so is most often a conscious decision. When you do decide that, you can also pull down PRs and issues first. There are existing tools to aid you in that.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Tools can work together, rather than having a GUI locked in the browser.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;GitHub has an API. Granted, it is not an RFC, and you are at the mercy of GitHub to continue providing it. But then, you are often at the mercy of your email provider too.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;What a twist of history, then, that users of git chose Github… a centralized host granting free licenses for open source projects, and requiring projects to store their metadata on company servers.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Except they do not do that. They provide you an API to look at the additional meta-data, to build custom integrations on top of it.&lt;/p&gt;&lt;p&gt;You can host your issues elsewhere. You can even use GitHub as a mirror only. You only need to host your metadata there, if you want to use the features GitHub provides. You are not in any way required to do that.&lt;/p&gt;&lt;p&gt;You can even opt to do both! You can accept GitHub issues, pull request, &lt;strong&gt;and&lt;/strong&gt; have a mailing list! There is nothing stopping you from doing that.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Github can legally delete projects or users with or without cause.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Whoever is hosting your mailing list archives, or your mail, can do the same. It's not unheard of.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;An author can download the source release tarball, make changes in the copy, capture the diff, and email it.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You can do the same with a project using GitHub. Send the e-mail to one of the maintainers. You are at the mercy of the recipients to deal with the patch appropriately, but that's the same situation when they use CVS/Mercurial/etc, and you send a bare patch. They still have a little work to do to fit it in their workflow.&lt;/p&gt;&lt;p&gt;But GitHub itself does not prevent accepting e-mail.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Sending and applying patches cuts out busywork like cleaning up remote branches after merge, or creating a local branch in the forked repo in preparation for a pull request.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;All of this can be easily automated away. Besides, if you are a long-term contributor, creating a local branch is a good idea &lt;em&gt;anyway&lt;/em&gt;, GitHub or not.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;For comparison, I remember teaching a group of new programmers how to use Github, and was conscious at the time of all the weird steps I asked them to do.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;For comparsion, when my Wife (a garden engineer, not a tech-savvy person) wanted to contribute a little during Hacktoberfest, she found the &quot;Edit file&quot; button on the UI, and went further from there on her own. No weird steps, just edit a file, submit changes, done.&lt;/p&gt;&lt;p&gt;She'd never be able to send an patch by e-mail.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;There’s also less busywork for finished communications. There aren’t things to “clean up” like abandoned pull requests, merged branches, or issues to mark closed. The replies just stop on those threads.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I'd rather see an explicit marker that an issue is resolved or a PR is merged, but hey, that's me, who doesn't like to dig this information out of random e-mail threads. Discoverability is important.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;PGP provides a further guarantee of identity, verified through a decentralized web of trust.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You can sign commits and tags while using GitHub. You can't sign comments, last I checked, but you can respond to them by email, which is signed. It might look a bit weird on the UI, but hey.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Perhaps this article can start these developers on the path to rediscovering the care and engineering that went into classic email clients (“MUAs” as they are called).&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Or perhaps there are people who'd rather not deal with email, because they have purpose-built tools that aid them better than a MUA and tools built around that workflow would.&lt;/p&gt;&lt;h2&gt;Exceptions&lt;/h2&gt;&lt;p&gt;There are certainly projects where the GitHub model just doesn't work, the Linux kernel being one particularly great example of that. What works for one project, may not be the best choice for another. I assert that most projects are not the Linux kernel, and aren't anywhere near that level. As such, modeling your workflow on something with vastly different needs may not be the best course of action.&lt;/p&gt;&lt;h2&gt;Next up&lt;/h2&gt;&lt;p&gt;In the next installment of these series, I will explain my workflow. No comparisons, just examples of how I, an allegedly seasoned engineer of sorts, uses the tools he has at hand. It's a workflow of a power user. One who prefers working with APIs instead of email. It may include a little bit of history.&lt;/p&gt;&lt;p&gt;After that, I'll have a look at a few other posts that campaign for an email-driven workflow, and see where that takes us.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-24T12:45:00+00:00</dc:date>
	<dc:creator>Gergely Nagy</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2018/03/writing-a-simple-ipfs-crawler/">
	<title>Gokberk Yaltirakli (gkbrk): Writing a Simple IPFS Crawler</title>
	<link>https://gkbrk.com/2018/03/writing-a-simple-ipfs-crawler/</link>
	<content:encoded>&lt;p&gt;IPFS is a peer-to-peer protocol that allows you to access and publish content in
a decentralized fashion. It uses hashes to refer to files. Short of someone
posting hashes on a website, discoverability of content is pretty low. In this
article, we&amp;rsquo;re going to write a very simple crawler for IPFS.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s challenging to have a traditional search engine in IPFS because content
rarely links to each other. But there is another way than just blindly following
links like a traditional crawler.&lt;/p&gt;

&lt;h2&gt;Enter DHT&lt;/h2&gt;

&lt;p&gt;In IPFS, the content for a given hash is found using a &lt;strong&gt;D&lt;/strong&gt;istributed &lt;strong&gt;H&lt;/strong&gt;ash
&lt;strong&gt;T&lt;/strong&gt;able. Which means our IPFS daemon receives requests about the location of
IPFS objects. When all the peers do this, a key-value store is distributed among
them; hence the name &lt;em&gt;Distributed Hash Table&lt;/em&gt;. Even though we won&amp;rsquo;t get all the
queries, we will still get a fraction of them. We can use these to discover when
people put files on IPFS and announce it on the DHT.&lt;/p&gt;

&lt;p&gt;Fortunately, IPFS lets us see those DHT queries from the log API. For our
crawler, we will use the Rust programming language and the
&lt;a href=&quot;https://crates.io/crates/ipfsapi&quot;&gt;ipfsapi&lt;/a&gt; crate for communicating with
IPFS. You can add &lt;code&gt;ipfsapi = &amp;quot;0.2&amp;quot;&lt;/code&gt; to your Cargo.toml file to get the
dependency.&lt;/p&gt;

&lt;h2&gt;Using IPFS from Rust&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s test if our IPFS daemon and the IPFS crate are working by trying to fetch
and print a file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;api&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;IpfsApi&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;5001&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;

&lt;span&gt;let&lt;/span&gt; &lt;span&gt;bytes&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;api&lt;/span&gt;&lt;span&gt;.cat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;let&lt;/span&gt; &lt;span&gt;data&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;from_utf8&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;bytes&lt;/span&gt;&lt;span&gt;.collect&lt;/span&gt;&lt;span&gt;())&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;println!&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;{}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;data&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code should grab the contents of the hash, and if everything is working
print &amp;ldquo;Hello World&amp;rdquo;.&lt;/p&gt;

&lt;h2&gt;Getting the logs&lt;/h2&gt;

&lt;p&gt;Now that we can download files from IPFS, it&amp;rsquo;s time to get all the logged events
from the daemon. To do this, we can use the &lt;em&gt;log_tail&lt;/em&gt; method to get an
iterator of all the events. Let&amp;rsquo;s get everything we get from the logs and print
it to the console.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;line&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;api&lt;/span&gt;&lt;span&gt;.log_tail&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;println!&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;{}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;line&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gets us all the loops, but we are only interested in DHT events, so let&amp;rsquo;s
filter a little. A DHT announcement looks like this in the JSON logs.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight json&quot;&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;&quot;duration&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;235926&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;&quot;event&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;handleAddProvider&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;&quot;key&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;&quot;peer&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;QmeqzaUKvym9p8nGXYipk6JpafqqQAnw1ZQ4xBoXWcCrLb&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;&quot;session&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;ffffffff-ffff-ffff-ffff-ffffffffffff&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;&quot;system&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;dht&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;&quot;time&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;2018-03-12T00:32:51.007121297Z&quot;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are interested in all the log entries with the event &lt;em&gt;handleAddProvider&lt;/em&gt;. And
the hash of the IPFS object is &lt;em&gt;key&lt;/em&gt;. We can filter the iterator like this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;logs&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;api&lt;/span&gt;&lt;span&gt;.log_tail&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
        &lt;span&gt;.unwrap&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
        &lt;span&gt;.filter&lt;/span&gt;&lt;span&gt;(|&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;|&lt;/span&gt; &lt;span&gt;x&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&quot;event&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.as_str&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;Some&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;handleAddProvider&quot;&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
        &lt;span&gt;.filter&lt;/span&gt;&lt;span&gt;(|&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;|&lt;/span&gt; &lt;span&gt;x&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&quot;key&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.is_string&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;

&lt;span&gt;for&lt;/span&gt; &lt;span&gt;log&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;logs&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;hash&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;log&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&quot;key&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.as_str&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt;.unwrap&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt;.to_string&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;
    &lt;span&gt;println!&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;{}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;hash&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Grabbing the valid images&lt;/h2&gt;

&lt;p&gt;As a final step, we&amp;rsquo;re going to save all the valid image files that we come
across. We can use the &lt;a href=&quot;https://crates.io/crates/image&quot;&gt;image&lt;/a&gt; crate. Basically;
for each object we find, we&amp;rsquo;re going to try parsing it as an image file. If that
succeeds, we likely have a valid image that we can save.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s write a function that loads an image from IPFS, parses it with the &lt;em&gt;image&lt;/em&gt;
crate and saves it to the &lt;em&gt;images/&lt;/em&gt; folder.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;check_image&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;hash&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;str&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&amp;gt;&lt;/span&gt; &lt;span&gt;Result&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;api&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;IpfsApi&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;5001&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;

    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;data&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Vec&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;u8&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;api&lt;/span&gt;&lt;span&gt;.cat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;hash&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.collect&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;img&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;image&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;load_from_memory&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;.as_slice&lt;/span&gt;&lt;span&gt;())&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

    &lt;span&gt;println!&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;[!!!] Found image on hash {}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;hash&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;

    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;path&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;format!&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;images/{}.jpg&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;hash&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;file&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;File&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;create&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;img&lt;/span&gt;&lt;span&gt;.save&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; &lt;span&gt;file&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;image&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;JPEG&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

    &lt;span&gt;Ok&lt;/span&gt;&lt;span&gt;(())&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then connecting to our main loop. We&amp;rsquo;re checking each image in a seperate
thread because IPFS can take a long time to resolve a hash or timeout.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;log&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;logs&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;hash&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;log&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&quot;key&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.as_str&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt;.unwrap&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt;.to_string&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;
    &lt;span&gt;println!&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;{}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;hash&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;

    &lt;span&gt;thread&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;move&lt;/span&gt;&lt;span&gt;||&lt;/span&gt; &lt;span&gt;check_image&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;hash&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Possible improvements / future work&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;File size limits:&lt;/strong&gt; Checking the size of objects before downloading them&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;More file types:&lt;/strong&gt; Saving more file types. Determining the types using a
utility like &lt;em&gt;file&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parsing HTML:&lt;/strong&gt; When the object is valid HTML, parse it and index the text
in order to provide search&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2018-07-23T15:54:13+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2018/02/simple-dbus-service-in-python/">
	<title>Gokberk Yaltirakli (gkbrk): Writing a Simple D-Bus Service in Python</title>
	<link>https://gkbrk.com/2018/02/simple-dbus-service-in-python/</link>
	<content:encoded>&lt;p&gt;D-Bus is a message bus that Linux systems use in order to make programs
communicate with each other or with the system itself. It allows applications to
integrate amongst themselves using well-defined interfaces. This allows each
application to provide services that can be used by others, sort of like adding
API&amp;rsquo;s to your programs.&lt;/p&gt;

&lt;p&gt;In this article, we&amp;rsquo;re going to write a small D-Bus service and a client to
consume it. Perhaps some people see D-Bus as an ancient and scary relic of the
past, but hopefully after reading this you will find it an approachable topic.&lt;/p&gt;

&lt;h2&gt;D-Bus Service for Getting the Current Time&lt;/h2&gt;

&lt;p&gt;First of all, let&amp;rsquo;s import &lt;em&gt;dbus&lt;/em&gt; and &lt;em&gt;time&lt;/em&gt;. This shouldn&amp;rsquo;t be a big surprise
since we&amp;rsquo;re writing a D-Bus service about time.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;dbus&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;dbus.service&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;time&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we need to create a D-Bus service class. This is done by inheriting from
&lt;code&gt;dbus.service.Object&lt;/code&gt;. The functions we put into this class will be automatically
exported as D-Bus methods.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Time&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;dbus&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;service&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;bus&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;dbus&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SessionBus&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
        &lt;span&gt;name&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;dbus&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;service&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;BusName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'com.gkbrk.Time'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;bus&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;bus&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
        &lt;span&gt;super&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;'/Time'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This part just gets a connection to the Session Bus and sets the name of our
service. Let&amp;rsquo;s write our function that returns the current time.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;    &lt;span&gt;@dbus.service.method&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'com.gkbrk.Time'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;out_signature&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'s'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;CurrentTime&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
        &lt;span&gt;&quot;&quot;&quot;Use strftime to return a formatted timestamp
        that looks like 23-02-2018 06:57:04.&quot;&quot;&quot;&lt;/span&gt;

        &lt;span&gt;formatter&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;d-&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;m-&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;Y &lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;H:&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;M:&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;S'&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;strftime&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;formatter&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This method is a small wrapper around the strftime function from the standard
library, which formats the current time into a human readable string.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I want to talk about the decorator for a bit. The &lt;em&gt;out_signature = &amp;lsquo;s&amp;rsquo;&lt;/em&gt; part
basically tells D-Bus that the function returns a string. If we had made it
&lt;em&gt;out_signature = &amp;lsquo;ss&amp;rsquo;&lt;/em&gt;, that would mean we are returning two strings from our
function, which is a tuple of strings in Python. Similarly, putting
&lt;em&gt;in_signature&lt;/em&gt; there would let us denote the function arguments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Running the Service&lt;/h2&gt;

&lt;p&gt;In order to run the service, we&amp;rsquo;re going to need a bit more boilerplate. The
code below creates the GLib main loop, registers our service and runs the
loop. The main loop will stop the program from terminating, so we can respond to
calls to our service.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;'__main__'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
    &lt;span&gt;import&lt;/span&gt; &lt;span&gt;dbus.mainloop.glib&lt;/span&gt;
    &lt;span&gt;from&lt;/span&gt; &lt;span&gt;gi.repository&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; &lt;span&gt;GLib&lt;/span&gt;

    &lt;span&gt;dbus&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;mainloop&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;glib&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;DBusGMainLoop&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;set_as_default&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;

    &lt;span&gt;loop&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;GLib&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MainLoop&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
    &lt;span&gt;object&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Time&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
    &lt;span&gt;loop&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Writing a Client to Access Our Service&lt;/h2&gt;

&lt;p&gt;Writing a client is a lot easier than writing the service. Again, we need to
import &lt;em&gt;dbus&lt;/em&gt; and connect to the Session Bus for this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;dbus&lt;/span&gt;

&lt;span&gt;bus&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;dbus&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SessionBus&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After this, we will create our Time object again, using the &lt;code&gt;com.gkbrk.Time&lt;/code&gt;
address we created before.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;time&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;bus&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get_object&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'com.gkbrk.Time'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;'/Time'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using this object, we can call any method we defined on the service and use the
result. Let&amp;rsquo;s print the current time that we get from our D-Bus service.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;curr&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;CurrentTime&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'The current time is'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;curr&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there are no problems; if you run the service we wrote in a terminal and run
the client from another terminal, you should get the time printed on your
console.&lt;/p&gt;

&lt;p&gt;Now, you should be able to create simple services that are useful to you. If you
come up with any interesting services, I would love to hear about them via email
or Twitter.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thank you for reading my article. You can find related information in these
sources.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dbus.freedesktop.org/doc/dbus-python/doc/tutorial.html&quot;&gt;D-Bus Python Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/D-Bus&quot;&gt;D-Bus on Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GNOME/d-feet&quot;&gt;d-feet&lt;/a&gt; - A useful program to view all D-Bus
services available on your system using a GUI&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2018-07-23T15:54:13+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2018/01/evolving-line-art/">
	<title>Gokberk Yaltirakli (gkbrk): Evolving Line Art</title>
	<link>https://gkbrk.com/2018/01/evolving-line-art/</link>
	<content:encoded>&lt;p&gt;In this article, I want to talk about a really simple technique for evolving line-art from pictures. On top of being an simple example for genetic algorithms, it is also a fun programming project that can be done in short time.&lt;/p&gt;

&lt;p&gt;For this project, we are going to use the Hill Climbing algorithm. The algorithm for evolving pictures is like the following.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create two empty images, image 1 and image 2&lt;/li&gt;
&lt;li&gt;Do a small random modification (like a line) to the first image&lt;/li&gt;
&lt;li&gt;If the first image is closer to the target than the first one, copy it to image 2&lt;/li&gt;
&lt;li&gt;Otherwise, copy the second image to image 1&lt;/li&gt;
&lt;li&gt;Goto 2&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will be using Rust for this project. Fortunately, Rust has really good libraries that we can use to read, manipulate and write image files.&lt;/p&gt;

&lt;h2&gt;Loading the Target Image&lt;/h2&gt;

&lt;p&gt;The image crate makes loading files really straightforward. Here&amp;rsquo;s how to load the file called &lt;code&gt;target.png&lt;/code&gt;. We will also create the two temporary images that we need for the algorithm. We will make those&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;target&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;image&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;open&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;target.png&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.expect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;Cannot load target image&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;

&lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img1&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new_rgb8&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;
&lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img2&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new_rgb8&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Extracting the Colours&lt;/h2&gt;

&lt;p&gt;Normally, picking the colours randomly should work just as well as using the colours from the picture. But if we extract all the colours and pick randomly from those, the algorithm will be able to generate the images faster. To achieve this, we will create a Vector and store all the colours in there.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;colours&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Vec&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

&lt;span&gt;for&lt;/span&gt; &lt;span&gt;pixel&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.pixels&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;rgba&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;pixel&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.to_rgba&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;colours&lt;/span&gt;&lt;span&gt;.contains&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;rgba&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
        &lt;span&gt;colours&lt;/span&gt;&lt;span&gt;.push&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;rgba&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Difference between two images&lt;/h2&gt;

&lt;p&gt;To determine if an image is closer to our target, we need a function to find the difference of two images. The &lt;em&gt;root_mean_squared_error&lt;/em&gt; from the &lt;em&gt;imageproc&lt;/em&gt; crate does exactly that.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;image_diff&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;img2&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&amp;gt;&lt;/span&gt; &lt;span&gt;f64&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;imageproc&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;stats&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;root_mean_squared_error&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;img2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function returns the amount of difference between two images as a float. When we&amp;rsquo;re building the hill climbing algorithm, our goal is going to be minimising this number.&lt;/p&gt;

&lt;h2&gt;Drawing random circles&lt;/h2&gt;

&lt;p&gt;Personally I like the art style of the random lines, but it evolves slowly. One way to speed-up the process and get a different art style is using different shapes. Perhaps the simplest shape that can be drawn is a circle. It only needs a location (x, y) and a radius. Here&amp;rsquo;s how to draw a random circle with a radius of 5 in your image.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;pos&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;i32&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;
&lt;span&gt;let&lt;/span&gt; &lt;span&gt;colour&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.choose&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;colours&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.unwrap&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

&lt;span&gt;imageproc&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;drawing&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;draw_filled_circle_mut&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;pos&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;colour&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Drawing random lines&lt;/h2&gt;

&lt;p&gt;For drawing, we are going to be using the imageproc crate again. Here&amp;rsquo;s how to draw a black line from (10, 10) to (20, 20).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;start&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;10f32&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;10f32&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;let&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;20f32&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;20f32&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;let&lt;/span&gt; &lt;span&gt;color&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Rgba&lt;/span&gt;&lt;span&gt;([&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);&lt;/span&gt;

&lt;span&gt;imageproc&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;drawing&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;draw_line_segment_mut&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;start&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;colour&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s draw a line with a color chosen from our random list.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;thread_rng&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

&lt;span&gt;let&lt;/span&gt; &lt;span&gt;start&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;f32&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;f32&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;f32&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;f32&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;
&lt;span&gt;let&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;   &lt;span&gt;(&lt;/span&gt;&lt;span&gt;f32&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;f32&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;f32&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;f32&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;
&lt;span&gt;let&lt;/span&gt; &lt;span&gt;colour&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.choose&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;colours&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.unwrap&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

&lt;span&gt;imageproc&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;drawing&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;draw_line_segment_mut&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;start&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;colour&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;The Hill Climbing Algorithm&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t know how it works, I have written about the &lt;a href=&quot;https://gkbrk.com/wiki/hill_climbing/&quot;&gt;hill climbing algorithm&lt;/a&gt; in my wiki. Basically, it starts with a random solution and repeatedly mutates it in a way that it becomes better and better according an evaluation function we provide.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s write the skeleton of our hill climber. We&amp;rsquo;ve already created the target image and the temporary images in the previous sections.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;loop&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;pos&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;i32&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;colour&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.choose&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;colours&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.unwrap&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

    &lt;span&gt;imageproc&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;drawing&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;draw_filled_circle_mut&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;pos&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;colour&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;image_diff&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;image_diff&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
        &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img2&lt;/span&gt;&lt;span&gt;.copy_from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
        &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;.copy_from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Saving regular snapshots&lt;/h2&gt;

&lt;p&gt;Since this program can improve the image for a really long time, until it becomes a pixel-perfect copy of the target, we might want to save snapshots if the image we get in regular intervals. This will allow us to check the progress and stop the program once we are satisfied with the results. Let&amp;rsquo;s save the image every 500 iterations.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;i&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; &lt;span&gt;500&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;img2&lt;/span&gt;&lt;span&gt;.save&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; &lt;span&gt;File&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;create&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;Path&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;output.png&quot;&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;span&gt;.unwrap&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt; &lt;span&gt;image&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;PNG&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And with that, the project is done. Here&amp;rsquo;s the full code, in a form that compiles and runs. Play around with it, try new shapes and different algorithms. If you implement this in another language, let me know and share your own code with result pictures.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;extern&lt;/span&gt; &lt;span&gt;crate&lt;/span&gt; &lt;span&gt;image&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;extern&lt;/span&gt; &lt;span&gt;crate&lt;/span&gt; &lt;span&gt;imageproc&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;extern&lt;/span&gt; &lt;span&gt;crate&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;use&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;fs&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;File&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;use&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Path&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;use&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Rng&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;use&lt;/span&gt; &lt;span&gt;image&lt;/span&gt;&lt;span&gt;::{&lt;/span&gt;&lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;GenericImage&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Pixel&lt;/span&gt;&lt;span&gt;};&lt;/span&gt;

&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;image_diff&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;img2&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&amp;gt;&lt;/span&gt; &lt;span&gt;f64&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;imageproc&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;stats&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;root_mean_squared_error&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;img2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;target&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;image&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;open&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;target.png&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.expect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;Cannot load target image&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;

    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img1&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new_rgb8&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img2&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new_rgb8&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;

    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;colours&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Vec&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;pixel&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.pixels&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
        &lt;span&gt;let&lt;/span&gt; &lt;span&gt;rgba&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;pixel&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.to_rgba&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;colours&lt;/span&gt;&lt;span&gt;.contains&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;rgba&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;colours&lt;/span&gt;&lt;span&gt;.push&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;rgba&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;

    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;thread_rng&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;i&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;loop&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
        &lt;span&gt;let&lt;/span&gt; &lt;span&gt;pos&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;   &lt;span&gt;(&lt;/span&gt;&lt;span&gt;i32&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;
        &lt;span&gt;let&lt;/span&gt; &lt;span&gt;colour&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.choose&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;colours&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.unwrap&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

        &lt;span&gt;imageproc&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;drawing&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;draw_filled_circle_mut&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;pos&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;colour&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;

        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;image_diff&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;image_diff&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img2&lt;/span&gt;&lt;span&gt;.copy_from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;.copy_from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;

        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;i&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; &lt;span&gt;100&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;println!&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;{}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;i&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
            &lt;span&gt;img2&lt;/span&gt;&lt;span&gt;.save&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; &lt;span&gt;File&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;create&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;Path&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;output.png&quot;&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;span&gt;.unwrap&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt; &lt;span&gt;image&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;PNG&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;

        &lt;span&gt;i&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2018-07-23T15:54:13+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2018/01/welcome-2018/">
	<title>Gokberk Yaltirakli (gkbrk): Welcome 2018!</title>
	<link>https://gkbrk.com/2018/01/welcome-2018/</link>
	<content:encoded>&lt;p&gt;Hello dear readers, welcome to another episode of &amp;ldquo;New Year, New Me&amp;rdquo;. First of all, I want to wish everyone a happy new year. Hopefully, 2018 will be full of happiness, health and success for you. For a variety of reasons some of you might have had a bad year. But worry not; because 2018 is here and whatever your goals were, you can keep trying.&lt;/p&gt;

&lt;p&gt;Today I want to reflect upon the previous year and make some resolutions about the upcoming one. Personally, 2017 was a really good year for me. On the education, career and personal fronts, I made a lot of progress and had a lot of fun. Since I never got around to writing one of those for 2016, this post might have some older stuff as well.&lt;/p&gt;

&lt;h2&gt;Reflecting on the previous year&lt;/h2&gt;

&lt;p&gt;I finished my first year of university and started my second one. During this process I met a lot of interesting and cool people, like-minded individuals if you will. I always imagined university would be a fun place to be in but that was an understatement. If you use all the resources and facilities provided to you, it can be a very useful and valuable experience.&lt;/p&gt;

&lt;p&gt;I got my first job during August 2017. I started working part-time as a web developer. This provided me with experience related to my field as well as some extra money. I think having my first job in my own field is a really good opportunity compared to just working a random job.&lt;/p&gt;

&lt;p&gt;Other than my current job, I also found a placement for next year. I signed a contract with them around the end of 2017. After I finish my second year in school, I will be working in London as a full-time Software Engineer. I am really excited for this, I have met some people from the company as well as people from my team. They all feel like really nice people and I&amp;rsquo;m looking forward to working with them.&lt;/p&gt;

&lt;p&gt;I started learning Chinese (Mandarin if you&amp;rsquo;re pedantic). Originally I was planning to learn Japanese, which would probably be easier for me because of similarities between Japanese and my native language, but in the end I decided to go with Chinese. So far I&amp;rsquo;m pleased with my decision, although my progress is slow because of my heavy workload.&lt;/p&gt;

&lt;p&gt;During the good and bad parts of the year, my amazing girlfriend stood by me and supported me a lot. She made the worst part of my year (and one of worst times of my life) bearable, and I am really thankful to have such a kind and loving person in my life. We have been in a long-distance relationship for a while, but I am going to meet her in a few days so I am really excited.&lt;/p&gt;

&lt;p&gt;I spent the whole year with great people. I want to express my gratitude towards one of the really special ones. Melis, my former flatmate, has been an incredible friend. She made my already bright life even brighter. At this point, she is like a sister to me. We secretly believe that we are somehow telepathically connected, although we have not been able to find any scientific evidence for this. Anyway; she is my brotato, and hopefully she will stay that way for a long time.&lt;/p&gt;

&lt;h2&gt;Resolutions for the new year&lt;/h2&gt;

&lt;p&gt;Ah, so here is the part where I tell you about how I&amp;rsquo;m going to become a completely better person compared to yesterday. Get ready for a whole bunch of empty promises that say how I&amp;rsquo;m going to study 20 hours a day and do cardio on top of it. Joking aside, I believe these new-year resolutions are useful things. It&amp;rsquo;s like a to-do list of things that would be good to try this year. Even if you don&amp;rsquo;t accomplish all (or any) of them, it is still enough to try.&lt;/p&gt;

&lt;p&gt;Here is my list for 2018.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Make progress in Chinese.&lt;/strong&gt; I want to spend more time this year learning Chinese. My goal is practicing common words and sentence structures. Maybe I will be able to read a children&amp;rsquo;s book by the end of this year.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write more blog posts.&lt;/strong&gt; I think having a small number of blog posts is fine, as long as the content is interesting. But I would still like to write more regularly. At least once a month would be ideal.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;More gym.&lt;/strong&gt; Although I walk a lot every day and prefer walking to the bus or Uber, I still think I need to be a little more active. I think the gym is a good way to spend time and become healthier at the same time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eat healthier.&lt;/strong&gt; Speaking of healthy, I want to focus on foods with more nutrients. This is not very easy since I don&amp;rsquo;t have too much time for cooking, but a phone app can be helpful for keeping track of my food intake.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Waste less time.&lt;/strong&gt; I usually find myself needing more time for things, which makes me believe there is a lot of wasted time in my day. I bought an Android app that allows me to do &amp;lsquo;Time-tracking&amp;rsquo;. I am hoping that it helps me be a little more efficient with my time management, but I am scared it might turn into &amp;ldquo;You watched 6 hours of Netflix today&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learn how to draw.&lt;/strong&gt; I want to improve my drawing, which isn&amp;rsquo;t in a very good condition now. My goal is to spend around 15-30 minutes every day to try drawing something simple.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is it a long list? Yeah. Is it likely that I will do everything in my list for the entire year? Probably not. But is it worth trying to do it and possibly improving yourself? Absolutely.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I urge everyone to also write something short, reflecting on their year and making resolutions for the new one. Writing this down and sharing it with other people might provide some extra motivation.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-23T15:54:13+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2017/10/putting-my-blog-on-ipfs/">
	<title>Gokberk Yaltirakli (gkbrk): Putting My Blog on IPFS</title>
	<link>https://gkbrk.com/2017/10/putting-my-blog-on-ipfs/</link>
	<content:encoded>&lt;p&gt;I&amp;rsquo;ve always been fascinated by the idea of peer-to-peer network protocols, and putting my website on a distributed network was something I&amp;rsquo;ve been meaning to do for a while. The recent increase in blog posts about IPFS finally pushed me over the tipping point. Hopefully, you can read this article on IPFS &lt;a href=&quot;https://ipfs.io/ipns/gkbrk.com/2017/10/putting-my-blog-on-ipfs/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am really happy with this change, and I urge everyone to do the same with their websites. IPFS may or may not be the perfect solution to the decentralized web, but we need to start somewhere. In this article, I will try to give a step-by-step guide for putting static websites on IPFS.&lt;/p&gt;

&lt;h2&gt;Getting started&lt;/h2&gt;

&lt;p&gt;First, a bit about getting your feet wet with IPFS. Every file and directory in IPFS can be referenced by a hash that looks like &lt;code&gt;QmNiMm9LUX9R4Ezu2NAsraxFSyrbNR6rgGwCDu71Dy4NwQ&lt;/code&gt;. If you have it installed on your computer, you can go on the command line to download and view files.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight shell&quot;&gt;&lt;code&gt;ipfs &lt;span&gt;cat &lt;/span&gt;QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command will output &amp;lsquo;Hello World&amp;rsquo;. I chose this as an example, because I assume hello world is something a lot of people will have on their nodes.&lt;/p&gt;

&lt;p&gt;Just as easy as getting files, putting files is also easy. Lets say you have a picture of a cat called &lt;code&gt;kitten.jpg&lt;/code&gt;. Running &lt;code&gt;ipfs add kitten.jpg&lt;/code&gt; give you a hash and your node will start seeding it. You can just give that hash to people you want to share the file with. You can try it like &lt;a href=&quot;https://ipfs.io/ipfs/Qmd286K6pohQcTKYqnS1YhWrCiS4gz7Xi34sdwMe9USZ7u&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Putting a website on IPFS&lt;/h2&gt;

&lt;p&gt;So how do we go from putting up a file there to putting up a whole website? Just like most unix commands, IPFS also accepts the parameter &lt;code&gt;-r&lt;/code&gt; for running the command recursively. Let&amp;rsquo;s say our website is in the public/ directory. If we run &lt;code&gt;ipfs add -r public/&lt;/code&gt;, it will first add all the files and subdirectories into IPFS, and finally give us a hash that represents the whole folder.&lt;/p&gt;

&lt;p&gt;Other people can view your website with that hash. The hash changes if you update your website, but you can solve this issue with IPNS. IPNS basically allows you use a private key to update the contents of your files. As long as you have your private key, you can publish updates to your IPFS website.&lt;/p&gt;

&lt;p&gt;If you want to use IPNS &lt;em&gt;(you probably do)&lt;/em&gt;, you need to run &lt;code&gt;ipfs name publish &amp;lt;the hash of the folder&amp;gt;&lt;/code&gt;. After doing these, you can give your IPNS hash to people, and whenever you update your website they will see the updated version as well.&lt;/p&gt;

&lt;p&gt;But as a person who has keeps losing private keys, I can just use my domain&amp;rsquo;s DNS records to change the hash whenever I need to.&lt;/p&gt;

&lt;h2&gt;Using DNS for IPFS&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t want to deal with giving out long hashes to people, IPFS allows you to use your normal domain as well. To do this, you need to add a line to your DNS records.&lt;/p&gt;

&lt;p&gt;Just go to your domain&amp;rsquo;s DNS settings, and find where to add a TXT record. In the content, you should write &lt;code&gt;dnslink=/ipfs/&amp;lt;your hash here&amp;gt;&lt;/code&gt; or &lt;code&gt;dnslink=/ipns/&amp;lt;your hash here&amp;gt;&lt;/code&gt; depending on what you use.&lt;/p&gt;

&lt;p&gt;As an example, you can access my blog from &lt;a href=&quot;https://ipfs.io/ipns/gkbrk.com&quot;&gt;/ipns/gkbrk.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Hugo Specific Fixes&lt;/h2&gt;

&lt;p&gt;When you are hosting your website on IPFS, one issue you should be careful of is &lt;em&gt;relative&lt;/em&gt; vs. &lt;em&gt;absolute&lt;/em&gt; links. If the linking is wrong, you will have issues when people try to navigate your website.&lt;/p&gt;

&lt;p&gt;In your Hugo config file &lt;em&gt;(config.toml)&lt;/em&gt;, you should comment out baseurl and set relativeURLs to true.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight toml&quot;&gt;&lt;code&gt;&lt;span&gt;# baseurl = ''&lt;/span&gt;
&lt;span&gt;relativeURLs&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there are still issues, you can fix them whenever you come across them incrementally.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;After all these steps, you should be able to successfully host your website on IPFS. If you do it, make sure to let me know by sending an email, a tweet or comment on where you&amp;rsquo;re reading this from.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-23T15:54:13+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2017/06/unprotected-redis/">
	<title>Gokberk Yaltirakli (gkbrk): Unprotected Redis Instances in the Wild</title>
	<link>https://gkbrk.com/2017/06/unprotected-redis/</link>
	<content:encoded>&lt;p&gt;If you follow programming blogs, it is not uncommon to come across articles
that mention how MongoDB exposes your private information without any
protection on default settings. But Mongo is not alone in this. Even with sane
defaults, it is possible to find that a lot of people have misconfigured their
databases for &lt;em&gt;their convenience&lt;/em&gt;. In this list of exposed servers is our
beloved Redis.&lt;/p&gt;

&lt;p&gt;Redis is normally highly praised among developers. But even this doesn&amp;rsquo;t stop
it from being used incorrectly. The server can accept a plaintext protocol,
which will make it easier for us to use. To test; we can download Redis, create
a server and insert some dummy keys into it (like &lt;code&gt;key1&lt;/code&gt;, &lt;code&gt;key2&lt;/code&gt;, &lt;code&gt;key3&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If we look at the Redis documentation, we will find a function called
&lt;a href=&quot;https://redis.io/commands/randomkey&quot;&gt;RANDOMKEY&lt;/a&gt;. The name is pretty
self-explanatory, it returns the name of a random key from the database. If we
open a TCP connection to the server and send &lt;code&gt;RANDOMKEY\r\n&lt;/code&gt;, the server might
respond with &lt;code&gt;key2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to find Redis servers that allow anonymous access, we will write a
script to scan the internet. The script will&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Generate random IP addresses&lt;/li&gt;
&lt;li&gt;Try to connect to them on the Redis port 6379&lt;/li&gt;
&lt;li&gt;If the connection is successful, send the RANDOMKEY command and check if
there is any output.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sending the RANDOMKEY command will let us check if the server we connected to
is actually Redis. It also allows us to filter empty servers if we want to.&lt;/p&gt;

&lt;p&gt;We can use Go to write a short script for this purpose.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight c&quot;&gt;&lt;code&gt;&lt;span&gt;ip&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Sprintf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;%d.%d.%d.%d:6379&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Intn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Intn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;
                    &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Intn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Intn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
&lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code will generate a random IP address with the port 6379, and print it on
the screen. When we&amp;rsquo;re scanning for lots of random IP addresses, it is likely
that we will attempt to connect to lots of addresses that have no servers
listening. In order to prevent slowdowns, we will set a timeout of 2 seconds.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight c&quot;&gt;&lt;code&gt;&lt;span&gt;conn&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;net&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;DialTimeout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;tcp&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If our connection is successful, we set a new timeout of 5 seconds and send the
command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight c&quot;&gt;&lt;code&gt;&lt;span&gt;conn&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetDeadline&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Now&lt;/span&gt;&lt;span&gt;().&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Second&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
&lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Fprintf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;conn&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;RANDOMKEY&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After this, we try to read a line from the socket and print it along with the
IP. This will allow us to see which servers are empty and which ones have
content. It also lets us filter potential false positives that aren&amp;rsquo;t actually
Redis servers.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight c&quot;&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;line&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;
&lt;span&gt;_&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Fscanln&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;conn&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;line&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;line&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s wrap all this in a function along with error handling, and spawn 200
coroutines to scan the internet for unprotected Redis servers.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight c&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
    &lt;span&gt;&quot;net&quot;&lt;/span&gt;
    &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;
    &lt;span&gt;&quot;math/rand&quot;&lt;/span&gt;
    &lt;span&gt;&quot;time&quot;&lt;/span&gt;
&lt;span&gt;)&lt;/span&gt;

&lt;span&gt;func&lt;/span&gt; &lt;span&gt;scanner&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
        &lt;span&gt;timeout&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Second&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;
        &lt;span&gt;ip&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Sprintf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;%d.%d.%d.%d:6379&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Intn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;
                           &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Intn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Intn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Intn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
        &lt;span&gt;conn&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;net&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;DialTimeout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;tcp&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;conn&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetDeadline&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Now&lt;/span&gt;&lt;span&gt;().&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Second&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
            &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Fprintf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;conn&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;RANDOMKEY&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; &lt;span&gt;line&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;
            &lt;span&gt;_&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Fscanln&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;conn&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;line&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
                &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
                &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;line&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;i&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;300&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
        &lt;span&gt;go&lt;/span&gt; &lt;span&gt;scanner&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Scanln&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A script like this can be used to find servers. While possible uses for these
servers include data storage and transfer, or just dumping all the data; the
responsible thing to do would be running a reverse DNS on the IP and contacting
the website and letting them know about the issue.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-23T15:54:13+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2017/05/android-dialer-packets/">
	<title>Gokberk Yaltirakli (gkbrk): Android Dialers are Stealing Your Data</title>
	<link>https://gkbrk.com/2017/05/android-dialer-packets/</link>
	<content:encoded>&lt;p&gt;In Android, most functionality of your phone is provided by apps. And this includes making phone calls as well. Android lets you replace the dialer app on your phone with a custom one. This can be amazing and horrifying at the same time. It is amazing because it allows programmers to create interesting ways to call people. But it also allows the creators of malicious apps to secretly send your private data to their servers.&lt;/p&gt;

&lt;p&gt;For tech-savvy people this isn&amp;rsquo;t such a big issue, trust only your phone manufacturer and open source apps and you&amp;rsquo;re golden. But things aren&amp;rsquo;t always so simple when people who aren&amp;rsquo;t familiar with the best privacy practices see these apps on their app store. On top of that, things can get out of your hand when &lt;a href=&quot;https://martinruenz.de/article/data-privacy/2017/05/03/something-is-wrong.html&quot;&gt;a phone update replaces the default telephone app on your phone with TrueCaller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wanted to see just how bad the situation was with my own eyes, so I equipped myself with a packet sniffer and started installing those apps on my phone. &lt;em&gt;I know, I know, not the safest thing to do. But your choices are limited when your computer is too slow to emulate anything more complicated than an atari.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This article is also available in &lt;a href=&quot;https://www.neyaptik.com/blog/gizliligimizi-hice-sayan-android-uygulamalari/&quot;&gt;Turkish&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Drupe, our first test subject&lt;/h2&gt;

&lt;p&gt;When you first install this app, it greets you with a permission request for your contact list and refuses to start without being granted the permission. But that&amp;rsquo;s not too suspicious, an app that you use for calling people, an app that advertises itself as &lt;em&gt;&amp;ldquo;Contacts Phone Dialer&amp;rdquo;&lt;/em&gt; can have tons of valid reasons for needing access to your contacts. But unfortunately, the first thing this app does after getting the permission is serializing all your contacts into a big string and sending it over to their servers.&lt;/p&gt;

&lt;p&gt;{{&amp;lt; centerimage &amp;ldquo;/img/articles/android-dialer-packets/drupe-packet.jpg&amp;rdquo; 150 &amp;gt;}}&lt;/p&gt;

&lt;h2&gt;Asus Dialer&lt;/h2&gt;

&lt;p&gt;Asus Dialer is the app that comes preinstalled with Asus phones. In my tests, it didn&amp;rsquo;t send anything from my contact list to their server. Also, no communication was observed when calling other numbers. It is consistent with the opening paragraph that a telephone app by a phone manufacturer wouldn&amp;rsquo;t steal your data carelessly, it&amp;rsquo;s just unnecessary risk for them.&lt;/p&gt;

&lt;h2&gt;Dialer+ / Contacts+&lt;/h2&gt;

&lt;p&gt;An API call to an endpoint called &amp;lsquo;/report&amp;rsquo; was made with every call I did. This API call included my email address, a token and the number I was calling. I assume a copy of my contact list was also sent but I was unable to take a screenshot of that.&lt;/p&gt;

&lt;p&gt;{{&amp;lt; centerimage &amp;ldquo;/img/articles/android-dialer-packets/contactsplus.jpg&amp;rdquo; 150 &amp;gt;}}&lt;/p&gt;

&lt;h2&gt;TrueCaller&lt;/h2&gt;

&lt;p&gt;TrueCaller, the telephone app which another blogger was suspicious of, is also guilty in this regard. It sends all your call start-end times and some more data such as outgoing call and number dialed events to an analytics server. On top of that, it keeps track of calls and reports to their server when they start and end, along with the number called and a client ID.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
    &lt;a href=&quot;https://gkbrk.com/img/articles/android-dialer-packets/truecaller1.jpg&quot;&gt;
        &lt;img src=&quot;https://gkbrk.com/img/articles/android-dialer-packets/truecaller1.jpg&quot; width=&quot;150&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;https://gkbrk.com/img/articles/android-dialer-packets/truecaller2.jpg&quot;&gt;
        &lt;img src=&quot;https://gkbrk.com/img/articles/android-dialer-packets/truecaller2.jpg&quot; width=&quot;150&quot; /&gt;
    &lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;This extensive collection of information is enough to gather when you to talk with people, and who you talk with. Since these apps are installed by a lot of people and your name is in their contacts list, even if you don&amp;rsquo;t install the apps you can still be tracked to a degree.&lt;/p&gt;

&lt;h2&gt;The Sad State of Privacy&lt;/h2&gt;

&lt;p&gt;All the apps I tested were the top results for the search &lt;strong&gt;dialer&lt;/strong&gt;. Some of them were given the &lt;em&gt;Editor&amp;rsquo;s Choice&lt;/em&gt; branding and all of them had massive install numbers. If the most popular dialer apps, the ones that have been approved by &amp;ldquo;editors&amp;rdquo;, disregard our privacy like that; I can&amp;rsquo;t even imagine the kind of intrusion shady apps will do.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks for reading my blog post. If you subscribe to my RSS feed in 10 seconds you will have good privacy for 10 years, &lt;em&gt;I hope&lt;/em&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-23T15:54:13+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2017/04/graphs-from-my-todo-txt/">
	<title>Gokberk Yaltirakli (gkbrk): Graphs From My Todo.txt</title>
	<link>https://gkbrk.com/2017/04/graphs-from-my-todo-txt/</link>
	<content:encoded>&lt;p&gt;I am a really lazy person, there, I said it. I also get distracted really often. These two things combined might be the worst thing that can happen to one&amp;rsquo;s productivity. After trying many methods of creating todo lists, I have settled on two. Markdown files for detailed note-taking, and todo.txt for the list of things to do. On my phone, the &lt;a href=&quot;https://f-droid.org/repository/browse/?fdid=nl.mpcjanssen.simpletask&quot;&gt;Simpletask Cloudless&lt;/a&gt; app did an amazing job of bringing some order into my chaotic schedule.&lt;/p&gt;

&lt;p&gt;But I felt that I could use some more incentive to do work. Something to gameify my tasks, if you will. What better way do this than a fancy graph with some numbers. I decided to host the resulting graph on my website and regularly update it.&lt;/p&gt;

&lt;p&gt;If you want to see the final result, you can see the code file &lt;a href=&quot;https://gist.github.com/gkbrk/a610af06f5440836aa8f4844c596dec4&quot;&gt;here&lt;/a&gt; and the resulting graph &lt;a href=&quot;https://gkbrk.com/stats&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Parsing the todo file&lt;/h3&gt;

&lt;p&gt;Normally, we would need to parse the todo.txt format, but since we&amp;rsquo;re only going to look at the completed tasks, we can get by with some string splitting. Let&amp;rsquo;s write a Python function to &amp;ldquo;parse&amp;rdquo; the file and get some statistics from it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;get_stats&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;filename&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;data&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{}&lt;/span&gt;
    &lt;span&gt;with&lt;/span&gt; &lt;span&gt;open&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;filename&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;todofile&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;line&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;todofile&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
            &lt;span&gt;date&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;line&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;split&lt;/span&gt;&lt;span&gt;()[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;date&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;data&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
                &lt;span&gt;data&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;
            &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
                &lt;span&gt;data&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function returns a dictionary of dates and the number of tasks completed. There&amp;rsquo;s only one problem with this, the days where we did nothing are skipped, making our graph look wrong. To fix this, we will write another function to return the dates of the last 15 days. We&amp;rsquo;ll use the &lt;a href=&quot;https://docs.python.org/3/library/datetime.html&quot;&gt;datetime&lt;/a&gt; library for this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;datetime&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt; &lt;span&gt;get_last_days&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;days&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;day&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;days&lt;/span&gt;&lt;span&gt;)[::&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]:&lt;/span&gt;
        &lt;span&gt;date&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;datetime&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;datetime&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;today&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;-&lt;/span&gt; &lt;span&gt;datetime&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;timedelta&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;days&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;day&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
        &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;date&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isoformat&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;# Isoformat is 2017-04-18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that we can collect these values on an array, which we will use to make our final graph. My todo archive is at the Sync folder, which is synchronized with my phone regularly.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;stats&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;get_stats&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;/home/leonardo/Sync/default/done.txt&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;

&lt;span&gt;todoCounts&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[]&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; &lt;span&gt;date&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;get_last_days&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;# Get the value from the todo.txt file&lt;/span&gt;
    &lt;span&gt;# Use 0 as default&lt;/span&gt;
    &lt;span&gt;todoCounts&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;append&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;stats&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Creating the graph&lt;/h3&gt;

&lt;p&gt;The only thing left to do is plot these values on a graph. For the graph, we&amp;rsquo;ll use &lt;a href=&quot;https://matplotlib.org/index.html&quot;&gt;matplotlib&lt;/a&gt;. Let&amp;rsquo;s configure it a little so the graph looks like what we want.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;matplotlib.pyplot&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;plt&lt;/span&gt;

&lt;span&gt;plt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;grid&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;plt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;Todo.txt Progress&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;plt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ylabel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;Number of tasks done&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should display a grid behind the line graph and add titles to make the plot more clear.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;plt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yticks&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;max&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;todoCounts&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
&lt;span&gt;plt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;xticks&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;get_last_days&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rotation&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will make the Y axis only have integers and get rid of fractional values, giving us a cleaner graph. It will also write the dates below the graph, rotated 80 degrees to fit together.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s call the &lt;em&gt;plot&lt;/em&gt; function to put the values into our graph and save it to my websites public folder.
&amp;ldquo;`python
plt.plot(todoCounts, marker=&amp;quot;o&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;plt.tight_layout()
plt.savefig(&amp;ldquo;public/img/todo.jpeg&amp;rdquo;, dpi=100)
&amp;ldquo;`&lt;/p&gt;

&lt;h3&gt;Final words&lt;/h3&gt;

&lt;p&gt;I added this script to the hooks on my websites Makefile, so everytime I compile my blog it will get updated. One of the reasons I put it public is to give me some feeling of responsibility and judgement, even if practically no one will look at it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gkbrk.com/img/todo.jpeg&quot; alt=&quot;Todo list graph&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hey everyone! Thanks for reading my blog post. If you enjoyed it, you can check out my other posts or subscribe via RSS. RSS is still relevant, right?&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-23T15:54:13+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2018/06/fetching-activitypub-feeds/">
	<title>Gokberk Yaltirakli (gkbrk): Fetching ActivityPub Feeds</title>
	<link>https://gkbrk.com/2018/06/fetching-activitypub-feeds/</link>
	<content:encoded>&lt;p&gt;Mastodon is a federated social network that uses the ActivityPub protocol to
connect separate communities into one large network. Both Mastodon and the
ActivityPub protocol are increasing in usage every day. Compared to formats like
RSS, which are pull-based, ActivityPub is push-based. This means rather than
your followers downloading your feed regularly to check if you have shared
anything, you send each follower (or each server as an optimization) the content
you shared.&lt;/p&gt;

&lt;p&gt;While this decreases latency in your followers receiving your updates, it does
complicate the implementation of readers. But fortunately, it is still possible
to pull the feed of ActivityPub users. Just like the good old days.&lt;/p&gt;

&lt;p&gt;In this article; we&amp;rsquo;re going to start from a handle like &lt;code&gt;leo@niu.moe&lt;/code&gt;, and end
up with a feed of my latest posts.&lt;/p&gt;

&lt;h2&gt;WebFinger&lt;/h2&gt;

&lt;p&gt;First of all, let&amp;rsquo;s look at how the fediverse knows how to find the ActivityPub
endpoint for a given handle. The way this is done is quite similar to email.&lt;/p&gt;

&lt;p&gt;To find the domain name, let&amp;rsquo;s split the handle into the username and domain
parts.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;handle&lt;/span&gt;           &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'leo@niu.moe'&lt;/span&gt;
&lt;span&gt;username&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;domain&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;handle&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;split&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'@'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we need to make a request to the domain&amp;rsquo;s webfinger endpoint in order to
find more data about the account. This is done by performing a GET request to
&lt;code&gt;/.well-known/webfinger&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;wf_url&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'https://{}/.well-known/webfinger'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;wf_par&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;'resource'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'acct:{}'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;handle&lt;/span&gt;&lt;span&gt;)}&lt;/span&gt;
&lt;span&gt;wf_hdr&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;'Accept'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'application/jrd+json'&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;# Perform the request&lt;/span&gt;
&lt;span&gt;wf_resp&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;requests&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;wf_url&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;headers&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;wf_hdr&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;params&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;wf_par&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we have our WebFinger response. We can filter this data in order to find the
correct ActivityPub endpoint. We need to do this because webfinger can return a
variety of URLs, not just ActivityPub.&lt;/p&gt;

&lt;h2&gt;Filtering the endpoints&lt;/h2&gt;

&lt;p&gt;The response we get from WebFinger looks like this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight json&quot;&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;&quot;subject&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;acct:leo@niu.moe&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;&quot;aliases&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;&quot;https://niu.moe/@leo&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;&quot;https://niu.moe/users/leo&quot;&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;],&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;&quot;links&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;rel&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;http://webfinger.net/rel/profile-page&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;text/html&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;href&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;https://niu.moe/@leo&quot;&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;rel&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;http://schemas.google.com/g/2010#updates-from&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;application/atom+xml&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;href&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;https://niu.moe/users/leo.atom&quot;&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;rel&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;self&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;application/activity+json&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;href&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;https://niu.moe/users/leo&quot;&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Depending on the server, there might be more or less entries in the &lt;em&gt;links&lt;/em&gt;
key. What we are intereted in is the URL with the type
&lt;code&gt;application/activity+json&lt;/code&gt;. Let&amp;rsquo;s go through the array and find the link URL
we&amp;rsquo;re looking for.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;matching&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;link&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'href'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; &lt;span&gt;link&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;wf_resp&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'links'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;link&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'type'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;'application/activity+json'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;user_url&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;next&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;matching&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Fetching the feed link&lt;/h2&gt;

&lt;p&gt;We can fetch our feed URL using &lt;em&gt;requests&lt;/em&gt; like before. One detail to note here
is the content type that we need to specify in order to get the data in the
format we want.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;as_header&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;'Accept'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'application/ld+json; profile=&quot;https://www.w3.org/ns/activitystreams&quot;'&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;user_json&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;requests&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;user_url&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;headers&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;as_header&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;user_json&lt;/em&gt; is a dictionary that contains information about the user. This
information includes the username, profile summary, profile picture and other
URLs related to the user. One such URL is the &lt;em&gt;&amp;ldquo;Outbox&amp;rdquo;&lt;/em&gt;, which is basically a
feed of whatever that user shares publicly.&lt;/p&gt;

&lt;p&gt;This is the final URL we need to follow, and we will have the user feed.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;feed_url&lt;/span&gt;  &lt;span&gt;=&lt;/span&gt; &lt;span&gt;user_json&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'outbox'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In ActivityPub, the feed is an &lt;em&gt;OrderedCollection&lt;/em&gt;. And those can be
paginated. The first page can be empty, or have all the content. Or it can be
one event for each page. This is completely up to the implementation. In order
to handle this transparently, let&amp;rsquo;s write a generator that will fetch the next
pages when they are requested.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;parse_feed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;feed&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;requests&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;headers&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;as_header&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;'orderedItems'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;feed&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;item&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;feed&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'orderedItems'&lt;/span&gt;&lt;span&gt;]:&lt;/span&gt;
            &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;

    &lt;span&gt;next_url&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;'first'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;feed&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;next_url&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;feed&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'first'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
    &lt;span&gt;elif&lt;/span&gt; &lt;span&gt;'next'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;feed&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;next_url&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;feed&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'next'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;next_url&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;item&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;parse_feed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;next_url&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
            &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Now; for the purposes of a blog post and for writing simple feed parsers, this
code works with most servers. But this is not a fully spec-complient function
for grabbing all the pages of content. Technically &lt;em&gt;next&lt;/em&gt; and &lt;em&gt;first&lt;/em&gt; can be
lists of events instead of other links, but I haven&amp;rsquo;t come across that in the
wild. It is probably a good idea to write your code to cover more edge cases
when dealing with servers on the internet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Printing the first 10 posts&lt;/h2&gt;

&lt;p&gt;The posts in ActivityPub contain HTML and while this is okay for web browsers,
we should strip the HTML tags before printing them to the terminal.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how we can do that with the &lt;em&gt;BeautifulSoup&lt;/em&gt; and &lt;em&gt;html&lt;/em&gt; modules.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;clean_html&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;text&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;BeautifulSoup&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;'html.parser'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get_text&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;html&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;unescape&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;

&lt;span&gt;i&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; &lt;span&gt;item&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;parse_feed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;feed_url&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;# Only new tweets&lt;/span&gt;
        &lt;span&gt;assert&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'type'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;'Create'&lt;/span&gt;
        &lt;span&gt;content&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'object'&lt;/span&gt;&lt;span&gt;][&lt;/span&gt;&lt;span&gt;'content'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
        &lt;span&gt;text&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;clean_html&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;

        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
        &lt;span&gt;i&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;continue&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;i&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Future Work&lt;/h2&gt;

&lt;p&gt;Mastodon is not the only implementation of ActivityPub, and each implementation
can do things in slightly different ways. While writing code to interact with
ActivityPub servers, you should always consult the specification document.&lt;/p&gt;

&lt;h2&gt;Useful Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/2018/REC-activitypub-20180123/&quot;&gt;ActivityPub Spec (at the time of writing)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/activitypub/&quot;&gt;ActivityPub Spec (Latest)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2018-07-23T15:54:13+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2018/04/generating-vanity-infohashes-for-torrents/">
	<title>Gokberk Yaltirakli (gkbrk): Generating Vanity Infohashes for Torrents</title>
	<link>https://gkbrk.com/2018/04/generating-vanity-infohashes-for-torrents/</link>
	<content:encoded>&lt;p&gt;In the world of Bittorrent, each torrent is identified by &lt;em&gt;an infohash&lt;/em&gt;. It is
basically the SHA1 hash of the torrent metadata that tells you about the
files. And people, when confronted with something that&amp;rsquo;s supposed to be random,
like to control it to some degree. You can see this behaviour in lots of
different places online. People try to generate special Bitcoin wallets, Tor
services with their nick or 4chan tripcodes that look cool. These are all done
by repeatedly generating the hash until you find a result that you like. We can
do the exact same thing with torrents as well.&lt;/p&gt;

&lt;h2&gt;The structure of torrent files&lt;/h2&gt;

&lt;p&gt;Before we start tweaking our infohash, let&amp;rsquo;s talk about torrent files first. A
torrent file is a bencoded dictionary. It contains information about the files,
their names, how large they are and hashes for each piece. This is stored in the
&lt;em&gt;info&lt;/em&gt; section of the dictionary. The rest of the dictionary includes a list of
trackers, the file comment, the creation date and other optional metadata. The
&lt;strong&gt;infohash&lt;/strong&gt; is quite literally the SHA1 hash of the &lt;strong&gt;info&lt;/strong&gt; section of the
torrent. Any modification to the file contents changes the infohash, while
changing the other metadata doesn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;This gives us two ways of affecting the hash without touching the file
contents. The first one is adding a separate key called &lt;em&gt;vanity&lt;/em&gt; and chaning the
value of it. While this would be really flexible and cause the least change that
the user can see, it adds a non-standard key to our dictionary. Fortunately,
torrent files are supposed to be flexible and handle unknown keys gracefully.&lt;/p&gt;

&lt;p&gt;The other thing we can do is to add a prefix to the file name. This should keep
everything intact aside from a random value in front of our filename.&lt;/p&gt;

&lt;h2&gt;Parsing the torrent file&lt;/h2&gt;

&lt;p&gt;First of all, let&amp;rsquo;s read our torrent file and parse it. For this purpose, I&amp;rsquo;m
using the &lt;code&gt;bencoder&lt;/code&gt; module.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;bencoder&lt;/span&gt;

&lt;span&gt;target&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'arch-linux.torrent'&lt;/span&gt;
&lt;span&gt;with&lt;/span&gt; &lt;span&gt;open&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;'rb'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;torrent_file&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
    &lt;span&gt;torrent&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;bencoder&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;decode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent_file&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;read&lt;/span&gt;&lt;span&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Calculating the infohash&lt;/h2&gt;

&lt;p&gt;The infohash is the hash of the &lt;em&gt;info&lt;/em&gt; section of the file. Let&amp;rsquo;s write a
function to calculate that. We also encode the binary of the hash with base 32
to bring it to the infohash format.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;hashlib&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;base64&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt; &lt;span&gt;get_infohash&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;encoded&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;bencoder&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;encode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'info'&lt;/span&gt;&lt;span&gt;])&lt;/span&gt;
    &lt;span&gt;sha1&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;hashlib&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sha1&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;encoded&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hexdigest&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;sha1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Prefixing the name&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s do the method with prefixing the name first. We will start from 0 and keep
incrementing the name prefix until the infohash starts with &lt;code&gt;cafe&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;original_name&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'info'&lt;/span&gt;&lt;span&gt;][&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'name'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;decode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'utf-8'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;

&lt;span&gt;vanity&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;while&lt;/span&gt; &lt;span&gt;True&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
    &lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'info'&lt;/span&gt;&lt;span&gt;][&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'name'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'{}-{}'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;vanity&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;original_name&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;get_infohash&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;startswith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'cafe'&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;vanity&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;get_infohash&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
        &lt;span&gt;break&lt;/span&gt;
    &lt;span&gt;vanity&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code will increment our vanity number in a loop and print it and the
respective infohash when it finds a suitable one.&lt;/p&gt;

&lt;h2&gt;Adding a separate key to the info section&lt;/h2&gt;

&lt;p&gt;While the previous section works well, it still causes a change that is visible
to the user. Let&amp;rsquo;s work around that by modifying the data in a bogus key called
&lt;em&gt;vanity&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;vanity&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;while&lt;/span&gt; &lt;span&gt;True&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
    &lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'info'&lt;/span&gt;&lt;span&gt;][&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'vanity'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;vanity&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;get_infohash&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;startswith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'cafe'&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;vanity&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;get_infohash&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
        &lt;span&gt;break&lt;/span&gt;
    &lt;span&gt;vanity&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Saving the modified torrent files&lt;/h2&gt;

&lt;p&gt;While it is possible to do the modification to the file yourself, why not go all
the way and save the modified torrent file as well? Let&amp;rsquo;s write a function to
save a given torrent file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;save_torrent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;with&lt;/span&gt; &lt;span&gt;open&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;'wb+'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;torrent_file&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;torrent_file&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;write&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;bencoder&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;encode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use this function after finding an infohash that you like.&lt;/p&gt;

&lt;h2&gt;Cool ideas for infohash criteria&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Release groups can prefix their infohashes with their name/something unique to
them&lt;/li&gt;
&lt;li&gt;Finding smaller infohashes - should slowly accumulate 0&amp;rsquo;s in the beginning&lt;/li&gt;
&lt;li&gt;Infohashes with the least entropy - should make them easier to remember&lt;/li&gt;
&lt;li&gt;Infohashes with the more digits&lt;/li&gt;
&lt;li&gt;Infohashes with no digits&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2018-07-23T15:54:13+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2017/02/numerical-domains-of-china/">
	<title>Gokberk Yaltirakli (gkbrk): Numerical Domains of China</title>
	<link>https://gkbrk.com/2017/02/numerical-domains-of-china/</link>
	<content:encoded>&lt;p&gt;I recently noticed that numbers are used a lot in China for email addresses and user names. I also found out that a number of popular websites, such as Alibaba and Baidu, had official domain names that are entirely numbers. It seemed that people had a preference for numbers instead of latin letters, and even big websites wanted to accommodate for this.&lt;/p&gt;

&lt;p&gt;My girlfriend later confirmed that there are indeed lots of websites using just numbers as their domains. She told me this is sometimes used as a way to hide websites, mostly gambling and porn, and in some cases even sell access to them by just getting money and giving the secret domain name in exchange.&lt;/p&gt;

&lt;p&gt;Wait a second! This sounds like security through obscurity, hiding things in plain sight. It&amp;rsquo;s a very creative way to restrict and sell access to websites, and it clearly works well enough for their purpose. But that&amp;rsquo;s not enough to stop us from finding them with a simple script. Numbers are very easy to generate and the fact that we&amp;rsquo;re looking for domains with all numbers increases our chances of coming across one.&lt;/p&gt;

&lt;h2&gt;Scanning random domains&lt;/h2&gt;

&lt;p&gt;My strategy in trying to find these websites is checking random domains until we find one. And the first step in anything involving randomness is to &lt;code&gt;import random&lt;/code&gt;. Now we can start our script by writing a generator for random domains.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;domains&lt;/span&gt;&lt;span&gt;():&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt; &lt;span&gt;True&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;&quot;{}.com&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;random&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;randint&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1000000&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will give us an endless stream of random domains. After this, we will want to check if these domains actually have a DNS record, which is basically checking if that domain exists. To do that; we can use the &lt;em&gt;socket&lt;/em&gt; library, mainly the &lt;em&gt;socket.gethostbyname&lt;/em&gt; function.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;ips&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;socket&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;gethostbyname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt; &lt;span&gt;socket&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All this code does is try to get the IP address for the domain and return it if we succeed. If the way we&amp;rsquo;re writing these functions look weird, don&amp;rsquo;t worry. They actually fit together quite nicely.&lt;/p&gt;

&lt;p&gt;These two functions should be enough to do random scans to see if anything turns up. We can use them together like this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;domain&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;domains&lt;/span&gt;&lt;span&gt;():&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;ips&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will start scanning random domains and probably print lots of domains and their IP addresses. Here&amp;rsquo;s the full code of the scanner.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;socket&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;random&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt; &lt;span&gt;domains&lt;/span&gt;&lt;span&gt;():&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt; &lt;span&gt;True&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;&quot;{}.com&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;random&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;randint&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1000000&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt; &lt;span&gt;ips&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;socket&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;gethostbyname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt; &lt;span&gt;socket&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;pass&lt;/span&gt;

&lt;span&gt;for&lt;/span&gt; &lt;span&gt;domain&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;domains&lt;/span&gt;&lt;span&gt;():&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;ips&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Future work and improvements&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re getting domains but you will notice some of them are just &lt;strong&gt;Domains for sale!&lt;/strong&gt; pages. In order to help us find interesting domains faster, we can write another function to grab the title of these websites.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;titles&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;html&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;requests&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;http://{}&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;
        &lt;span&gt;title&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;re&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;search&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&amp;lt;title&amp;gt;(.*?)&amp;lt;/title&amp;gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;html&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;title&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
            &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;title&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;group&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can combine this with the two other functions in order to print valid domains with their title, and print just the domains if there isn&amp;rsquo;t any title.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;domain&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;domains&lt;/span&gt;&lt;span&gt;():&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;ips&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;title&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;titles&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
            &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;title&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
            &lt;span&gt;break&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
            &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are some easy ways this script can be improved in the future. Adding multithreading or an asynchronous DNS implementation might increase the performance. Also highlighting certain keywords and characters in the title should help us find interesting websites more efficiently.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-23T15:54:13+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-23-14-48-17">
	<title>Unrelenting Technology (myfreeweb): Scaleway's ARM64 VPS has been successfully depenguinated! :) Now you can run FreeBSD on...</title>
	<link>https://unrelenting.technology/notes/2018-07-23-14-48-17</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;Scaleway's ARM64 VPS has been &lt;a href=&quot;https://community.online.net/t/freebsd-on-arm64/6678&quot;&gt;successfully depenguinated&lt;/a&gt;! :)
Now you can run FreeBSD on four ThunderX cores, 2GB RAM and 50GB SSD for 3€/month. Awesome! &lt;/p&gt;
&lt;p&gt;Also, in the process, I finally discovered &lt;a href=&quot;https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=229977&quot;&gt;the cause of GPT partitions sometimes disappearing on reboot&lt;/a&gt;. It was the size of the partition table. It's 128 by default, but sometimes it's not — e.g. on the FreeBSD installer memstick image, it's &lt;em&gt;2&lt;/em&gt;. Creating a third partition with &lt;code&gt;gpart&lt;/code&gt; &quot;succeeded&quot;, but the partition disappeared on reboot. &lt;/p&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-23T14:48:17+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="http://www.petecorey.com/blog/2018/07/23/building-a-better-receive-loop/">
	<title>Pete Corey (petecorey): Building a Better Receive Loop</title>
	<link>http://www.petecorey.com/blog/2018/07/23/building-a-better-receive-loop/</link>
	<content:encoded>&lt;p&gt;I’ve been putting quite a bit of time this past week into overhauling and refactoring &lt;a href=&quot;https://github.com/pcorey/bitcoin_network/&quot;&gt;my in-progress Elixir-based Bitcoin node&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a part of that overhaul, I turned my attention to how we’re receiving packets from connected peers. The way we’ve been handling incoming packets is overly complicated and can be greatly simplified by taking advantage of the Bitcoin protocol’s packet structure.&lt;/p&gt;

&lt;p&gt;Let’s go over our old solution and dig into how it can be improved.&lt;/p&gt;

&lt;h2 id=&quot;the-original-receive-loop&quot;&gt;The Original Receive Loop&lt;/h2&gt;

&lt;p&gt;Our Bitcoin node uses &lt;a href=&quot;http://erlang.org/doc/man/gen_tcp.html&quot;&gt;Erlang’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:gen_tcp&lt;/span&gt;&lt;/code&gt; module&lt;/a&gt; to manage peer to peer communications. Originally, we were using &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:gen_tcp&lt;/span&gt;&lt;/code&gt; in “active mode”, which means that incoming packets are delivered to our node’s Elixir process in the form of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:tcp&lt;/span&gt;&lt;/code&gt; messages:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def handle_info({:tcp, _port, data}, state) do
  ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because TCP is a streaming protocol, no guarantees can be made about the contents of these messages. A single message may contain a complete Bitcoin packet, a partial packet, multiple packets, or any combination of the above. To handle this ambiguity, the Bitcoin protocol deliminates each packet with a sequence of “magic bytes”. Once we reach this magic sequence, we know that everything we’ve received up until that point constitutes a single packet.&lt;/p&gt;

&lt;p&gt;My previous receive loop worked by maintaining a backlog of all incoming bytes up until the most recently received sequence of magic bytes. Every time a new message was received, it would append those incoming bytes to the backlog and chunk that binary into a sequence of packets, which could then be handled individually:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
{messages, rest} = chunk(state.rest &amp;lt;&amp;gt; data)

case handle_messages(messages, state) do
  {:error, reason, state} -&amp;gt; {:disconnect, reason, %{state | rest: rest}}
  state -&amp;gt; {:noreply, %{state | rest: rest}}
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This solution works, but there are quite a few moving pieces. Not only do we have to maintain a backlog of all recently received bytes, we also have to build out the functionality to split that stream of bytes into individual packets:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp chunk(binary, messages \\ []) do
  case Message.parse(binary) do
    {:ok, message, rest} -&amp;gt;
      chunk(rest, messages ++ [message])

    nil -&amp;gt;
      {messages, binary}
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thankfully, there’s a better way.&lt;/p&gt;

&lt;h2 id=&quot;taking-advantage-of-payload-length&quot;&gt;Taking Advantage of Payload Length&lt;/h2&gt;

&lt;p&gt;Every message sent through the Bitcoin protocol &lt;a href=&quot;https://en.bitcoin.it/wiki/Protocol_documentation#Message_structure&quot;&gt;follows a specific format&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first four bytes of every packet are reserved for the network’s magic bytes. Next, twelve bytes are reserved for the name of the command being sent across the network. The next four bytes hold the length of the payload being sent, followed by a four byte partial checksum of that payload.&lt;/p&gt;

&lt;div class=&quot;post-footer&quot;&gt;
    &lt;div class=&quot;signup-form&quot;&gt;
        &lt;form action=&quot;http://east5th.us11.list-manage.com/subscribe/post?u=f8833fd40e2b1b28545d9f382&amp;id=c56ceba687&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; target=&quot;_blank&quot;&gt;
            &lt;p&gt;Sign up for &lt;a href=&quot;http://www.petecorey.com/newsletter&quot;&gt;Pete's mailing list&lt;/a&gt; and have fresh content delivered to you, hot off the presses every week!&lt;/p&gt;
            &lt;div class=&quot;email-wrapper&quot;&gt;
                &lt;input type=&quot;text&quot; value=&quot;&quot; name=&quot;FNAME&quot; class=&quot;&quot; id=&quot;mce-FNAME&quot; /&gt;&lt;!--
                                                                                                           --&gt;&lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; id=&quot;mce-EMAIL&quot; /&gt;&lt;!--
                                                                                                                                                                                                    --&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; /&gt;
            &lt;/div&gt;
            &lt;div&gt;&lt;input type=&quot;text&quot; name=&quot;b_f8833fd40e2b1b28545d9f382_c56ceba687&quot; tabindex=&quot;-1&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;These twenty four bytes can be found at the head of every message sent across the Bitcoin peer-to-peer network, followed by the variable length binary payload representing the meat and potatoes of the command being carried out. Relying on this structure can greatly simplify our receive loop.&lt;/p&gt;

&lt;p&gt;By using &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:gen_tcp&lt;/span&gt;&lt;/code&gt; in “passive mode” (setting &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;active:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;/code&gt;), incoming TCP packets won’t be delivered to our current process as messages. Instead, we can ask for packets using a blocking call to &lt;a href=&quot;http://erlang.org/doc/man/gen_tcp.html#recv-2&quot;&gt;&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:gen_tcp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;. When requesting packets, we can even specify the number of bytes we want to receive from the incoming TCP stream.&lt;/p&gt;

&lt;p&gt;Instead of receiving partial messages of unknown size, we can ask &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:gen_tcp&lt;/span&gt;&lt;/code&gt; for the next &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;&lt;/code&gt; bytes in the stream:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
{:ok, message} &amp;lt;- :gen_tcp.recv(socket, 24)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we can parse the received &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;/code&gt; bytes and request the payload’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;/code&gt; in bytes from our socket:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
{:ok, %{size: size}} &amp;lt;- Message.parse(message),
{:ok, payload} &amp;lt;- :gen_tcp.recv(socket, size)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we can parse and handle our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;/code&gt;, knowing that it’s guaranteed to be a single, complete Bitcoin command sent across the peer-to-peer network.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;There’s more than goes into the solution that I outlined above. For example, if we’re receiving a command like &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;verack&quot;&lt;/span&gt;&lt;/code&gt;, which has a zero byte payload, asking for zero bytes from &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:gen_tcp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; will actually return all of the available bytes it has in its TCP stream.&lt;/p&gt;

&lt;p&gt;Complications included, I still think this new solution is superior to our old solution of maintaining and continually chunking an ongoing stream of bytes pulled off the network.&lt;/p&gt;

&lt;p&gt;If you’re eager to see the full details of the new receive loop, &lt;a href=&quot;https://github.com/pcorey/bitcoin_network/blob/master/lib/bitcoin_network/peer/connection.ex#L80-L98&quot;&gt;check it out on Github&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I’d also like to thank &lt;a href=&quot;https://github.com/karlseguin&quot;&gt;Karl Seguin&lt;/a&gt; for inspiring me to improve our Bitcoin node using this technique. He posted a message on &lt;a href=&quot;https://elixir-slackin.herokuapp.com/&quot;&gt;the Elixir Slack group&lt;/a&gt; about prefixing TCP messages with their length to easily determine how many bytes to receive:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’d length prefix every message with 4 bytes and do two recvs, 
&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This one line comment opened my mind to the realization that the Bitcoin protocol was already doing this, and that I was overcomplicating the process of receiving messages.&lt;/p&gt;

&lt;p&gt;Thanks Karl!&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-23T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-21-08-20-07">
	<title>Unrelenting Technology (myfreeweb): Building a reader on your website is not too hard when you already have...</title>
	<link>https://unrelenting.technology/notes/2018-07-21-08-20-07</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;Building a &lt;a href=&quot;https://indieweb.org/reader&quot;&gt;reader&lt;/a&gt; on your website is not too hard when you already have webmention processing (so you have code to parse entries and whatnot). So I kinda have one now. There's even some Microsub support, but that's not complete yet.&lt;/p&gt;
&lt;p&gt;There's a funny bug in my feed fetching though: &lt;a href=&quot;https://aaronparecki.com/2018/07/07/7/oauth-for-the-open-web&quot;&gt;OAuth for the open web&lt;/a&gt; is always on top of the feed (its published date gets set to feed fetch time every time) :D&lt;/p&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-21T08:20:07+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="http://pzel.github.io/til/2018/07/21/sending-0000-doesnt-make-sense.html">
	<title>Simon Zelazny (pzel): Sending 0.0.0.0 doesn't make sense</title>
	<link>http://pzel.github.io/til/2018/07/21/sending-0000-doesnt-make-sense.html</link>
	<content:encoded>&lt;p&gt;While I've grown used to specifying
&lt;a href=&quot;https://en.wikipedia.org/wiki/0.0.0.0&quot;&gt;0.0.0.0&lt;/a&gt; as the listening address for
servers, I got bitten yesterday and realized the dangers of this practice.&lt;/p&gt;

&lt;p&gt;If the listening address of a server ever needs to be communicated to others
(as is the case with clustered systems), configuring &lt;code&gt;0.0.0.0&lt;/code&gt; will lead to bad
things happening. That is: other servers, having learned that your address is
&lt;code&gt;0.0.0.0:SOMEPORT&lt;/code&gt;, will attempt to connect and fail.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://tools.ietf.org/html/rfc1122&quot;&gt;RFC&lt;/a&gt; states clearly:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This host on this network.  MUST NOT be sent, except as
a source address as part of an initializatioan procedure
by which the host learns its own IP address.&lt;/p&gt;&lt;/blockquote&gt;</content:encoded>
	<dc:date>2018-07-21T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://kaushikghose.wordpress.com/?p=7031">
	<title>Pages From The Fire (kghose): Overlays!</title>
	<link></link>
	<content:encoded>Yes, I learned how to draw text &amp;#8230; Advertisements</content:encoded>
	<dc:date>2018-07-21T03:38:57+00:00</dc:date>
</item>
<item rdf:about="https://www.geeklan.co.uk/?p=2266">
	<title>Sevan Janiyan (sevan): Something blogged (on pkgsrcCon 2018)</title>
	<link>https://www.geeklan.co.uk/?p=2266</link>
	<content:encoded>For this years pkgsrcCon, the baton was passed on to Pierre Pronchery &amp;#38; Thomas Merkel, location Berlin. It wasn&amp;#8217;t clear whether I would be able to attend this year until the very last minute, booking plane tickets and accommodation a couple of days before. The day before I flew out was really hectic and I &amp;#8230; &lt;p class=&quot;link-more&quot;&gt;&lt;a href=&quot;https://www.geeklan.co.uk/?p=2266&quot; class=&quot;more-link&quot;&gt;Continue reading&lt;span class=&quot;screen-reader-text&quot;&gt; &quot;Something blogged (on pkgsrcCon 2018)&quot;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-21T01:17:58+00:00</dc:date>
</item>
<item rdf:about="https://kev.inburke.com/?p=3636">
	<title>Kevin Burke (kb): AWS’s response to ALB internal validation failures</title>
	<link>https://kev.inburke.com/kevin/aws-alb-validation-tls-reply/</link>
	<content:encoded>&lt;p&gt;Last week I wrote about &lt;a href=&quot;https://kev.inburke.com/kevin/amazons-albs-insecure-internal-traffic/&quot;&gt;how AWS ALB's do not validate TLS certificates from
internal services&lt;/a&gt;. &lt;a href=&quot;https://twitter.com/colmmacc&quot;&gt;Colm
MacCárthaigh&lt;/a&gt;, the lead engineer for Amazon ELB, writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m the main author of Amazon s2n, our Open Source implementation of TLS/SSL,
and a contributor to the TLS/SSL standards. Hopefully I’m qualified to chime
in!&lt;/p&gt;
&lt;p&gt;You’re right that ALB does not validate the certificates on targets, but it’s
important to understand the context that ALBs run in to see why this is still
a pending item on our roadmap, rather than something we’ve shipped already as
a “must have”.&lt;/p&gt;
&lt;p&gt;The role that server certificates play in TLS is to authenticate the server,
so that it can’t be impersonated or MITM. ALBs run exclusively on our Amazon
VPC network, a Software Defined Network where we encapsulate and authenticate
traffic at the packet level. We believe that this protection is far stronger
than certificate authentication. Every single packet is being checked for
correctness, by both the sender and the recipient, even in Amazon-designed
hardware if you’re using an Enhanced Networking interface. We think it’s
better than the ecosystem where any CA can issue a certificate at any time,
with still limited audit controls (though certificate transparency is
promising!).&lt;/p&gt;
&lt;p&gt;The short of it is that traffic simply can’t be man-in-the-middled or spoofed
on the VPC network, it’s one of our core security guarantees. Instances,
containers, lambda functions, and Elastic Network Interfaces can only be given
IPs via the secure and audit-able EC2 APIs. In our security threat model, all
of this API and packet level security is what plugs in the role performed by
server certificates.&lt;/p&gt;
&lt;p&gt;This contrasts with the older EC2 classic network, a big shared network, which
is why classic load balancers do support backend authentication.&lt;/p&gt;
&lt;p&gt;We actually find that many customers actually load their targets and backends
with “invalid” certificates that are self-signed or expired, because it’s so
operationally hard to stay up-to-date and it’s hard to automate, even with
projects like LetsEncrypt, when your instances are inherently unreachable on
the internet.&lt;/p&gt;
&lt;p&gt;All that said, we’ll be adding support for certificate validation, probably
including pinning and private CAs! Used well with good operational controls
it can be a measure of defense in depth, and it’s important for cases such
as targets hosted on less secure private networks such as on-premesis
data-centers.&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded>
	<dc:date>2018-07-20T04:49:44+00:00</dc:date>
</item>
<item rdf:about="http://codeplea.com/embedding-files-in-c-programs">
	<title>Lewis Van Winkle (code): How to Embed an Arbitrary File in a C Program</title>
	<link>http://codeplea.com/embedding-files-in-c-programs</link>
	<dc:date>2018-07-20T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://www.anishathalye.com/2018/07/19/gemini-a-modern-beamerposter-theme/">
	<title>Anish Athalye (anishathalye): Gemini: A Modern LaTeX Poster Theme</title>
	<link>https://www.anishathalye.com/2018/07/19/gemini-a-modern-beamerposter-theme/</link>
	<content:encoded>&lt;p&gt;Programs like PowerPoint, Keynote, and Adobe Illustrator are common tools for
designing posters, but these programs have a number of disadvantages, including
lack of &lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_content_and_presentation&quot;&gt;separation of content and presentation&lt;/a&gt; and lack of
programmatic control over the output. Designing posters using these programs
can require countless hours calculating positions of elements by hand, manually
laying out content, manually propagating style changes, and repeating these
kinds of tasks over and over again during the iterative process of poster
design.&lt;/p&gt;

&lt;p&gt;The idea of using a document preparation system like &lt;a href=&quot;https://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt; to implement a
poster using code sounds fantastic, and indeed, there are a number of LaTeX
&lt;a href=&quot;https://www.latextemplates.com/cat/conference-posters&quot;&gt;templates&lt;/a&gt; and packages for making posters, such as &lt;a href=&quot;https://ctan.org/pkg/a0poster&quot;&gt;a0poster&lt;/a&gt;, &lt;a href=&quot;https://ctan.org/pkg/sciposter&quot;&gt;sciposter&lt;/a&gt;,
and &lt;a href=&quot;https://ctan.org/pkg/beamerposter&quot;&gt;beamerposter&lt;/a&gt;. However, I didn’t like the look of the &lt;a href=&quot;https://www.google.com/search?q=latex+poster+template&amp;tbm=isch&quot;&gt;existing&lt;/a&gt; themes
and templates — they all looked 20 years old — and this is what kept me
from using LaTeX for making posters, even though I had been using the software
for years for authoring documents.&lt;/p&gt;

&lt;p&gt;I finally bit the bullet and spent some time designing a clean, stylish, and
minimal poster theme for LaTeX, building on top of the beamerposter package.
The result has been open-sourced as &lt;a href=&quot;https://github.com/anishathalye/gemini&quot;&gt;Gemini&lt;/a&gt;, and it makes it really easy to
design posters that look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.anishathalye.com/media/2018/07/19/poster.pdf&quot;&gt;&lt;img src=&quot;https://www.anishathalye.com/media/2018/07/19/poster.png&quot; alt=&quot;Poster example&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-latex&quot;&gt;Why LaTeX?&lt;/h1&gt;

&lt;p&gt;There are a number of programs commonly used for making academic posters. These
include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Word processing programs (e.g. Word, Pages, and LibreOffice Writer)&lt;/li&gt;
  &lt;li&gt;Presentation programs (e.g. PowerPoint, Keynote, and LibreOffice Impress)&lt;/li&gt;
  &lt;li&gt;Vector editing programs (e.g. Adobe Illustrator and Inkscape)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why use LaTex over these programs? The biggest benefit is that LaTeX does not
require manual effort to lay out contents and apply a uniform style to the
entire poster. All layout and styling is done using code relying on TeX’s
sophisticated layout algorithms, and there is a clean separation of content and
presentation, similar to the content/style separation in HTML/CSS.&lt;/p&gt;

&lt;p&gt;There are other benefits as well. TeX is a sophisticated typesetting system
that produces excellent results for text as well as mathematical formulae;
LaTeX packages provide support for &lt;a href=&quot;https://ctan.org/pkg/pgfplots?lang=en&quot;&gt;plotting&lt;/a&gt; and algorithmically
specified &lt;a href=&quot;https://ctan.org/pkg/pgf&quot;&gt;diagrams and vector graphics&lt;/a&gt;; and beamer provides support for
column-based layout, including variable-width and nested columns. This means
that all content in the poster, not just the text, can be produced using code:
no more screenshots of mathematical equations; no more positioning shapes with
the mouse to create diagrams; no more screenshots of plots where the styling
doesn’t quite match the style of the poster; and no more manual positioning of
blocks.&lt;/p&gt;

&lt;h1 id=&quot;a-modern-latex-poster-theme&quot;&gt;A modern LaTeX poster theme&lt;/h1&gt;

&lt;p&gt;Building posters with LaTeX is by far a better experience than using
PowerPoint, Keynote, or Illustrator. I felt that the one thing missing was an
aesthetically pleasing poster theme. There’s no reason a poster designed using
LaTeX should look any less beautiful than a poster made using graphic design
software like Adobe Illustrator.&lt;/p&gt;

&lt;p&gt;This is what led to the creation of &lt;a href=&quot;https://github.com/anishathalye/gemini&quot;&gt;Gemini&lt;/a&gt;, a LaTex poster theme with a focus
on being clean, minimal, and looking great out of the box while being
customizable:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.anishathalye.com/media/2018/07/19/poster-gemini.pdf&quot;&gt;&lt;img src=&quot;https://www.anishathalye.com/media/2018/07/19/poster-gemini.png&quot; alt=&quot;Gemini default theme example&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.anishathalye.com/media/2018/07/19/poster-mit.pdf&quot;&gt;&lt;img src=&quot;https://www.anishathalye.com/media/2018/07/19/poster-mit.png&quot; alt=&quot;MIT theme example&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The theme is actually a pretty small amount of code; most of the functionality
is provided by LaTeX and beamerposter. But making conscious choices on title
and block layout, font families, font weights, color schemes, and other little
details makes a pretty big difference in how the poster looks and feels.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-19T04:00:00+00:00</dc:date>
</item>
<item rdf:about="https://www.brianthicks.com/post/2018/07/18/lets-make-nice-packages/">
	<title>Brian Hicks (brianhicks): Let's Make Nice Packages!</title>
	<link>https://www.brianthicks.com/post/2018/07/18/lets-make-nice-packages/</link>
	<content:encoded>&lt;p&gt;This year at &lt;a href=&quot;https://2018.elmeurope.org/&quot;&gt;Elm Europe&lt;/a&gt; I gave a talk called &amp;ldquo;Let&amp;rsquo;s Make Nice Packages!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s about research.&lt;/p&gt;

&lt;p&gt;No, wait, come back!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.brianthicks.com/post/2018/07/18/lets-make-nice-packages/&quot;&gt;Continue Reading&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-18T19:11:00+00:00</dc:date>
	<dc:creator>Brian Hicks</dc:creator>
</item>
<item rdf:about="https://j11g.com/?p=2103">
	<title>Jan van den Berg (j11g): The Phoenix Project</title>
	<link>https://j11g.com/index.php/2018/07/18/the-phoenix-project/</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;https://j11g.com/wp-content/uploads/2018/07/The-Phoenix-Project.jpg&quot;&gt;&lt;img class=&quot;alignleft wp-image-2111&quot; src=&quot;https://j11g.com/wp-content/uploads/2018/07/The-Phoenix-Project.jpg&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;448&quot; /&gt;&lt;/a&gt;When a co-worker handed me a copy of &lt;a href=&quot;https://www.amazon.com/Phoenix-Project-DevOps-Helping-Business/dp/0988262592&quot;&gt;The Phoenix Project&lt;/a&gt;, the 8-bit art on the cover looked fun. But the tagline — &amp;#8216;A Novel About IT, DevOps and Helping your Business Win&amp;#8217; — sounded a bit like the usual buzzword management lingo. But I was clearly wrong, I loved this book!&lt;/p&gt;
&lt;p&gt;It is unlike anything I&amp;#8217;ve read before and it really spoke to me because the situations were so incredibly recognizable. The book tells a fictionalized story where the main character, Bill, gets promoted — more or less against his will — to VP IT Operations and subsequently inherits a &lt;em&gt;bit&lt;/em&gt; of a mess. Things keeps breaking and escalating, causing SEV-1 outages all while the billion dollar company is having a bad couple of quarters and put all their hope on Project Phoenix. An IT project that is supposed to solve anything and everything; already three years in the making and nowhere close to be finished.&lt;/p&gt;
&lt;p&gt;The story revolves around Bill and his struggle of how to turn things around. On his path to discovery he is mentored by an eccentric figure called Eric (who is such a great and funny character).&lt;/p&gt;
&lt;a href=&quot;https://j11g.com/wp-content/uploads/2018/07/ThePhoenixProjectOrgChartMD.png&quot;&gt;&lt;img class=&quot;wp-image-2104&quot; src=&quot;https://j11g.com/wp-content/uploads/2018/07/ThePhoenixProjectOrgChartMD-300x182.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;304&quot; /&gt;&lt;/a&gt;https://www.magnusdelta.com/blog/2017/9/16/thephoenixprojectsummary
&lt;p&gt;I feel like Bill and I have a lot in common, mainly because the book is really &lt;strong&gt;spot on&lt;/strong&gt; when describing situations IT departments can find themselves in. Some scenes were a literal copy of things I have experienced. As if the writers were there and took notes. It made me laugh out loud or raise my eyebrows on more than one occasion. The reliance on certain key-figures, the disruption of self-involved Marketing/Sales people, the office politics, the lack of trust in teams, the weight of technical debt, the difference between requirements and customer needs. It was all too familiar. So for me the power of the book is the true-to-life examples, because those provide the basis for arguing the successful application of the theory.&lt;/p&gt;
&lt;p&gt;Because the book is in fact the theory of &lt;a href=&quot;https://en.wikipedia.org/wiki/DevOps&quot;&gt;DevOps&lt;/a&gt; compiled into an exciting story. Which is a lot more fun than it sounds.&lt;/p&gt;
&lt;p&gt;Actually the book could be seen as a modern day version of &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Goal_(novel)&quot;&gt;The Goal&lt;/a&gt; by Dr. Goldratt — a book that handles the &lt;a href=&quot;https://en.wikipedia.org/wiki/Theory_of_constraints&quot;&gt;Theory of Constraints&lt;/a&gt; — which I &lt;em&gt;had&lt;/em&gt; of course heard of, but never read. The writers of The Phoenix Project make no secret of their admiration for Goldratts&amp;#8217; theory. But DevOps is of course a thing of its own. A relatively new paradigm, borrowing from TOC, Lean and Agile principles among other things. Its goal is &amp;#8216;to aim at shorter development cycles, increased deployment frequency, and more dependable releases, in close alignment with business objectives&amp;#8217;. And where &lt;a href=&quot;https://itrevolution.com/the-three-ways-principles-underpinning-devops/&quot;&gt;The Three Ways&lt;/a&gt; theory is a central aspect, unifying culture with production flow. The book shows how those theoretic mechanics work in practice. And that IT is closer to manufacturing than you might think; by breaking down the four different types of work there are in IT. That was actually an eye-opener for me. But I won&amp;#8217;t go into too much detail about DevOps, I just wanted to point you in the right direction. &lt;strong&gt;If you work with different people to create &lt;em&gt;anything&lt;/em&gt; in IT, you are probably going to like this book, and are bound to learn something.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://j11g.com/index.php/2018/07/18/the-phoenix-project/&quot;&gt;The Phoenix Project&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://j11g.com&quot;&gt;Jan van den Berg&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-18T15:10:16+00:00</dc:date>
</item>
<item rdf:about="http://jakob.spaceReplacing+Anki+With+org-drill">
	<title>Jakob (jakob): Replacing Anki With org-drill</title>
	<link>http://jakob.spaceReplacing+Anki+With+org-drill</link>
	<content:encoded>&lt;p class=&quot;indent&quot;&gt;Recently, I read Michael Nielsen's essay, &lt;a href=&quot;http://augmentingcognition.com/ltm.html&quot;&gt;&quot;Augmenting Cognition&quot;&lt;/a&gt;. It talks
about some very interesting use cases for the spaced repetition software &quot;Anki&quot;
that made me want to try it out again. I'm familiar with Anki, as I used it
extensively throughout my last year of high school to study for AP exams. At the
time, Anki's &quot;killer feature&quot; for me over similar software was being able to
typeset mathematical notation in LaTeX (the exams were Chemistry and Calculus,
so almost all of the material to memorize was mathematical notation). It's a
great piece of software; I've been using it with the brother I'm helping through
summer school. But ever since I began using Gentoo, I've been trying to avoid
packages like QtWebView, which has deterred me from installing Anki on my
machine. With a little bit of searching, however, I found that there was an
Emacs package for spaced repetition named 'org-drill', so I decided to check it
out.&lt;/p&gt;
&lt;p class=&quot;indent&quot;&gt;org-drill is included in org by default (which happens to be included in Emacs
by default), but it does need to be enabled. The steps to do so are outlined on
the corresponding &lt;a href=&quot;https://orgmode.org/worg/org-contrib/org-drill.html&quot;&gt;worg page&lt;/a&gt;. So far, I've used it to study German
vocabulary and the material for my ham radio license exams, and I'm very happy
with it. It has all of the features you might want from Anki, like Cloze
deletion and double-sided cards, but I find that card creation is even more
intuitive in org markup. Clozes are as simple as enclosing the answers in square
brackets, and multi-sided cards just entail making multiple headings and setting
the &quot;:DRILL_CARD_TYPE:&quot;. You can even write your own card types in elisp.
Another benefit of using org markup as the source for cards is that I can easily
transform a plain text file into a deck using emacs macros.&lt;/p&gt;
&lt;p class=&quot;indent&quot;&gt;Unlike Anki, however, org-drill has support for the SM5 and SM8 scheduling
algorithms. &lt;a href=&quot;https://apps.ankiweb.net/docs/manual.html#what-algorithm&quot;&gt;Anki is quite outspoken about the benefits of SM2 over the later
renditions,&lt;/a&gt; but I appreciate that I at least have the option to use these
schedulers if I want to. The algorithms' parameters can also be finely tuned;
the one I've found most useful is 'org-drill-learn-fraction', which I can use to
decrease the amount of time before I see a card again.&lt;/p&gt;
&lt;p class=&quot;indent&quot;&gt;As I mentioned earlier, the feature that brought me to Anki was its support for
typesetting math with LaTeX. Emacs certainly has support for rendering LaTeX,
but I have a pretty wonky setup where I'm running Emacs in a terminal emulator,
so what I opted for instead was a typesetting language that renders to unicode
text. There are quite a few of these, but the one I was most impressed with is
&lt;a href=&quot;https://arthursonzogni.com/Diagon/&quot;&gt;Diagon&lt;/a&gt;. It's meant to be run in the browser, but the backend is written in
C++ and can be compiled to run natively. Be warned, however, that the build
system does require Java.&lt;/p&gt;
&lt;p class=&quot;indent&quot;&gt;First, I replace 'src/main.cpp' with the following. The version in VCS will
unconditionally run the SequenceTranslator, but this modification enables us to
select which translator to use from a command-line argument.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cpp&quot;&gt;#include &amp;quot;translator/Translator.h&amp;quot;
#include &amp;lt;iostream&amp;gt;

int main(int argc, const char **argv) {
    if (argc != 2) {
        std::cerr &amp;lt;&amp;lt; &amp;quot;usage: &amp;quot; &amp;lt;&amp;lt; argv[0] &amp;lt;&amp;lt; &amp;quot; [translator]&amp;quot; &amp;lt;&amp;lt; std::endl;
        return 1;
    }

    std::string input;
    for (std::string line; std::getline(std::cin, line);) {
        input += line + &amp;quot;\n&amp;quot;;
    }

    auto translator = TranslatorFromName(argv[1]);
    std::cout &amp;lt;&amp;lt; (*translator)(input, &amp;quot;&amp;quot;) &amp;lt;&amp;lt; std::endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, compiling is as easy as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-sh&quot;&gt;cd tools/antlr/
./download_and_patch.sh
cd ../../
mkdir build
cd build
cmake ..
make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And for Emacs integration, I've added the following to my '.emacs'&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-elisp&quot;&gt;;; Applies Diagon's &amp;quot;Math&amp;quot; formatter to the current region, replacing
;; the contents of the region with the formatted output.
(defun format-math-at-region ()
  (interactive)
  (let* ((math-to-format (buffer-substring (region-beginning) (region-end)))
         (command (format &amp;quot;echo \&amp;quot;%s\&amp;quot; | diagon Math&amp;quot; math-to-format))) ;; Bad and hacky. I'm aware.
      (kill-region (region-beginning) (region-end))
      (insert (string-trim-right (shell-command-to-string command)))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It's not as powerful as LaTeX, but it certainly suits my needs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://jakob.space/img/format_math_demo.gif&quot; alt=&quot;Demo&quot; /&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-13T14:53:13+00:00</dc:date>
</item>
<item rdf:about="https://medium.com/p/7bb3f57d4641">
	<title>Stjepan Golemac (stjepangolemac): Hi Marco,</title>
	<link>https://medium.com/@stjepan.golemac/hi-marco-7bb3f57d4641?source=rss-512a4050aac------2</link>
	<content:encoded>&lt;p&gt;Hi Marco,&lt;/p&gt;&lt;p&gt;I am glad that you find this article useful! I suppose that you are asking me about the prevention of endless looping.&lt;/p&gt;&lt;p&gt;The code from the provided repo will surely loop to eternity if the REQUEST action fails every time. The solution here could be adding a retry counter to the action. Such information would allow the monitor saga to abandon the action after the configured number of attempts.&lt;/p&gt;&lt;p&gt;If you look at the Flux Standard Action (&lt;a href=&quot;https://github.com/redux-utilities/flux-standard-action&quot;&gt;https://github.com/redux-utilities/flux-standard-action&lt;/a&gt;), it says the best place to put such data is in the meta property of the action.&lt;/p&gt;&lt;p&gt;You could extend the functionality of the monitor saga to increment the counter every time it encounters a failed action.&lt;/p&gt;&lt;p&gt;Example:&lt;/p&gt;&lt;p&gt;starting to monitor action:&lt;br /&gt;{ type: ‘FOO_REQUEST’, payload: { … } }&lt;/p&gt;&lt;p&gt;action failed, refresh the token and dispatch it again:&lt;br /&gt;{ type: ‘FOO_REQUEST’, payload: { … }, meta: { retry: 1 } }&lt;/p&gt;&lt;p&gt;…&lt;/p&gt;&lt;p&gt;action failed again, retry counter is &amp;gt; 3, ignore the action…&lt;/p&gt;&lt;p&gt;I hope this is understandable. Cheers!&lt;/p&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7bb3f57d4641&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2018-07-12T20:35:48+00:00</dc:date>
</item>
<item rdf:about="https://medium.com/p/88a25e162bf6">
	<title>Oleg Kovalov (olegkovalov): Contributing to Go with go-critic</title>
	<link>https://blog.usejournal.com/contributing-to-go-with-go-critic-88a25e162bf6?source=rss-c34448aa5bb9------2</link>
	<content:encoded>&lt;p&gt;You might remember announce of go-critic &lt;a href=&quot;https://itnext.io/welcome-go-critic-a26b6e30f1c6&quot;&gt;last month&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;We’ve verified &lt;a href=&quot;https://github.com/golang/go&quot;&gt;golang/go&lt;/a&gt; repository and have send few patches, that are fixing found problems. In this post, we will inspect the suggested changes.&lt;/p&gt;&lt;p&gt;You can find list of go-critic patches on &lt;a href=&quot;https://go-critic.github.io/trophies.html#golanggo&quot;&gt;trophies&lt;/a&gt; page.&lt;/p&gt;&lt;p&gt;List of patches covered in this post:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://golang.org/cl/117615&quot;&gt;net: combine append calls in reverseaddr&lt;/a&gt; appendCombine&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://golang.org/cl/113636&quot;&gt;cmd/link/internal/ld: avoid Reloc copies in range loops&lt;/a&gt; rangeValCopy&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://golang.org/cl/122776&quot;&gt;cmd/compile/internal/ssa: fix partsByVarOffset.Less method&lt;/a&gt; dupSubExpr&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://golang.org/cl/122895&quot;&gt;runtime: remove redundant explicit deref in trace.go&lt;/a&gt; underef&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://golang.org/cl/122896&quot;&gt;cmd/link/internal/sym: uncomment code for ELF cases in RelocName&lt;/a&gt; commentedOutCode&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123375&quot;&gt;runtime: simplify slice expression to sliced value itself&lt;/a&gt; unslice&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123376&quot;&gt;html/template: use named consts instead of their values&lt;/a&gt; namedConst&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123377&quot;&gt;cmd/internal/obj/arm64: simplify some bool expressions&lt;/a&gt; boolExprSimplify&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123378&quot;&gt;math,net: omit explicit true tag expr in switch&lt;/a&gt; switchTrue&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123379&quot;&gt;archive/tar: remore redundant parens in type expressions&lt;/a&gt; typeUnparen&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;dupSubExpr&lt;/h4&gt;&lt;p&gt;Everyone makes mistakes. In Go sometimes you may write boring and boilerplate code that increases copy/paste error probability.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://go-review.googlesource.com/c/go/+/122776&quot;&gt;CL122776&lt;/a&gt; contains bugfix that was found by &lt;a href=&quot;https://go-critic.github.io/overview#dupSubExpr-ref&quot;&gt;dupSubExpr&lt;/a&gt; checker:&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/7efcba7c15089e3bedcf904534040b44/href&quot;&gt;https://medium.com/media/7efcba7c15089e3bedcf904534040b44/href&lt;/a&gt;&lt;p&gt;Take a look at index on the right and on the left. They were identical before changes. dupSubExpr is created exactly for this situation, when left and right expression are identical.&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;commentedOutCode&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Hopefully your project is under &lt;a href=&quot;https://en.wikipedia.org/wiki/Version_control&quot;&gt;VCS&lt;/a&gt; and instead of disabling code via commenting it — it’s better to remove it completely. There’re exceptions, of course, but `dead code` is usually redundant and can hide bugs.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://go-critic.github.io/overview#commentedOutCode-ref&quot;&gt;commentedOutCode&lt;/a&gt; has found this interesting code (&lt;a href=&quot;https://go-review.googlesource.com/c/go/+/122896&quot;&gt;CL122896&lt;/a&gt;):&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/49b3f468bd36ad824059ef80359a2497/href&quot;&gt;https://medium.com/media/49b3f468bd36ad824059ef80359a2497/href&lt;/a&gt;&lt;p&gt;Above that code we can see a comment:&lt;/p&gt;&lt;pre&gt;&lt;em&gt;// We didn't have some relocation types at Go1.4.&lt;/em&gt;&lt;br /&gt;&lt;em&gt;// Uncomment code when we include those in bootstrap code.&lt;/em&gt;&lt;/pre&gt;&lt;p&gt;Switching to go1.4 branch and uncommenting this 3 lines will prevent code from a compilation, but uncommenting them on amaster branch will be ok.&lt;/p&gt;&lt;p&gt;Usually, the code is commented-out should be totally deleted or uncommented. It’s a good practice to review such old parts of the code and decide their meaning for the future (It’s one of my lovely checks, but also it’s a `noisy` one).&lt;/p&gt;&lt;p&gt;There are a lot of false positives for math/big package and inside the compiler. In the first case, they’re explaining operations, in the second case — which AST code it is processing. Programmatically decide what comment is just a comment and what is real commented code (might be `dead` code) — isn’t an easy task. Sadly.&lt;/p&gt;&lt;p&gt;Here is the idea: what about to mark commented-out code which explains behaviour of program from just a commented-out code? This might be a trivial thing, but it will help future readers a lot (by example, a code in comments can be prepended with a # character).&lt;/p&gt;&lt;p&gt;Another category — comments with explicit TODO. If the code was commented, but it has an explanation why it’s commented. For this case it’s better not to warn. It’s already implemented, but might work better.&lt;/p&gt;&lt;h4&gt;boolExprSimplify&lt;/h4&gt;&lt;p&gt;Sometimes people are writing strange code. For me, boolean expressions are a pain point more often than others.&lt;/p&gt;&lt;p&gt;Let’s look at this code:&lt;/p&gt;&lt;pre&gt;if !(o1 != 0) {&lt;br /&gt;    break&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;“If not o1 isn’t equal to zero” — double negation, classical. If you agree with me that it’s hard to read, here is a patch &lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123377&quot;&gt;CL123377&lt;/a&gt; with a simplification.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://go-critic.github.io/overview#boolExprSimplify-ref&quot;&gt;boolExprSimplify&lt;/a&gt; is targeting on boolean expression simplification, that will improve code readability (question regarding performance will be handled by Go optimizer).&lt;/p&gt;&lt;h4&gt;underef&lt;/h4&gt;&lt;p&gt;If you’re using Go from early versions you might remember when ; was mandatory, the absence of automatic pointer dereference and other `features` that aren’t presented now.&lt;/p&gt;&lt;p&gt;In old Go code you might found something like this:&lt;/p&gt;&lt;pre&gt;&lt;em&gt;// Long time ago there was not automatic pointer dereference:&lt;/em&gt;&lt;br /&gt;buf := (*bufp).ptr()&lt;br /&gt;&lt;em&gt;// ...now it can be as simple as:&lt;/em&gt;&lt;br /&gt;buf := bufp.ptr()&lt;/pre&gt;&lt;p&gt;Few &lt;a href=&quot;https://go-critic.github.io/overview#underef-ref&quot;&gt;underef&lt;/a&gt; checker triggers were fixed here: &lt;a href=&quot;https://go-review.googlesource.com/c/go/+/122895&quot;&gt;CL122895&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;appendCombine&lt;/h3&gt;&lt;p&gt;You might know that append can receive a variable number of arguments. In most cases this allows to improve readability but also this might improve performance too, ’cause compiler doesn’t combine a sequence of append calls (&lt;a href=&quot;https://github.com/golang/go/issues/25828&quot;&gt;cmd/compile: combine append calls&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;In Go repo &lt;a href=&quot;https://go-critic.github.io/overview#appendCombine-ref&quot;&gt;appendCombine&lt;/a&gt; checker has found such code:&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/11d1c3c8c549ef58601d7c659fbc43cc/href&quot;&gt;https://medium.com/media/11d1c3c8c549ef58601d7c659fbc43cc/href&lt;/a&gt;&lt;pre&gt;name              old time/op  new time/op  delta&lt;br /&gt;ReverseAddress-8  4.10µs ± 3%  3.94µs ± 1%  -3.81%  (p=0.000 n=10+9)&lt;/pre&gt;&lt;p&gt;Details in &lt;a href=&quot;https://go-review.googlesource.com/c/go/+/117615&quot;&gt;CL117615&lt;/a&gt;.&lt;/p&gt;&lt;h4&gt;rangeValCopy&lt;/h4&gt;&lt;p&gt;It’s not a secret that value in the range loop are copying. For a small objects (let’s say less than 64 bytes) you might not see a difference. But when it’s a `hot loop` and objects aren’t small enough — performance degradation might occur.&lt;/p&gt;&lt;p&gt;Go has a slightly slow linker (cmd/link) and without big changes in architecture achieving great performance boost isn’t so easy. But we’ve micro-optimizations 😉.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://go-critic.github.io/overview#rangeValCopy-ref&quot;&gt;rangeValCopy&lt;/a&gt; check has found few loops with unwanted data copying. Here is the most interesting one:&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/01aac782ea56117f34dc1d4e5d37e25c/href&quot;&gt;https://medium.com/media/01aac782ea56117f34dc1d4e5d37e25c/href&lt;/a&gt;&lt;p&gt;Instead of copying R[i] on every iteration we’re accessing only 1 interesting field for us Sym.&lt;/p&gt;&lt;pre&gt;name      old time/op  new time/op  delta&lt;br /&gt;Linker-4   530ms ± 2%   521ms ± 3%  -1.80%  (p=0.000 n=17+20)&lt;/pre&gt;&lt;p&gt;Full patch is here &lt;a href=&quot;https://go-review.googlesource.com/c/go/+/113636&quot;&gt;CL113636&lt;/a&gt;.&lt;/p&gt;&lt;h4&gt;namedConst&lt;/h4&gt;&lt;p&gt;In Go, sadly, named constants even when grouped together aren’t connected between each other and didn’t form enumeration like the other languages (&lt;a href=&quot;https://github.com/golang/go/issues/19814&quot;&gt;proposal: spec: add typed enum support&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;One of this problem is a casting &lt;a href=&quot;https://golang.org/ref/spec#Constants&quot;&gt;untyped&lt;/a&gt; const to a type that you’re using like an enum.&lt;/p&gt;&lt;p&gt;Suppose you have a type Color and it’s default const ColDefault Color = 0.&lt;br /&gt;Which of 2 examples your like more?&lt;/p&gt;&lt;pre&gt;&lt;em&gt;// (A)&lt;/em&gt;&lt;br /&gt;if color == 0 {&lt;br /&gt;    // do smth&lt;br /&gt;}&lt;br /&gt;&lt;em&gt;// (B)&lt;/em&gt;&lt;br /&gt;if color == colorDefault {&lt;br /&gt;    // do smth&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;If case (B) for you looks more clear &lt;a href=&quot;https://go-critic.github.io/overview#namedConst-ref&quot;&gt;namedConst&lt;/a&gt; will help you to find such usages and propose named const for that.&lt;/p&gt;&lt;p&gt;Here are the changes for &lt;a href=&quot;https://github.com/golang/go/blob/631402f142e52f535b66864ad1957ef39c78c704/src/html/template/context.go#L45&quot;&gt;context.mangle&lt;/a&gt; method from package html/template:&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/78494dacd2c0653c242d56f4750d5a4c/href&quot;&gt;https://medium.com/media/78494dacd2c0653c242d56f4750d5a4c/href&lt;/a&gt;&lt;p&gt;By the way, sometimes in a patch review you can find interesting discussions…&lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123376&quot;&gt;CL123376&lt;/a&gt; — is a one of such discussions.&lt;/p&gt;&lt;h3&gt;unslice&lt;/h3&gt;&lt;p&gt;One of the features of &lt;a href=&quot;https://golang.org/ref/spec#Slice_expressions&quot;&gt;slice expression&lt;/a&gt; is that x[:] is always identical tox (or if x is a string). In case of a slice it works for any type.&lt;/p&gt;&lt;pre&gt;x       // x is a slice&lt;br /&gt;x[:]    // also a slice&lt;br /&gt;x[:][:] // even this&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://go-critic.github.io/overview#unslice-ref&quot;&gt;unslice&lt;/a&gt; finds similar redundant slice expressions. They’re bad ’cause they’re giving unneeded cognitive load. x[:] makes sense when x is an array, but for a slice it’s just a noise.&lt;/p&gt;&lt;p&gt;Here is a patch &lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123375&quot;&gt;CL123375&lt;/a&gt;.&lt;/p&gt;&lt;h4&gt;switchTrue&lt;/h4&gt;&lt;p&gt;The replacement of switch true {...} toswitch {...} is done in &lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123378&quot;&gt;CL123378&lt;/a&gt;.&lt;br /&gt;Both of forms are equivalent, but last one is more idiomatic.&lt;/p&gt;&lt;p&gt;Most of the style checks are targeting on similar expressions, where both of them are allowed and correct, but only one of them is more common for Go developers. Next check is from the same category.&lt;/p&gt;&lt;h4&gt;typeUnparen&lt;/h4&gt;&lt;p&gt;Go as many other languages likes parentheses. So heavily, that allows any number of them:&lt;/p&gt;&lt;pre&gt;type (&lt;br /&gt;    t0 int&lt;br /&gt;    t1 (int)&lt;br /&gt;    t2 ((int))&lt;br /&gt;    &lt;em&gt;// ... so, you get the idea.&lt;/em&gt;&lt;br /&gt;)&lt;/pre&gt;&lt;p&gt;But what will happen after running gofmt?&lt;/p&gt;&lt;pre&gt;type (&lt;br /&gt;    t0 int&lt;br /&gt;    t1 (int) &lt;em&gt;// &amp;lt;- Woah! Nothing has changed.&lt;/em&gt;&lt;br /&gt;    t2 (int) &lt;em&gt;// &amp;lt;- Meh..only half of work is done here...&lt;/em&gt;&lt;br /&gt;)&lt;/pre&gt;&lt;p&gt;For this case, we have &lt;a href=&quot;https://go-critic.github.io/overview#typeunparen&quot;&gt;typeUnparen&lt;/a&gt; checker. It finds all type expressions, where some parentheses can be omitted. We’ve tried to fix few warnings here &lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123379&quot;&gt;CL123379&lt;/a&gt;, we will see if it will be merged.&lt;/p&gt;&lt;h4&gt;go-critic on duty&lt;/h4&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/300/0*ACEv9hpHPq7ldde8.jpeg&quot; /&gt;&lt;p&gt;We’ve covered only tiny part of all checks and in near future, we will have more of them with new cases, suggestions and solutions thanks to the people that are &lt;a href=&quot;https://github.com/go-critic/go-critic/graphs/contributors&quot;&gt;contributing to go-critic&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Send us ideas or any code improvements, inform about found warnings, maybe bugs or just ping us. You might also suggest projects for auditing, it’s a priceless experience for us. Thank you.&lt;/p&gt;&lt;h4&gt;More where this came from&lt;/h4&gt;&lt;p&gt;This story is published in &lt;a href=&quot;http://blog.usejournal.com&quot;&gt;Noteworthy&lt;/a&gt;, where thousands come every day to learn about the people &amp;amp; ideas shaping the products we love.&lt;/p&gt;&lt;p&gt;Follow our publication to see more product &amp;amp; design stories featured by the &lt;a href=&quot;https://usejournal.com/?utm_source=usejournal.com&amp;utm_medium=blog&amp;utm_campaign=guest_post&quot;&gt;Journal&lt;/a&gt; team.&lt;/p&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=88a25e162bf6&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://blog.usejournal.com/contributing-to-go-with-go-critic-88a25e162bf6&quot;&gt;Contributing to Go with go-critic&lt;/a&gt; was originally published in &lt;a href=&quot;https://blog.usejournal.com&quot;&gt;Noteworthy - The Journal Blog&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-12T19:06:32+00:00</dc:date>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-12-18-24-17">
	<title>Unrelenting Technology (myfreeweb): For 0.5 dollars per hour (or currently 0.1/hr if you reserve for 24h?) on...</title>
	<link>https://unrelenting.technology/notes/2018-07-12-18-24-17</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;For 0.5 dollars per hour (or currently 0.1/hr if you reserve for 24h?) on packet.net you can get access to a dedicated dual-socket Cavium ThunderX server with 128GB RAM and a 250GB SSD.
I took it for a few hours and now &lt;a href=&quot;https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=229636&quot;&gt;lang/crystal&lt;/a&gt;, &lt;a href=&quot;https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=229710&quot;&gt;lang/mono&lt;/a&gt; and some other ports work on aarch64.&lt;/p&gt;
&lt;p&gt;Ironically, these two builds have involved long single-threaded compile processes. In the mono case, parallelism had to be disabled for C# compilation &lt;a href=&quot;https://github.com/mono/mono/issues/7017&quot;&gt;to work around a concurrency bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At least building things like WebKitGTK+ (to test a &lt;a href=&quot;https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=228699&quot;&gt;one line patch&lt;/a&gt;) and Krita felt awesome :D&lt;/p&gt;

&lt;blockquote&gt;
&lt;img src=&quot;https://unrelentingtech.s3.dualstack.eu-west-1.amazonaws.com/e80dabc8_wayland-screenshot-2018-07-12_01-50-26-fs8.png&quot; alt=&quot;&quot; class=&quot;u-photo&quot; /&gt;
&lt;/blockquote&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-12T18:24:41+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="http://caiustheory.com/running-rails-tests-under-circleci-2.0-with-mariadb/">
	<title>Caius Durling (caius): Running rails tests under CircleCI 2.0 with MariaDB</title>
	<link>http://caiustheory.com/running-rails-tests-under-circleci-2.0-with-mariadb/</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;https://circleci.com&quot;&gt;CircleCI&lt;/a&gt; have released their version 2.0 platform, which is based on top of docker and moves the configuration for each project into a config file in the git repository.&lt;/p&gt;

&lt;p&gt;They have a bunch of documentation at &lt;a href=&quot;https://circleci.com/docs/2.0/&quot;&gt;https://circleci.com/docs/2.0/&lt;/a&gt;. Basic gist is the config file lives at &lt;code&gt;.circleci/config.yml&lt;/code&gt; and defines which images to run a series of commands in. You can either specify jobs to run in series, or a workflow containing jobs which can depend on each other and/or run in parallel.&lt;/p&gt;

&lt;p&gt;The first step is finding a base image that contains ruby, node and chrome/chromedriver so the the app runs, assets compile and rails feature specs work respectively.&lt;/p&gt;

&lt;p&gt;The available images for ruby are listed at &lt;a href=&quot;https://github.com/CircleCI-Public/circleci-dockerfiles/tree/master/ruby/images&quot;&gt;https://github.com/CircleCI-Public/circleci-dockerfiles/tree/master/ruby/images&lt;/a&gt;, and the mariadb images are listed at &lt;a href=&quot;https://github.com/CircleCI-Public/circleci-dockerfiles/tree/master/mariadb/images&quot;&gt;https://github.com/CircleCI-Public/circleci-dockerfiles/tree/master/mariadb/images&lt;/a&gt;. For the ruby images you'll want to use the &lt;code&gt;…-node-browsers&lt;/code&gt; image as it has Node.js for assets and Chrome/chromedriver installed for headless browser testing.&lt;/p&gt;

&lt;p&gt;So the start of our config file looks something like the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;version&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;working_directory&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~/project&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;image&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;circleci/ruby:2.4.1-node-browsers&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;environment&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;RAILS_ENV&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;image&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mariadb:10.2.12&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;environment&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;MYSQL_DATABASE&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app_test&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;MYSQL_USER&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;MYSQL_ALLOW_EMPTY_PASSWORD&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;MYSQL_HOST&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we have that then we can start on setting up our rails environment to the point we can run tests. First of all we need to install all our ruby dependencies via &lt;a href=&quot;https://bundler.io&quot;&gt;bundler&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;jobs&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Install ruby dependencies&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bundle install --path vendor/bundle&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we need to install our JS dependencies via &lt;a href=&quot;https://yarnpkg.com/lang/en/&quot;&gt;yarn&lt;/a&gt;, in much the same way as we did for the ruby dependencies.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Install js dependencies&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yarn install&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we need to sort out our database. There's a chance that the docker instance for MariaDB hasn't come up yet, so we can lean on a tool called &lt;code&gt;dockerize&lt;/code&gt; to wait for it to be available. Then we can ask rails to go ahead and setup our test database.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Wait for database to be available&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dockerize -wait tcp://127.0.0.1:3306 -timeout 1m&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Setup database&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bundle exec rake db:setup&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then finally we can run our tests as the final step.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Run tests&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bundle exec rspec&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Putting it all together, we have the following in &lt;code&gt;.circleci/config.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;version&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;working_directory&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~/project&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;image&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;circleci/ruby:2.4.1-node-browsers&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;environment&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;RAILS_ENV&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;image&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mariadb:10.2.12&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;environment&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;MYSQL_DATABASE&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app_test&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;MYSQL_USER&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;MYSQL_ALLOW_EMPTY_PASSWORD&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;MYSQL_HOST&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;jobs&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Install ruby dependencies&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bundle install --path vendor/bundle&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Install js dependencies&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yarn install&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Wait for database to be available&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dockerize -wait tcp://127.0.0.1:3306 -timeout 1m&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Setup database&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bundle exec rake db:setup&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Run tests&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bundle exec rspec&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;May your test runs always be green and your bugs be squished.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-11T18:30:00+00:00</dc:date>
</item>
<item rdf:about="tag:sweetness.hmmz.org,2018-07-10:/2018-07-10-mitogen-released.html">
	<title>David Wilson (dw): Mitogen released!</title>
	<link>https://sweetness.hmmz.org/2018-07-10-mitogen-released.html</link>
	<content:encoded>&lt;img src=&quot;https://sweetness.hmmz.org/images/mito1/cell_division.png&quot; /&gt;

    &lt;p&gt;
    After 4 months development, a design phase stretching back 10 years and
    more than 1,300 commits, I am pleased to finally announce the first stable
    series of Mitogen and the Mitogen for Ansible extension.
    &lt;/p&gt;

    &lt;p&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;https://mitogen.readthedocs.io/&quot;&gt;Mitogen is a Python zero-deploy
    distributed programming library&lt;/a&gt; designed to drastically increase the
    functional capability of infrastructure software operating via SSH. &lt;a target=&quot;_blank&quot; href=&quot;https://mitogen.readthedocs.io/en/stable/ansible.html&quot;&gt;Mitogen for
    Ansible&lt;/a&gt; is a drop-in replacement for Ansible's lower tiers, netting
    huge speed and efficiency improvements for common playbooks.
    &lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;What's There&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;
    This initial series covers a widely compatible drop-in Ansible extension on
    Python 2.6, 2.7, and 3.6, a preview of the first value-added functionality
    for Ansible (&lt;a target=&quot;_blank&quot; href=&quot;https://mitogen.readthedocs.io/en/stable/ansible.html#connection-delegation&quot;&gt;Connection
    Delegation&lt;/a&gt;), and a freeze of the underlying library required to support
    it.
    &lt;/p&gt;

    &lt;p&gt;
    With the exception of some gotchas listed in the &lt;a target=&quot;_blank&quot; href=&quot;https://mitogen.readthedocs.io/en/stable/changelog.html&quot;&gt;release
    notes&lt;/a&gt;, you should expect the Ansible extension to &lt;em&gt;just work&lt;/em&gt;,
    and if it doesn't &lt;a target=&quot;_blank&quot; href=&quot;https://goo.gl/yLKZiJ&quot;&gt;please let me know via
    GitHub&lt;/a&gt;.
    &lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;
    Refer to the posts under &lt;em&gt;Just Tuning In?&lt;/em&gt; below for a 1000 foot
    view of the direction this work is heading, but for an idea of how things
    are today, watch the first minute of this recording, demonstrating a
    loop-heavy configuration of Mitogen's tests executing against the local
    machine.
    &lt;/p&gt;

    &lt;p&gt;
    
        
    
    &lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;
    To install Mitogen for Ansible, just follow the &lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mitogen.readthedocs.io/en/stable/ansible.html#installation&quot;&gt;5
    easy steps&lt;/a&gt;&lt;/strong&gt; in the documentation. For non-Ansible users the
    library is available from PyPI via &lt;code&gt;pip install mitogen&lt;/code&gt;.
    Introductory documentation for the library is very weak right now, it will
    improve over the course of the stable series.
    &lt;/p&gt;

    &lt;!--
    &lt;p&gt;&lt;strong&gt;Early User Feedback&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
    &lt;li&gt;&quot;With mitogen &lt;strong&gt;my playbook runtime went from 45 minutes to just
        under 3 minutes&lt;/strong&gt;. Awesome work!&quot;&lt;/li&gt;
    &lt;li&gt;&quot;The runtime was reduced from &lt;strong&gt;1.5 hours on 4 servers to just
        under 3 minutes&lt;/strong&gt;. Thanks!&quot;&lt;/li&gt;
    &lt;li&gt;&quot;Oh, performance improvement using Mitogen is &lt;strong&gt;huge&lt;/strong&gt;. As
        mentioned before, running with Mitogen enables takes 7m36 (give or take
        a few seconds). Without Mitogen, the same run takes 19m49! &lt;strong&gt;I'm not
        even deploying without Mitogen anymore&lt;/strong&gt; :)&quot;&lt;/li&gt;
    &lt;li&gt;&quot;&lt;strong&gt;Works like a charm&lt;/strong&gt;, thank you for your quick response&quot;&lt;/li&gt;
    &lt;li&gt;&quot;I tried it out. &lt;strong&gt;He is not kidding about the speed
        increase&lt;/strong&gt;.&quot;
    &lt;li&gt;&quot;I don't know what kind of dark magic @dmw_83 has done, but his Mitogen
        strategy took Clojars' Ansible runs from &lt;strong&gt;14 minutes to 2
        minutes&lt;/strong&gt;. I still can't quite believe it.&quot;&lt;/li&gt;
    &lt;/ul&gt;
    --&gt;

    &lt;p&gt;&lt;strong&gt;Thanks to all the supporters!&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;
    Mitogen development in 2018 was sponsored by a
    &lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mitogen.readthedocs.io/en/stable/contributors.html&quot;&gt;fabulous
    group of individuals and businesses&lt;/a&gt;&lt;/strong&gt; through a crowdfunding
    campaign launched in February. Thanks to everyone who participated by
    pledging, testing, writing bug reports, and helping with upfront planning.
    A huge special thanks to the primary sponsor:
    &lt;/p&gt;

    &lt;div&gt;
        &lt;div&gt;
            &lt;img src=&quot;https://mitogen.readthedocs.io/en/stable/_images/cgi.svg&quot; height=&quot;110&quot; width=&quot;238&quot; /&gt;
        &lt;/div&gt;
        &lt;div&gt;
            &lt;p&gt;
            Founded in 1976, CGI is one of the world’s largest IT and business
            consulting services firms, helping clients achieve their goals,
            including becoming customer-centric digital organizations.
            &lt;/p&gt;

            &lt;p&gt;
            &lt;br clear=&quot;all&quot; /&gt;
            For career opportunities, please visit &lt;a target=&quot;_blank&quot; href=&quot;https://cgi-group.co.uk/defence-and-intelligence-opportunities&quot;&gt;cgi-group.co.uk/defence-and-intelligence-opportunities&lt;/a&gt;.
            &lt;/p&gt;

            &lt;p&gt;
            To &lt;a target=&quot;_blank&quot; href=&quot;https://cgi.njoyn.com/CGI/xweb/XWeb.asp?page=jobdetails&amp;CLID=21001&amp;SBDID=21814&amp;jobid=J0118-0787&quot;&gt;directly
            apply&lt;/a&gt; to a UK team currently using Mitogen, contact us
            regarding &lt;a target=&quot;_blank&quot; href=&quot;https://cgi.njoyn.com/CGI/xweb/XWeb.asp?page=jobdetails&amp;CLID=21001&amp;SBDID=21814&amp;jobid=J0118-0787&quot;&gt;Open
            Source Developer/DevOps&lt;/a&gt; opportunities.
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;p&gt;&lt;strong&gt;What's next&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;
    Feature work will resume after most issues are ironed out of the stable
    series -- in particular I'm expecting more bugs around Python 3 and cross
    2/3 interoperability. Once 0.2.x looks solid, one important goal is a
    complete and widely compatible Connection Delegation feature, including a
    rewrite of the &lt;code&gt;fakessh&lt;/code&gt; component to support transparent use of
    the &lt;code&gt;synchronize&lt;/code&gt; module.
    &lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Just tuning in?&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
    &lt;li&gt;2017-09-15: &lt;a target=&quot;_blank&quot; href=&quot;https://sweetness.hmmz.org/2017-09-15-mitogen-an-infrastructure-code-baseline-that.html&quot;&gt;Mitogen, an infrastructure code baseline that sucks less&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;2018-03-06: &lt;a target=&quot;_blank&quot; href=&quot;https://sweetness.hmmz.org/2018-03-06-quadrupling-ansible-performance-with-mitogen.html&quot;&gt;Quadrupling Ansible performance with Mitogen&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;2018-03-28: &lt;a target=&quot;_blank&quot; href=&quot;https://sweetness.hmmz.org/2018-03-28-crowdfunding-mitogen-day-23.html&quot;&gt;Crowdfunding Mitogen: day 23&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;2018-04-20: &lt;a target=&quot;_blank&quot; href=&quot;https://sweetness.hmmz.org/2018-04-20-crowfunding-mitogen-day-46.html&quot;&gt;Crowdfunding Mitogen: day 46&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;2018-05-23: &lt;a target=&quot;_blank&quot; href=&quot;https://sweetness.hmmz.org/2018-05-23-mitogen-for-ansible-status-23-may.html&quot;&gt;Mitogen for Ansible status, 23 May&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;
    Until next time!
    &lt;/p&gt;</content:encoded>
	<dc:date>2018-07-10T17:08:00+00:00</dc:date>
</item>
<item rdf:about="http://www.petecorey.com/blog/2018/07/09/golfing-for-fizzbuzz-in-clojure-and-elixir/">
	<title>Pete Corey (petecorey): Golfing for FizzBuzz in Clojure and Elixir</title>
	<link>http://www.petecorey.com/blog/2018/07/09/golfing-for-fizzbuzz-in-clojure-and-elixir/</link>
	<content:encoded>&lt;p&gt;I recently came across &lt;a href=&quot;https://gist.github.com/krisajenkins/3333741&quot;&gt;this riff on the FizzBuzz problem written in Clojure&lt;/a&gt;. While it’s admittedly not terribly obvious what’s going on, I thought it was a novel solution to &lt;a href=&quot;https://en.wikipedia.org/wiki/Fizz_buzz&quot;&gt;the FizzBuzz problem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How could we recreate this solution using &lt;a href=&quot;https://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt;? There are some obvious similarities between Clojure’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt;&lt;/code&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html#cycle/1&quot;&gt;Elixir’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;. As someone who’s always been a fanboy of Lisp syntax, which solution would I prefer?&lt;/p&gt;

&lt;p&gt;There’s only one way to find out…&lt;/p&gt;

&lt;h2 id=&quot;but-first-an-explanation&quot;&gt;But First, an Explanation&lt;/h2&gt;

&lt;p&gt;Before we dive into our Elixir solution, we should work out what exactly this Clojure solution is doing:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
(clojure.pprint/pprint
  (map vector
    (range 25)
    (cycle [:fizz :_ :_])
    (cycle [:buzz :_ :_ :_ :_])))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clojure’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;clojure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;/code&gt; obviously just prints whatever’s passed into it. In this case, we’re printing the result of this expression:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
(map vector
  (range 25)
  (cycle [:fizz :_ :_])
  (cycle [:buzz :_ :_ :_ :_])))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what exactly’s happening here? Clojure’s &lt;a href=&quot;https://clojuredocs.org/clojure.core/map&quot;&gt;&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; function is interesting. It let’s you map a function over any number of collections. The result of the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;/code&gt;  expression is the result of applying the function to each of the first values of each collection, followed by the result of applying the mapped function to each of the second values, and so on.&lt;/p&gt;

&lt;p&gt;In this case, we’re mapping the &lt;a href=&quot;https://clojuredocs.org/clojure.core/vector&quot;&gt;&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; function over three collections: the range of numbers from zero to twenty four (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;), &lt;a href=&quot;https://clojuredocs.org/clojure.core/cycle&quot;&gt;the infinite cycle&lt;/a&gt; of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:fizz&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt;&lt;/code&gt;, and &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt;&lt;/code&gt; (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fizz&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;), and the infinite cycle of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:buzz&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt;&lt;/code&gt; (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:buzz&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Mapping &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;/code&gt; over each of these collections creates a vector for each index, and whether it should display Fizz, Buzz, or FizzBuzz for that particular index.&lt;/p&gt;

&lt;p&gt;The result looks just like we’d expect:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
([0 :fizz :buzz]
 [1 :_ :_]
 [2 :_ :_]
 [3 :fizz :_]
 [4 :_ :_]
 [5 :_ :buzz]
 ...
 [24 :fizz :_])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;an-elixir-solution&quot;&gt;An Elixir Solution&lt;/h2&gt;

&lt;p&gt;So how would we implement this style of FizzBuzz solution using Elixir? As we mentioned earlier, Elixir’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; function is almost identical to Clojure’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt;&lt;/code&gt;. Let’s start there.&lt;/p&gt;

&lt;p&gt;We’ll make two cycles of our Fizz and Buzz sequences:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
Stream.cycle([:fizz, :_, :_])
Stream.cycle([:buzz, :_, :_, :_, :_])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On their own, these two cycles don’t do much.&lt;/p&gt;

&lt;p&gt;Let’s use &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html#zip/2&quot;&gt;&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; to effectively perform the same operation as Clojure’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
Stream.zip(Stream.cycle([:fizz, :_, :_]), Stream.cycle([:buzz, :_, :_, :_, :_])) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can print the first twenty five pairs by piping our zipped streams into &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; and printing the result with &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
Stream.zip(Stream.cycle([:fizz, :_, :_]), Stream.cycle([:buzz, :_, :_, :_, :_])) 
|&amp;gt; Enum.take(25)
|&amp;gt; IO.inspect
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our result looks similar:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
[
  fizz: :buzz,
  _: :_,
  _: :_,
  fizz: :_,
  _: :_,
  _: :buzz,
  ...
  fizz: :_
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While our solution works, I’m not completely happy with it.&lt;/p&gt;

&lt;h2 id=&quot;polishing-our-solution&quot;&gt;Polishing Our Solution&lt;/h2&gt;

&lt;p&gt;For purely aesthetic reasons, let’s import the function’s we’re using from &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
import Stream, only: [cycle: 1, zip: 2]
import Enum, only: [take: 2]
import IO, only: [inspect: 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This simplifies the visual complexity of our solution:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
zip(cycle([:fizz, :_, :_]), cycle([:buzz, :_, :_, :_, :_]))
|&amp;gt; take(25)
|&amp;gt; inspect
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we can take it one step further.&lt;/p&gt;

&lt;div class=&quot;post-footer&quot;&gt;
    &lt;div class=&quot;signup-form&quot;&gt;
        &lt;form action=&quot;http://east5th.us11.list-manage.com/subscribe/post?u=f8833fd40e2b1b28545d9f382&amp;id=c56ceba687&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; target=&quot;_blank&quot;&gt;
            &lt;p&gt;Sign up for &lt;a href=&quot;http://www.petecorey.com/newsletter&quot;&gt;Pete's mailing list&lt;/a&gt; and have fresh content delivered to you, hot off the presses every week!&lt;/p&gt;
            &lt;div class=&quot;email-wrapper&quot;&gt;
                &lt;input type=&quot;text&quot; value=&quot;&quot; name=&quot;FNAME&quot; class=&quot;&quot; id=&quot;mce-FNAME&quot; /&gt;&lt;!--
                                                                                                           --&gt;&lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; id=&quot;mce-EMAIL&quot; /&gt;&lt;!--
                                                                                                                                                                                                    --&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; /&gt;
            &lt;/div&gt;
            &lt;div&gt;&lt;input type=&quot;text&quot; name=&quot;b_f8833fd40e2b1b28545d9f382_c56ceba687&quot; tabindex=&quot;-1&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Rather than using &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt;, which expects a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;/code&gt; argument, let’s use &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html#zip/1&quot;&gt;&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, which expects to be passed an enumerable of streams:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
[
  cycle([:fizz, :_, :_]),
  cycle([:buzz, :_, :_, :_, :_])
]
|&amp;gt; zip
|&amp;gt; take(25)
|&amp;gt; inspect
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s our final solution.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;To be honest, I’ve been having troubles lately coming to terms with some of Elixir’s aesthetic choices. As someone who’s always admired the simplicity of Lisp syntax, I fully expected myself to prefer the Clojure solution over the Elixir solution.&lt;/p&gt;

&lt;p&gt;That being said, I hugely prefer the Elixir solution we came up with!&lt;/p&gt;

&lt;p&gt;The overall attack plan of the algorithm is much more apparent. It’s immediately clear that we start with two cycles of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:fizz&lt;/span&gt;&lt;/code&gt;/&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:buzz&lt;/span&gt;&lt;/code&gt; and some number of empty atoms. From there, we zip together the streams and take the first twenty five results. Lastly, we inspect the result.&lt;/p&gt;

&lt;p&gt;Which solution do you prefer?&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-09T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.petecorey.com/blog/2018/07/09/ping-pong-and-unresponsive-bitcoin-nodes/">
	<title>Pete Corey (petecorey): Ping, Pong, and Unresponsive Bitcoin Nodes</title>
	<link>http://www.petecorey.com/blog/2018/07/09/ping-pong-and-unresponsive-bitcoin-nodes/</link>
	<content:encoded>&lt;p&gt;The last piece of low-hanging fruit required to finish up the connectivity of our in-progress, &lt;a href=&quot;https://elixir-lang.org/&quot;&gt;Elixir-powered&lt;/a&gt; Bitcoin node is to implement a system to detect unresponsive peer connections and prune them from our list of active peers.&lt;/p&gt;

&lt;p&gt;Once an inactive peer is removed, our current system will automatically connect to a new peer to take its place.&lt;/p&gt;

&lt;p&gt;There are several potential solutions for building out this kind of timeout system, and I’ve been weighing their pros and cons in the back of my mind for several weeks. I think I’ve come to a relatively simple and elegant solution that tackles the problem with minimal technical and mental overhead.&lt;/p&gt;

&lt;p&gt;Let’s dive in!&lt;/p&gt;

&lt;h2 id=&quot;who-cares-about-unresponsive-nodes&quot;&gt;Who Cares About Unresponsive Nodes?&lt;/h2&gt;

&lt;p&gt;In its current state, our Bitcoin node will connect to &lt;a href=&quot;https://github.com/bitcoin/bitcoin/blob/23e7fe8be827cdcdcace2a77ecc683074b97f8a2/src/net.h#L70-L71&quot;&gt;up to one hundred twenty five peer nodes&lt;/a&gt;. We assume that each of these nodes is a fully functioning and active part of the Bitcoin peer-to-peer network. If we don’t receive any messages from them, or if messages dwindle over time, we just assume that the network doesn’t have much to tell us.&lt;/p&gt;

&lt;p&gt;This assumption can lead to trouble. If we continue to persist our connections to unresponsive nodes, it’s conceivable that eventually every node we’re connected to will become unresponsive for some reason or another.&lt;/p&gt;

&lt;p&gt;At that point, our Bitcoin node is dead in the water. It’s unable to send or receive any information, and it’s unable to fetch any additional peers to reestablish its place in the peer-to-peer network. At this point our only course of action would be to restart the node and try again.&lt;/p&gt;

&lt;p&gt;And that’s not a very robust solution…&lt;/p&gt;

&lt;h2 id=&quot;detecting-slow-connections&quot;&gt;Detecting Slow Connections&lt;/h2&gt;

&lt;p&gt;Instead, we should be proactive about pruning unresponsive nodes from our set of peers. The first piece of low hanging fruit was can go after is adding a timeout to our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:gen_tcp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; call:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
:gen_tcp.connect(
  IP.to_tuple(state.ip),
  state.port,
  options,
  Application.get_env(:bitcoin_network, :timeout)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a node takes too long to respond to our initial connection request (in this case, &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:timeout&lt;/span&gt;&lt;/code&gt; is set to thirty seconds), we’ll retry the connection a few times and then ultimately remove the node from our set of peers.&lt;/p&gt;

&lt;h2 id=&quot;detecting-unresponsive-nodes&quot;&gt;Detecting Unresponsive Nodes&lt;/h2&gt;

&lt;p&gt;The next step in aggressively pruning our peer list is to watch for unresponsive nodes. We’ll do this by setting up a timeout between every message we receive from our peer. If we don’t receive another message before a certain cutoff time, we deem the peer unresponsive and break our connection.&lt;/p&gt;

&lt;p&gt;We’ll start by adding a call to a new &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;refresh_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; helper function in our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:tcp&lt;/span&gt;&lt;/code&gt; info handler:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def handle_info({:tcp, _port, data}, state) do
  state = refresh_timeout(state)
  ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first time &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;refresh_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; is called, it schedules a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:timeout&lt;/span&gt;&lt;/code&gt; message to be sent to the current process after a certain amount of time. A reference to that timer is stored in the process’ current state:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp refresh_timeout(state) do
  timer = Process.send_after(self(), :timeout, Application.get_env(:bitcoin_network, :timeout))
  Map.put_new(state, :timer, timer)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Subsequent calls to &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;refresh_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; cancel the existing timer, and create a new one:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp refresh_timeout(state = %{timer: timer}) do
  Process.cancel_timer(timer)
  refresh_timeout(Map.delete(state, :timer))
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to add a callback to handle the scheduled &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:timeout&lt;/span&gt;&lt;/code&gt; message:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def handle_info(:timeout, state) do
  {:disconnect, :timeout, state}
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whenever we receive a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:timeout&lt;/span&gt;&lt;/code&gt; message, we simply kill the current process, effectively disconnecting the associated peer.&lt;/p&gt;

&lt;h2 id=&quot;ensuring-a-constant-stream-of-messages&quot;&gt;Ensuring A Constant Stream of Messages&lt;/h2&gt;

&lt;p&gt;So now we’re disconnecting peers if we don’t receive a message from them within a certain period of time (thirty seconds in my case), but we have no way of guaranteeing that we &lt;em&gt;should&lt;/em&gt; receive messages this frequently. What if there are no new blocks or transactions on the network?&lt;/p&gt;

&lt;p&gt;To guarantee what we receive regular periodic messages, we need to set up a ping/pong loop.&lt;/p&gt;

&lt;div class=&quot;post-footer&quot;&gt;
    &lt;div class=&quot;signup-form&quot;&gt;
        &lt;form action=&quot;http://east5th.us11.list-manage.com/subscribe/post?u=f8833fd40e2b1b28545d9f382&amp;id=c56ceba687&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; target=&quot;_blank&quot;&gt;
            &lt;p&gt;Sign up for &lt;a href=&quot;http://www.petecorey.com/newsletter&quot;&gt;Pete's mailing list&lt;/a&gt; and have fresh content delivered to you, hot off the presses every week!&lt;/p&gt;
            &lt;div class=&quot;email-wrapper&quot;&gt;
                &lt;input type=&quot;text&quot; value=&quot;&quot; name=&quot;FNAME&quot; class=&quot;&quot; id=&quot;mce-FNAME&quot; /&gt;&lt;!--
                                                                                                           --&gt;&lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; id=&quot;mce-EMAIL&quot; /&gt;&lt;!--
                                                                                                                                                                                                    --&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; /&gt;
            &lt;/div&gt;
            &lt;div&gt;&lt;input type=&quot;text&quot; name=&quot;b_f8833fd40e2b1b28545d9f382_c56ceba687&quot; tabindex=&quot;-1&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Every so often we’ll send our peer node a “ping” message. If they’re still responsive, they’ll immediately respond with a “pong”. The peer will ensure our responsiveness by sending their own “pings”, which we’re already responding to.&lt;/p&gt;

&lt;p&gt;According to the woefully under-documented Bitcoin protocol, we can’t send our first “ping” until we send back our “verack” message. Any messages sent prior to our “verack” will mark our node as “misbehaving” and risk a disconnection.&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp handle_payload(%Version{}, state) do
  with :ok &amp;lt;- Message.serialize(&quot;verack&quot;) |&amp;gt; send_message(state.socket),
       :ok &amp;lt;- Message.serialize(&quot;getaddr&quot;) |&amp;gt; send_message(state.socket),
       :ok &amp;lt;-
         Message.serialize(&quot;ping&quot;, %Ping{
           nonce: :crypto.strong_rand_bytes(8)
         })
         |&amp;gt; send_message(state.socket) do
    {:ok, state}
  else
    {:error, reason} -&amp;gt; {:error, reason, state}
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we’ve sent our “ping”, we can expect to receive a “pong” in reply. When we receive the peer’s “pong” response, we want to schedule another “ping” to be sent a short time in the future. We do this by scheduling a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:send_ping&lt;/span&gt;&lt;/code&gt; message to be sent to the current process after a short interval:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp handle_payload(%Pong{}, state) do
  Process.send_after(self(), :send_ping, Application.get_env(:bitcoin_network, :ping_time))
  {:ok, state}
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:send_ping&lt;/span&gt;&lt;/code&gt; handler sends another “ping” message, completing the ping/pong cycle:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def handle_info(:send_ping, state) do
  with :ok &amp;lt;-
         Message.serialize(&quot;ping&quot;, %Ping{
           nonce: :crypto.strong_rand_bytes(8)
         })
         |&amp;gt; send_message(state.socket) do
    {:noreply, state}
  else
    {:error, reason} -&amp;gt; {:error, reason, state}
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s all there is to it!&lt;/p&gt;

&lt;p&gt;As long as &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:ping_time&lt;/span&gt;&lt;/code&gt; is reasonably less than our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:timeout&lt;/span&gt;&lt;/code&gt;, we should always have a constant stream of “ping” messages to keep our timeout timer from firing. If one of our peers ever fails to send their “pong”, we kill their corresponding &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Node&lt;/span&gt;&lt;/code&gt; process.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;As far as I’m concerned, that wraps up the networking portion of our in-progress Elixir-based Bitcoin node project. In the future we’ll turn our attention to the actual guts of a Bitcoin node: processing blocks and transactions.&lt;/p&gt;

&lt;p&gt;At some point we might also slap a fancy user interface on top of our node. Everything’s better with a great UI.&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-09T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-08-12-28-47">
	<title>Unrelenting Technology (myfreeweb): I was wondering why replies sent with the Omnibear Micropub browser extension ended up...</title>
	<link>https://unrelenting.technology/notes/2018-07-08-12-28-47</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;I was wondering why replies sent with the &lt;a href=&quot;https://omnibear.com/&quot;&gt;Omnibear&lt;/a&gt; Micropub browser extension ended up with the URL &lt;code&gt;/replies/&lt;/code&gt; instead of the auto generated slug. Turns out Omnibear sends &lt;code&gt;mp-slug=&quot;&quot;&lt;/code&gt; and my server happily accepted the empty slug :D&lt;/p&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-08T12:28:47+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="http://beza1e1.tuxen.de/raspberry_rfid_music_player.html">
	<title>Andreas Zwinkau (qznc): My Raspberry Pi RF ID music player</title>
	<link>http://beza1e1.tuxen.de/raspberry_rfid_music_player.html</link>
	<content:encoded>&lt;p&gt;My electronics for the kids music player are complete and working.&lt;/p&gt;
    &lt;p&gt;&lt;a href=&quot;http://beza1e1.tuxen.de/raspberry_rfid_music_player.html&quot;&gt;Read full article!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://beza1e1.tuxen.de/img/rfid_player_electronics.jpg&quot; /&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-08T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-07-19-03-33">
	<title>Unrelenting Technology (myfreeweb): What's going on with this piece of Android UI. Why are the icons arranged...</title>
	<link>https://unrelenting.technology/notes/2018-07-07-19-03-33</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;What's going on with this piece of Android UI. Why are the icons arranged diagonally?? Why.&lt;/p&gt;

&lt;blockquote&gt;
&lt;img src=&quot;https://unrelentingtech.s3.dualstack.eu-west-1.amazonaws.com/89bd0f6d_IMG_20180707_031915.jpg&quot; alt=&quot;&quot; class=&quot;u-photo&quot; /&gt;
&lt;/blockquote&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-07T19:03:33+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-07-00-36-37">
	<title>Unrelenting Technology (myfreeweb): The web standards process is a weird thing. Something as complicated and incredible as...</title>
	<link>https://unrelenting.technology/notes/2018-07-07-00-36-37</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;The web standards process is a weird thing. Something as complicated and incredible as CSS Grid is already shipping everywhere… while something as mundane and simple as &lt;a href=&quot;https://github.com/WICG/web-share-target&quot;&gt;registering a website as a share target&lt;/a&gt; has been in the bikeshedding stage for two years already.&lt;/p&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-07T00:36:37+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-06-16-44-02">
	<title>Unrelenting Technology (myfreeweb): Compiled oxipng to WebAssembly, very little changes were required :) https://unrelentingtech.s3.dualstack.eu-west-1.amazonaws.com/b18de0b...</title>
	<link>https://unrelenting.technology/notes/2018-07-06-16-44-02</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;Compiled oxipng to WebAssembly, very &lt;a href=&quot;https://github.com/shssoichiro/oxipng/pull/112&quot;&gt;little&lt;/a&gt; &lt;a href=&quot;https://github.com/Frommi/miniz_oxide/issues/26&quot;&gt;changes&lt;/a&gt; were required :)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;responsive-container&quot;&gt;&lt;img src=&quot;https://unrelentingtech.s3.dualstack.eu-west-1.amazonaws.com/b18de0b9_wayland-screenshot-2018-07-05_16-33-27-fs8.png&quot; class=&quot;u-photo&quot; width=&quot;1276&quot; height=&quot;380&quot; /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-06T20:21:02+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="https://blog.asrpo.com/making_a_low_level_debugger_part_3">
	<title>asrpo (asrp): Making a low level (Linux) debugger, part 3: our first program</title>
	<link>https://blog.asrpo.com/making_a_low_level_debugger_part_3</link>
	<content:encoded>&lt;p&gt;This continues a series where we make a debugger and live editor for (re)creating assembly and C programs.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://blog.asrpo.com/making_a_low_level_debugger&quot;&gt;part 1&lt;/a&gt;, we got the assembly parts: read/write registers and memory, single step, single instruction execution, function calls (although not perfect), set/restore breakpoints, memory allocation and examining upcoming instructions.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://blog.asrpo.com/making_a_low_level_debugger_part_2&quot;&gt;part 2&lt;/a&gt;, we got the C parts: read/write variables using ptrace and memory maps, a C read-eval-print loop (REPL), line numbers from DWARF headers and undo using &lt;code&gt;fork()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Its now time to actually use our debugger/editor! We'll try to use it to write a C program.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-06T14:57:28+00:00</dc:date>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-05-21-10-59">
	<title>Unrelenting Technology (myfreeweb): I rewrote micro-panel (the &quot;admin panel&quot; for this site) from scratch with LitElement and...</title>
	<link>https://unrelenting.technology/notes/2018-07-05-21-10-59</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;I rewrote &lt;a href=&quot;https://github.com/myfreeweb/micro-panel&quot;&gt;micro-panel&lt;/a&gt; (the &quot;admin panel&quot; for this site) from scratch
with &lt;a href=&quot;https://github.com/Polymer/lit-element&quot;&gt;LitElement&lt;/a&gt; and no material design components.
It's really tiny now!
The minified bundle is 57kb (and that still includes &lt;a href=&quot;https://github.com/myfreeweb/codeflask-element&quot;&gt;a code editor&lt;/a&gt; with syntax highlighting).
The previous version was nearly 1mb.&lt;/p&gt;
&lt;p&gt;Also, the new version is a bit simplified: no iframe mode, only cookie auth.
And it doesn't wrap the whole page in an element, it's now more of a set of elements.&lt;/p&gt;
&lt;p&gt;Check out this piece of code, by the way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; close () {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;'animate'&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-string&quot;&gt;'finished'&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Animation.prototype) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.animate({&lt;span class=&quot;hljs-attr&quot;&gt;transform&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;'none'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'translateY(100vh)'&lt;/span&gt;]},
      {&lt;span class=&quot;hljs-attr&quot;&gt;duration&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;easing&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'ease-out'&lt;/span&gt;}).finished
  }
  &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.hidden = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-05T21:10:59+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>

</rdf:RDF>
